//
// This file defines the ABI interface to the underlying container that is running
// the wasm module.  This is somewhat analogous to libc in that this file doesn't
// contain the implementation of the functions, just provides a wrapper around the
// underlying system.
//
// Note that there is actually no "service" here and no "methods" but that these are
// used to conveniently create a namespace and a set of functions.  The namespace
// and functions use snake case because these functions are exposed to the wasm
// level and that is the wasm standard.  We use functions here, not some type of
// object or dispatching system (as we do in the API) because we want to allow
// languages with simple type systems (e.g. C) to have access to these primitives
// directly.
//
// If you want to write your own toolkit against the container--your own api
// to parigot--you can build it on top of these primitives.

syntax = "proto3";
package abi;
import "parigot.proto";
option go_package = "github.com/iansmith/parigot/g/abi;abi";
option (parigot.abi) = true;

// parigot: WasmServiceName=parigot_abi
service Abi {
  option (parigot.wasm_service_name) = "parigot_abi";
  rpc OutputString(OutputStringRequest) returns(OutputStringResponse){
    option (parigot.wasm_method_name) = "output_string";
  }
  rpc Exit(ExitRequest) returns(ExitResponse) {// will die
    option (parigot.wasm_method_name) = "exit";
  }
  rpc Now(NowRequest) returns(NowResponse){
    option (parigot.wasm_method_name) = "now";
  };
  rpc SetNow(SetNowRequest) returns(SetNowResponse){
    option (parigot.wasm_method_name) = "set_now";
  };
  rpc Locate(LocateRequest) returns (LocateResponse){
    option (parigot.wasm_method_name) = "locate";
  }
  //temp
  rpc TinygoNotImplemented(TinygoNotImplementedRequest) returns(TinygoNotImplementedResponse); // will die
  rpc JSNotImplemented(JSNotImplementedRequest) returns(JSNotImplementedResponse); // will die
}

message TinygoNotImplementedRequest{
  string message = 1;
}
message TinygoNotImplementedResponse{}

message JSNotImplementedRequest {
  string message = 1;
}
message JSNotImplementedResponse {}

message OutputStringRequest {
  string s = 1;
}

message OutputStringResponse {}

message NowRequest {}

message NowResponse {
  int64 now = 1;
}

message ExitRequest {
  int64 code = 1;
}
message ExitResponse{}

message SetNowRequest {
  int64 now = 1;
  bool freeze_clock = 2;
}
message SetNowResponse{}

message LocateRequest {
  string team = 1;
  string service = 2;
}

message LocateResponse {
  int64 service_sid =1;
}
