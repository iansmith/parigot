//+build parigot_abi

// This file has been machine generated from proto/abi.proto.  DO NOT EDIT OR YOU WILL LOSE.

// Note that the notation:
// func foo()
// with no body indicates that tinygo should consider that function implemented
// elsewhere, as the typical go compiler does.  For tinygo, we implement the
// calls in the container, the typical go compiler expects the "missing" functions
// to be implemented in assembly. Both of the compilers are effectively delaying
// resolution of the function call target until link time.

package abi

// This set of functions is where control is passed from "user code" to "kernel code"
// in parigot.  In other words, the running container with normal code in it drops
// through this interface to reach container-implemented code.  Like kernel code in
// linux or similar, the implementation of that kernel code is not visible to the
// user program.

//
// These functions require stubs because their parameters are going to need translation
// to work at the WASM level.
//
{{- range .info.Service }}
{{- range .GetWasmMethod}}

{{if .RequiresDecode}}
    //go:wasm-module {{.GetParent.GetWasmServiceName}}
    func {{.GetWasmMethodName}}_stub({{.AllInputWithFormalWasmLevel true}}) {{.OutType}}
{{end}}{{/*Requires Decode */}}
{{end }}{{/*Range over methods*/}}
{{end}}{{/*range over services*/}}

//
// These functions have the true function name at the WASM level because their parameters
// work directly in WASM.  Implementation of these ABI calls is by the container.
//
{{- range .info.Service }}
{{- range .GetWasmMethod}}
{{if .NoDecodeRequired}}
    //go:wasm-module {{.GetParent.GetWasmServiceName}}
    //export {{.GetWasmMethodName}}_
    func {{.GetWasmMethodName}}_({{.AllInputWithFormalWasmLevel true}}) {{.OutType}}
{{end}}{{/*Requires NO Decode */}}
{{end }}{{/*Range over methods*/}}
{{end}}{{/*range over services*/}}


// These functions are wrappers around the true ABI functions, as is done with libc.
// These are the functions that can take wasm compatible parameters and return wasm
// compatible values.

{{- range .info.Service }}
{{- range .GetWasmMethod}}
{{- if .NoDecodeRequired}}
    func {{toCamelCase .GetName}}({{.AllInputWithFormal true}}) {{.OutTypeDecl}} {
{{- if .NotEmptyOutput}}
        return {{.GetWasmMethodName}}_({{.AllInputFormal}}),nil
{{ else }}
         {{.GetWasmMethodName}}_({{.AllInputFormal}})
{{- end }}{{/*if not empty output*/}}
    }
{{end}} {{/*if no decode required */}}
{{- end }} {{/*range over methods */}}
{{- end }} {{/*range over services*/}}


// These functions are for access to the ABI from golang. These functions will
// end up calling the true implementation after the compiled code is patched.
// E.g OutputString is defined here to call output_string_stub but this will
// get changed to output_string_ when we alter the binary.

{{- range .info.Service }}
{{- range .GetWasmMethod}}
{{- if .RequiresDecode}}
    func {{toCamelCase .GetName}}({{.AllInputWithFormal true}}) {{.OutTypeDecl}} {
{{- if .NotEmptyOutput}}
        return {{.GetWasmMethodName}}_stub({{.AllInputFormal}}),nil
{{ else }}
         {{.GetWasmMethodName}}_stub({{.AllInputFormal}})
{{- end }}{{/*if not empty output*/}}
    }
{{end}} {{/*if no decode required */}}
{{- end }} {{/*range over methods */}}
{{- end }} {{/*range over services*/}}
