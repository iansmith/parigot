//+build parigot_abi

// This file has been machine generated from proto/abi.proto.  DO NOT EDIT OR YOU WILL LOSE.

// Note that the notation:
// func foo()
// with no body indicates that tinygo should consider that function implemented
// elsewhere, as the typical go compiler does.  For tinygo, we implement the
// calls in the container, the typical go compiler expects the "missing" functions
// to be implemented in assembly. Both of the compilers are effectively delaying
// resolution of the function call target until link time.

package abi

// This set of functions is where control is passed from "user code" to "kernel code"
// in parigot.  In other words, the running container with normal code in it drops
// through this interface to reach container-implemented code.  Like kernel code in
// linux or similar, the implementation of that kernel code is not visible to the
// user program.

//
// These functions require stubs because their parameters are going to need translation
// to work at the WASM level.
//
{{- range .info.Service }}
{{- range .GetWasmMethod}}
{{- $methodRet:=call .FuncChoice.MethodRet .InputCodeNeeded .OutputCodeNeeded .PullParameters .PullOutput true . }}
{{- $decodeReq:=call .FuncChoice.DecodeRequired .InputCodeNeeded .OutputCodeNeeded .PullParameters .PullOutput . }}
{{- if $decodeReq}}
//go:wasm-module {{.GetParent.GetWasmServiceName}}
//export {{.GetWasmMethodName}}_stub
func {{.GetWasmMethodName}}_stub({{.AllInputWithFormalWasmLevel true}}) {{$methodRet}}
{{- end}}{{/*Requires Decode */}}
{{- end }}{{/*Range over methods*/}}
{{- end}}{{/*range over services*/}}

//
// These functions have the true function name at the WASM level because their parameters
// work directly in WASM.  Implementation of these ABI calls is by the container.
//
{{- range .info.Service }}
{{- range .GetWasmMethod}}
{{- $methodRet:=call .FuncChoice.MethodRet .InputCodeNeeded .OutputCodeNeeded .PullParameters .PullOutput true . }}
{{- $noDecodeReq:=call .FuncChoice.NoDecodeRequired .InputCodeNeeded .OutputCodeNeeded .PullParameters .PullOutput . }}
{{- if $noDecodeReq}}
//go:wasm-module {{.GetParent.GetWasmServiceName}}
//export {{.GetWasmMethodName}}_
func {{.GetWasmMethodName}}_({{.AllInputWithFormalWasmLevel true}}) {{$methodRet}}
{{- end}}{{/*Requires NO Decode */}}
{{- end }}{{/*Range over methods*/}}
{{- end}}{{/*range over services*/}}

//
// These functions are for access to the ABI from golang. These functions will
// end up calling the true implementation after the compiled code is patched.
// E.g OutputString is defined here to call output_string_stub but this will
// get changed to output_string_ when we alter the binary.
//

{{- range .info.Service }}
{{- range .GetWasmMethod}}
{{- $methodRet:=call .FuncChoice.MethodRet .InputCodeNeeded .OutputCodeNeeded .PullParameters .PullOutput true . }}
{{- $retValue:=call .FuncChoice.RetValue .InputCodeNeeded .OutputCodeNeeded .PullParameters .PullOutput  true . }}
{{- $methParamDecl:=call .FuncChoice.MethodParamDecl .InputCodeNeeded .OutputCodeNeeded .PullParameters .PullOutput .}}
{{- $methCall:=call .FuncChoice.MethodCall .InputCodeNeeded .OutputCodeNeeded .PullParameters .PullOutput .}}
{{- $needsRet:=call .FuncChoice.NeedsRet .InputCodeNeeded .OutputCodeNeeded .PullParameters .PullOutput }}
func {{toCamelCase .GetName}}({{$methParamDecl}}) {{$methodRet}} {
{{- if $needsRet }}
    return {{.GetWasmMethodName}}_stub({{$methCall}})
{{- else}}
    {{.GetWasmMethodName}}_stub({{$methCall}})
{{- end}}
}

{{- end }} {{/*range over methods */}}
{{- end }} {{/*range over services*/}}
