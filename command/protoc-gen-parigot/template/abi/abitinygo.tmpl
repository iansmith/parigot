//+build parigot_abi

// This file has been machine generated from proto/abi.proto.  DO NOT EDIT OR YOU WILL LOSE.

// Note that the notation:
// func foo()
// with no body indicates that tinygo should consider that function implemented
// elsewhere, as the typical go compiler does.  For tinygo, we implement the
// calls in the container, the typical go compiler expects the "missing" functions
// to be implemented in assembly. Both of the compilers are effectively delaying
// resolution of the function call target until link time.

package abi
import(
    _ "unsafe"
)

// This set of functions is where control is passed from "user code" to "kernel code"
// in parigot.  In other words, the running container with normal code in it drops
// through this interface to reach container-implemented code.  Like kernel code in
// linux or similar, the implementation of that kernel code is not visible to the
// user program.


//
// These functions have the true function name at the WASM level because their parameters
// work directly in WASM.  Implementation of these ABI calls is by the container.
//
{{- range .info.Service }}
{{- range .GetWasmMethod}}
{{- $methodRet:=call .FuncChoice.MethodRet .InputCodeNeeded .OutputCodeNeeded .PullParameters .PullOutput true . }}
{{- $methodParamDecl:=call .FuncChoice.MethodParamDecl .InputCodeNeeded .OutputCodeNeeded .PullParameters .PullOutput . }}
{{- $noDecodeReq:=call .FuncChoice.NoDecodeRequired .InputCodeNeeded .OutputCodeNeeded .PullParameters .PullOutput . }}
{{- if $noDecodeReq}}
//go:wasm-module {{.GetParent.GetWasmServiceName}}
//export {{.GetWasmMethodName}}_
//go:linkname {{.GetWasmMethodName}}_
func {{.GetWasmMethodName}}_({{$methodParamDecl}}) {{$methodRet}}
{{- end}}{{/*Requires NO Decode */}}
{{- end }}{{/*Range over methods*/}}
{{- end}}{{/*range over services*/}}

//
// These functions are for access to the ABI from golang. Additionally, these
// implementations induce tinygo to call the inner function with the "real"
// wasm parameters.
//

{{- range .info.Service }}
{{- range .GetWasmMethod}}
{{- $methodRet:=call .FuncChoice.MethodRet .InputCodeNeeded .OutputCodeNeeded .PullParameters .PullOutput true . }}
{{- $retValue:=call .FuncChoice.RetValue .InputCodeNeeded .OutputCodeNeeded .PullParameters .PullOutput  true . }}
{{- $methParamDecl:=call .FuncChoice.MethodParamDecl .InputCodeNeeded .OutputCodeNeeded .PullParameters .PullOutput .}}
{{- $methCall:=call .FuncChoice.MethodCall .InputCodeNeeded .OutputCodeNeeded .PullParameters .PullOutput .}}
{{- $needsRet:=call .FuncChoice.NeedsRet .InputCodeNeeded .OutputCodeNeeded .PullParameters .PullOutput }}
{{- $complexParam:=call .FuncChoice.HasComplexParam .InputCodeNeeded .OutputCodeNeeded .PullParameters .PullOutput . }}

{{- $abisuffix:="_"}}
{{- if $complexParam }}
{{- $abisuffix:="_stub"}} // {{$complexParam}}
{{- end}}


//export {{toCamelCase .GetName}}
//go:noinline
func {{toCamelCase .GetName}}({{$methParamDecl}}) {{$methodRet}} {
{{- if $needsRet }}
    return {{.GetWasmMethodName}}{{$abisuffix}}({{$methCall}})
{{- else}}
    {{.GetWasmMethodName}}{{$abisuffix}}({{$methCall}})
{{- end}}
}

{{- if $complexParam }}
//go:wasm-module parigot_abi  {{$complexParam}}
//export {{.GetWasmMethodName}}{{$abisuffix}}
//go:noinline
//go:linkname {{.GetWasmMethodName}}{{$abisuffix}}
func {{.GetWasmMethodName}}{{$abisuffix}}({{$methParamDecl}}) {{$methodRet}}
{{ end }}

{{- end }} {{/*range over methods */}}
{{- end }} {{/*range over services*/}}
