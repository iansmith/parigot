//
// These functions are convenience wrappers around the ABI functions that have
// complex arguments or return types at the wasm level.  These helpers mean that
// the ABI implementation (in go) can program at the go level.
//
// This file gets copied to the command/runner/g directory by the makefile, thus is
// in the package for its destination.

package g
import (
    "unsafe"

    wasmtime "github.com/bytecodealliance/wasmtime-go"

)

//
// This interface makes it easy to avoid import cycles. The implementation is
// provided by the container.
//
type Caller interface {
{{- range .info.GetWasmService }}
{{- range .GetWasmMethod}}
    {{- if .HasComplexParam }}
    {{.GetName}}({{.AllInputWithFormal true}}) {{.OutType}}
    {{- end}}
{{- end}}
{{- end}}
    GetMemPtr() uintptr
}

var impl Caller
func SetCaller(i Caller) {
    impl=i
}

func strConvert(memPtr uintptr, ptr int32, length int32) string {
	buf := make([]byte, length)
	for i := int32(0); i < length; i++ {
		b := (*byte)(unsafe.Pointer(memPtr + uintptr(ptr+i)))
		buf[i] = *b
	}
	s := string(buf)
	return s
}

// Functions with complex inputs
{{- range .info.GetWasmService }}
{{- range .GetWasmMethod}}
{{- if .HasComplexParam}}
func {{.GetWasmMethodName}}_({{.AllInputParamWithFormalWasmLevel true}}) {{.OutType}} {
{{- if .NotEmptyOutput}}
    return impl.{{.GetName}}({{ .AllInputParamWasmToGoImpl }})
{{ else }}
    impl.{{.GetName}}({{.AllInputParamWasmToGoImpl}})
{{- end }}
}
{{- end }}
{{- end }}
{{- end }}

func WasmTimeWrapABI(impl Caller, store wasmtime.Storelike, result map[string]*wasmtime.Func) {
// Functions with complex inputs
{{- range .info.GetWasmService }}
{{- range .GetWasmMethod}}
{{- if .HasComplexParam}}
result["{{.GetParent.GetWasmServiceName}}.{{.GetWasmMethodName}}"]=wasmtime.WrapFunc(store, impl.{{.GetName}})
{{- end }}
{{- end }}
{{- end }}
}
