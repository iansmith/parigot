//
// These functions are convenience wrappers around the ABI functions that have
// complex arguments or return types at the wasm level.  These helpers mean that
// the ABI implementation (in go) can program at the go level.
//
// This file gets copied to the command/runner/g directory by the makefile, thus is
// in the package for its destination.

package g
import (
    "unsafe"

    //"github.com/iansmith/parigot/g/parigot/abi"

	wasmtime "github.com/bytecodealliance/wasmtime-go"
)

//
// This interface makes it easy to avoid import cycles. The implementation is
// provided by the container.
//
type Caller interface {
{{- range .info.Service }}
{{- range .GetWasmMethod}}
    {{- if .HasComplexParam }}
    {{.GetName}}({{.AllInputWithFormal true}}) {{.OutType}}
    {{- end}}
{{- end}}
{{- end}}
    GetMemPtr() uintptr
}

var impl Caller
func SetCaller(i Caller) {
    impl=i
}

func bytesConvert(memPtr uintptr, ptr int32, length int32, _ int32) []byte{
	buf := make([]byte, length)
	for i := int32(0); i < length; i++ {
		b := (*byte)(unsafe.Pointer(memPtr + uintptr(ptr+i)))
		buf[i] = *b
	}
	return buf
}

func strConvert(memPtr uintptr, ptr int32, length int32) string {
    // we could probably go bytesConvert and claim our cap was equal to our len but...
	buf := make([]byte, length)
	for i := int32(0); i < length; i++ {
		b := (*byte)(unsafe.Pointer(memPtr + uintptr(ptr+i)))
		buf[i] = *b
	}
	s := string(buf)
	return s
}


func WasmTimeWrapABI(impl Caller, store wasmtime.Storelike, result map[string]*wasmtime.Func) {
// bind the names of the container implementation
{{- range .info.Service }}
{{- range .GetWasmMethod}}
{{- if .HasComplexParam}}
result["{{.GetParent.GetWasmServiceName}}.{{.GetWasmMethodName}}_"]=wasmtime.WrapFunc(store, impl.{{.GetName}})
{{- end }}
{{- end }}
{{- end }}
}


// these functions are the ones that are actually behind the abi for each
// function call. These will get bound to the implementation of the interface
// provided with SetCaller().  Note that these true implementations can only use
// the four real types of WASM (I32,F32,I64,F64).
{{- range .info.Service }}
{{- range .GetWasmMethod}}
{{- if .HasComplexParam}}
func {{.GetWasmMethodName}}_({{.AllInputNumberedParam}}) {{.OutType}} {
{{- if .NotEmptyOutput}}
    return impl.{{.GetName}}({{ .AllInputWasmToGoImpl }})
{{ else }}
    impl.{{.GetName}}({{.AllInputWasmToGoImpl}})
{{- end }}
}
{{- end }}
{{- end }}
{{- end }}
