{{range .file.GetService}}
{{$svc:=.}}

{{- $serviceName:=$svc.WasmServiceName}}
{{- $packageName:=$svc.PackageName}}

func Locate{{toCamelCase $serviceName}}() {{$serviceName}} {
    anything,err:=parigot.Locate("{{$serviceName}}")
    if err!=nil {
        panic("parigot.Locate failed on {{toCamelCase $serviceName}}:"+v.Error())
    }
    if anything==nil {
        log.Printf("WARNING: unable to find any instances of type ${{toCamelCase $serviceName}} via Locate{{$serviceName}}")
    }
    return anything.({{toCamelCase $serviceName}})
}

type {{$serviceName}}ProxyId int32
type {{$serviceName}}Proxy struct {
    id {{$serviceName}}ProxyId
}

{{- range $svc.ServiceDescriptorProto.GetWasmMethod}}
{{ $methodName := .GetTypeName }}
func (proxy *{{$serviceName}}Proxy) {{ $methodName }}({{inputParamNameSet $packageName .}}) ({{outputTypeName .}},error){
        {{ $inEmpty := isInputEmpty .}}
        {{ $outEmpty := isOutputEmpty .}}
        {{ if ne $inEmpty true}}
		r, err := proto.Marshal(message)
		if err != nil {
		    panic("failed trying to marshal " + "{{inputParamName .}}" +" for service "+ "{{$serviceName}}")
		}
		{{end}}

		{{- /*   4 cases of dispatch */}}

        {{- if ne $inEmpty true}}
    		{{- if ne $outEmpty true}}
                result, errDispatch :=parigot.Dispatch11(proxy.id,"{{$serviceName}}", "{{$methodName}}",r)
             {{else}}
                // called for effect
		        errDispatch :=parigot.Dispatch10(proxy.id,"{{$serviceName}}", "{{$methodName}}",r)
		    {{end}}
		{{else}}
    		{{- if ne $outEmpty true -}}
                result, errDispatch :=parigot.Dispatch01(proxy.id,"{{$serviceName}}", "{{$methodName}}")
             {{else}}
                // called for effect
		        errDispatch :=parigot.Dispatch00(proxy.id,"{{$serviceName}}", "{{$methodName}}")
		    {{end}}
		{{- end}}
		if errDispatch!=nil {
		    {{- if hasOutput . }}
		    return {{outputZeroVal $packageName .}}, errDispatch
		    {{else}}
		    return errDispatch
		    {{end}}
		}
		{{- if hasOutput .}}
		out:={{outputZeroVal $packageName .}}
		errUnmarshal:=proto.Unmarshal(result,&out)
		if errUnmarshal != nil {
		    panic("failed trying to unmarshal " + "{{outputName $packageName .}}" +" for service "+ "{{$serviceName}}")
		}
        return out.({{outputName $packageName .}}),nil
        {{else}}
        return nil
		{{end}}
}
{{- end}}

func Register{{toCamelCase .svc.WasmServiceName}}(h ...{{.svc.WasmServiceName}}) {
    parigot.Register("{{.svc.WasmServiceName}}",h)
}

{{end}}
