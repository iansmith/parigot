package {{ LastSegmentOfPackage .file.GetPackage }}
import(
    "log"
    "github.com/iansmith/parigot/g/parigot/kernel"
)
{{- range .info.Service }}
{{ $svc:=.GetWasmServiceName }}
{{ $svcCamel:=toCamelCase .GetWasmServiceName }}
//
// {{$svcCamel}}
//
type {{$svcCamel}} interface {
{{- range .GetWasmMethod}}
{{- $methodRet:=call .FuncChoice.MethodRet .InputCodeNeeded .OutputCodeNeeded .PullParameters .PullOutput false . }}
{{- $methParamDecl:=call .FuncChoice.MethodParamDecl .InputCodeNeeded .OutputCodeNeeded .PullParameters .PullOutput .}}
    {{.WasmMethodName}}({{$methParamDecl}}) {{$methodRet}}
{{- end }}
}
{{end}} {{/* closes top service, the interface stuff*/}}

{{- range .info.Service }}
{{ $svc:=.GetWasmServiceName }}
{{ $svcCamel:=.GetWasmServiceName }}
type {{$svcCamel}}Impl struct {
    *parigot.ClientSideService
}

func Locate{{$svc}}() ({{$svcCamel}},error) {
    var resp kernel.LocateResponse{}
    err:=kernel.Locate("{{.ProtoPackage}}","{{$svc}}",&resp)
    if err!=nil {
        return nil, err
    }
    if resp.GetErrorId() != 0 {
        return nil, parigot.NewErrorFromId("failed to locate {{$svc}}",
            parigot.GetErrorId())
    }
    cs:=parigot.NewClientSideService(resp.GetServiceId())
    return &{{toCamelCase .GetWasmServiceName}}Impl{
        ClientSideService: cs,
    },nil
}

{{- range .GetWasmMethod}}
{{- $meth:=.WasmMethodName}}
{{- $methCamel:=toCamelCase .WasmMethodName}}
{{- $bits:=call .FuncChoice.Bits .InputCodeNeeded .OutputCodeNeeded .PullParameters .PullOutput }}
{{- $needsFill:=call .FuncChoice.NeedsFill .InputCodeNeeded .OutputCodeNeeded .PullParameters .PullOutput }}
{{- $needsPullApart:=call .FuncChoice.NeedsPullApart .InputCodeNeeded .OutputCodeNeeded .PullParameters .PullOutput }}
{{- $inParam:=call .FuncChoice.InputParam .InputCodeNeeded .OutputCodeNeeded .PullParameters .PullOutput .}}
{{- $inputToSend:=call .FuncChoice.InputToSend .InputCodeNeeded .OutputCodeNeeded .PullParameters .PullOutput .}}
{{- $outLocal:=call .FuncChoice.OutLocal .InputCodeNeeded .OutputCodeNeeded .PullParameters .PullOutput .}}
{{- $inbound:=call .FuncChoice.Inbound .InputCodeNeeded .OutputCodeNeeded .PullParameters .PullOutput }}
{{- $outbound:=call .FuncChoice.Outbound .InputCodeNeeded .OutputCodeNeeded .PullParameters .PullOutput }}
{{- $retValue:=call .FuncChoice.RetValue .InputCodeNeeded .OutputCodeNeeded .PullParameters .PullOutput .}}
{{- $methodRet:=call .FuncChoice.MethodRet .InputCodeNeeded .OutputCodeNeeded .PullParameters .PullOutput false . }}
{{- $retError:=call .FuncChoice.RetError .InputCodeNeeded .OutputCodeNeeded .PullParameters .PullOutput . }}
{{- $methParamDecl:=call .FuncChoice.MethodParamDecl .InputCodeNeeded .OutputCodeNeeded .PullParameters .PullOutput .}}
{{- $methCall:=call .FuncChoice.MethodCall .InputCodeNeeded .OutputCodeNeeded .PullParameters .PullOutput .}}

func (i *{{$svcCamel}}Impl) {{$methCamel}}({{$methParamDecl}}) {{$methodRet}} {

{{- if .HasAbiCallOption}}
    //no marshalling
    return abi.{{$methCamel}}({{$methCall}})
{{- else}}
    {{- if $needsFill}} //{{$needsFill}}
//build the request structure
    req:=&{{toCamelCase $meth}}Request{}
{{- range .InputFields}}
    req.{{toCamelCase .GetName}}={{.GetWasmFieldName}}
{{- end}}{{/* range input fields */}}
{{- end}}{{/*needs fill*/}}
{{- if ne $inParam ""}}
    req:=&{{$inParam}}
{{- end}}{{/* has in param*/}}
{{- if ne $outLocal ""}}
    resp:=&{{$outLocal}}
 {{- end}}
    err:= i.Dispatch("{{.WasmMethodName}}",{{$inputToSend}},{{$outbound}})
    if err!=nil {
       return {{$retError}}err
    }
    return {{$retValue}}
{{end}}{{/*abi used */}}
}
{{- end}}{{/*ranging over methods*/}}
{{- end}}{{/*ranging over services*/}}

func init() {
{{- range .info.Service }}
    x:=abi.Register("{{.ProtoPackage}}", "{{.GetWasmServiceName}}")
    log.Printf("service.id %x",x.ServiceId, x.ErrorCode)
{{- end }}
}
