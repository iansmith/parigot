package {{ LastSegmentOfPackage .file.GetPackage }}
import(
    "github.com/iansmith/parigot/api/parigot"
    "github.com/iansmith/parigot/g/parigot/abi"
    "google.golang.org/protobuf/proto"

)
{{- range .info.Service }}
{{ $svc:=.GetWasmServiceName }}
{{ $svcCamel:=toCamelCase .GetWasmServiceName }}
//
// {{$svcCamel}}
//
type {{$svcCamel}} interface {
{{- range .GetWasmMethod}}
    {{.GetWasmMethodName}}({{.AllInputWithFormal true}}) {{.OutTypeDecl}}
{{- end }}
}
{{end}} {{/* closes top service, the interface stuff*/}}

{{- range .info.Service }}
{{ $svc:=.GetWasmServiceName }}
{{ $svcCamel:=.GetWasmServiceName }}
type {{$svcCamel}}Impl struct {
    *parigot.ClientSideService
}

func Locate{{$svc}}() ({{$svcCamel}},error) {
    svcId, err:=abi.Locate("parigot","{{$svc}}")
    if err!=nil {
        return nil, err
    }
    cs:=parigot.NewClientSideService(parigot.ServiceId(svcId))
    return &{{toCamelCase .GetWasmServiceName}}Impl{
        ClientSideService: cs,
    },nil
}

{{- range .GetWasmMethod}}
{{- $meth:=.GetWasmMethodName}}
{{- $methCamel:=toCamelCase .GetWasmMethodName}}
{{- $bits:=call .FuncChoice.Bits .InputCodeNeeded .OutputCodeNeeded .PullParameters .PullOutput }}
{{- $needsFill:=call .FuncChoice.NeedsFill .InputCodeNeeded .OutputCodeNeeded .PullParameters .PullOutput }}
{{- $needsPullApart:=call .FuncChoice.NeedsPullApart .InputCodeNeeded .OutputCodeNeeded .PullParameters .PullOutput }}
{{- $needsInputPtr:=call .FuncChoice.NeedsInputPtr .InputCodeNeeded .OutputCodeNeeded .PullParameters .PullOutput }}
{{- $inbound:=call .FuncChoice.Inbound .InputCodeNeeded .OutputCodeNeeded .PullParameters .PullOutput }}
{{- $outbound:=call .FuncChoice.Outbound .InputCodeNeeded .OutputCodeNeeded .PullParameters .PullOutput }}
{{- $retValue:=call .FuncChoice.RetValue .InputCodeNeeded .OutputCodeNeeded .PullParameters .PullOutput false .}}
{{- $methodRet:=call .FuncChoice.MethodRet .InputCodeNeeded .OutputCodeNeeded .PullParameters .PullOutput false . }}
{{- $retError:=call .FuncChoice.RetError .InputCodeNeeded .OutputCodeNeeded .PullParameters .PullOutput }}

func (i *{{$svcCamel}}Impl) {{$methCamel}}({{.AllInputWithFormal true}}) {{$methodRet}} {
{{- if .HasAbiCallOption}}
    //no marshalling
    return abi.{{$methCamel}}({{.AllInputFormal}})
{{- else}}
    {{- if $needsFill}}
//build the request structure
    req:=&{{toCamelCase $meth}}Request{}
{{- range .GetInputFields}}
    req.{{toCamelCase .GetName}}={{.GetWasmFieldName}}
{{- end}}{{/* range input fields */}}
{{- end}}{{/*needs fill*/}}
{{- if $needsInputPtr}}
    req=&in
{{- end}}{{/* needs input ptr*/}}
    err:= i.Dispatch(message,{{$inbound}},{{$outbound}})
    if err!=nil {
       return {{$retError}}
    }
    return {{$retValue}}
{{end}}{{/*abi used */}}
}
{{- end}}{{/*ranging over methods*/}}
{{- end}}{{/*ranging over services*/}}
