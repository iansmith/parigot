package {{ LastSegmentOfPackage .file.GetPackage }}
import(
    "github.com/iansmith/parigot/api/parigot"
    "github.com/iansmith/parigot/g/parigot/abi"
    "google.golang.org/protobuf/proto"

)
{{- range .info.Service }}
//
// {{toCamelCase .GetWasmServiceName}}
//
type {{toCamelCase .GetWasmServiceName}} interface {
{{- range .GetWasmMethod}}
    {{.GetWasmMethodName}}({{.AllInputWithFormal true}}) {{.OutTypeDecl}}
{{- end }}
}
{{end}}

{{- range .info.Service }}
{{ $svc:=.GetWasmServiceName }}
type {{toCamelCase .GetWasmServiceName}}Impl struct {
    *parigot.ClientSideService
}

func Locate{{$svc}}() ({{toCamelCase .GetWasmServiceName}},error) {
    svcId, err:=abi.Locate("parigot","{{$svc}}")
    if err!=nil {
        return nil, err
    }
    cs:=parigot.NewClientSideService(parigot.ServiceId(svcId))
    return &{{toCamelCase .GetWasmServiceName}}Impl{
        ClientSideService: cs,
    },nil
}

{{- range .GetWasmMethod}}
{{ $meth:=.GetWasmMethodName }}
func (i *{{toCamelCase $svc}}Impl) {{toCamelCase $meth}}({{.AllInputWithFormal true}}) {{.OutTypeDecl}} {
{{if .HasAbiCallOption}}
    //no marshalling
    return abi.{{toCamelCase $meth}}({{.AllInputFormal}})
{{else}}
    req:=&{{toCamelCase $meth}}Request{}
{{if gt .GetCGInput.Len 0}}
{{- range .GetInputFields}}
    req.{{toCamelCase .GetName}}={{.GetWasmFieldName}}
{{end}}{{/* range input fields */}}
    b, err:=Encode{{toCamelCase $meth}}Request(req)
    if err!=nil {
        {{.ReturnErrorDecl (printf "encoding parameters to %s" $meth)}}
    }
{{end}}{{/* if non empty input */}}
    b,err=abi.Dispatch("{{$svc}}","{{$meth}}", b)
    if err!=nil {
        {{.ReturnErrorDecl (printf "dispatching method %s" $meth)}}
    }
{{if gt .GetCGOutput.Len 0}}
    resp:=&{{toCamelCase $meth}}Response{}
    err = proto.Unmarshal(b,resp)
    if err!=nil {
        {{.ReturnErrorDecl (printf "unmarshaling results from %s" $meth)}}
    }
    {{.ReturnValueDecl }}
{{end}}{{/* if non empty output */}}
}
{{end}}{{/* has abi call option */}}
{{- end }}{{/* methods */}}
{{- end}}{{/* services */}}
