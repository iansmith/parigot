package {{ LastSegmentOfPackage .file.GetPackage }}
import(
{{- range .imports }}
    "{{.}}"
    "{{.}}"
{{- end}} {{/* imports */}}
)

{{ $info:=.info }}
{{- range .info.Service }}
{{ $svc:=.GetWasmServiceName }}
{{ $svcCamel:=toCamelCase .GetWasmServiceName }}
//
// {{$svcCamel}}
//
type {{$svcCamel}} interface {
{{- range .GetWasmMethod}}
{{- $methodRet:=call .FuncChoice.MethodRet .InputCodeNeeded .OutputCodeNeeded .PullParameters .PullOutput false . }}
{{- $methParamDecl:=call .FuncChoice.MethodParamDecl .InputCodeNeeded .OutputCodeNeeded .PullParameters .PullOutput .}}
    {{.WasmMethodName}}({{$methParamDecl}}) {{$methodRet}}
{{- end }}
}
{{end}} {{/* closes top service, the interface stuff*/}}

{{- range .info.Service }}
{{ $svc:=.GetWasmServiceName }}
{{ $svcCamel:=.GetWasmServiceName }}
type {{$svcCamel}}Client struct {
    *client.ClientSideService
}

{{ if .NoKernelOption}}
func Locate{{$svc}}() ({{$svcCamel}},error) {
    var resp kernel.LocateResponse{}
    err:=kernel.Locate("{{.ProtoPackage}}","{{$svc}}",&resp)
    if err!=nil {
        return nil, err
    }
    if resp.GetErrorId() != 0 {
        return nil, parigot.NewErrorFromId("failed to locate {{$svc}}",
            parigot.GetErrorId())
    }
    cs:=parigot.NewClientSideService(resp.GetServiceId())
    return &{{toCamelCase .GetWasmServiceName}}Impl{
        ClientSideService: cs,
    },nil
}
{{- end }} {{/*kernel option*/}}

{{ if .NoKernelOption }}
{{- range .GetWasmMethod}}

{{- $meth:=.WasmMethodName}}
{{- $methCamel:=toCamelCase .WasmMethodName}}
{{- $bits:=call .FuncChoice.Bits .InputCodeNeeded .OutputCodeNeeded .PullParameters .PullOutput }}
{{- $needsFillIn:=call .FuncChoice.NeedsFillIn .InputCodeNeeded .OutputCodeNeeded .PullParameters .PullOutput }}
{{- $needsFillOut:=call .FuncChoice.NeedsFillOut .InputCodeNeeded .OutputCodeNeeded .PullParameters .PullOutput }}
{{- $needsPullApart:=call .FuncChoice.NeedsPullApart .InputCodeNeeded .OutputCodeNeeded .PullParameters .PullOutput }}
{{- $inParam:=call .FuncChoice.InputParam .InputCodeNeeded .OutputCodeNeeded .PullParameters .PullOutput .}}
{{- $outParam:=call .FuncChoice.OutputParam .InputCodeNeeded .OutputCodeNeeded .PullParameters .PullOutput .}}
{{- $inputToSend:=call .FuncChoice.InputToSend .InputCodeNeeded .OutputCodeNeeded .PullParameters .PullOutput .}}
{{- $outLocal:=call .FuncChoice.OutLocal .InputCodeNeeded .OutputCodeNeeded .PullParameters .PullOutput .}}
{{- $inbound:=call .FuncChoice.Inbound .InputCodeNeeded .OutputCodeNeeded .PullParameters .PullOutput }}
{{- $outbound:=call .FuncChoice.Outbound .InputCodeNeeded .OutputCodeNeeded .PullParameters .PullOutput }}
{{- $retValue:=call .FuncChoice.RetValue .InputCodeNeeded .OutputCodeNeeded .PullParameters .PullOutput .}}
{{- $methodRet:=call .FuncChoice.MethodRet .InputCodeNeeded .OutputCodeNeeded .PullParameters .PullOutput false . }}
{{- $retError:=call .FuncChoice.RetError .InputCodeNeeded .OutputCodeNeeded .PullParameters .PullOutput . }}
{{- $methParamDecl:=call .FuncChoice.MethodParamDecl .InputCodeNeeded .OutputCodeNeeded .PullParameters .PullOutput .}}

{{/*
{{- $methCall:=call .FuncChoice.MethodCall .InputCodeNeeded .OutputCodeNeeded .PullParameters .PullOutput .}}
*/}}

func (i *{{$svcCamel}}Client) {{$methCamel}}({{$methParamDecl}}) error {

{{- if $needsFillIn}}
    req:=&{{$inParam}}{}  // build the structure: {{$inParam}}
{{- range .InputFields}}
    req.{{toCamelCase .GetName}}={{.GetWasmFieldName}}
{{- end}}{{/* range input fields */}}
{{- else }} {{/* other side of needs fill in */}}
    req := in;
{{- end}}{{/*needs fill*/}}

{{- if $needsFillOut}}
    var out =&{{$outParam}}  // take apart the structure
{{- end}}

    err:= i.Dispatch("{{.WasmMethodName}}",req,out)
    if err!=nil {
       return err
    }

{{- if $needsFillOut}} //take apart response structure: {{$outParam}}
{{- range .OutputFields}}
    *{{.Name}}={{.Field}}
{{- end}}{{/* range output fields */}}
{{- end}}{{/*needs fill*/}}
    return nil
}
{{- end }} {{/*ranging over methods*/}}
{{- end}} {{/* kernel option */}}

{{ if .HasKernelOption }}
{{ $info.KernelInterface}}
{{- end }}
{{- end}}{{/*ranging over services*/}}


{{- if .noKernelOption }}
func init() {
{{- range .info.Service }}
    x:=abi.Register("{{.ProtoPackage}}", "{{.GetWasmServiceName}}")
    log.Printf("service.id %x",x.ServiceId, x.ErrorCode)
{{- end }}
}
{{- end }} {{/* if no kernel */}}
