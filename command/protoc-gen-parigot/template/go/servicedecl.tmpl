package {{ LastSegmentOfPackage .file.GetPackage }}
import(
{{- range $j,$i := .imports }}
    "{{$j}}"
{{- end}} {{/* imports */}}

    // this set of imports is _unrelated_ to the particulars of what the .proto imported... those are above
    "github.com/iansmith/parigot/lib"  // id manipulation
    "github.com/iansmith/parigot/g/pb/kernel" // dispatch and locate
)

{{- $info:=.info }}
{{- range .info.Service }}
{{- if .NoKernelOption}}
{{- $svc:=.GetWasmServiceName }}
{{- $svcCamel:=toCamelCase .GetWasmServiceName }}
//
// {{$svcCamel}}
//
type {{$svcCamel}} interface {
{{- range .GetWasmMethod}}
{{- $methodRet:=call .FuncChoice.MethodRet .InputCodeNeeded .OutputCodeNeeded .PullParameters .PullOutput false . }}
{{- $methParamDecl:=call .FuncChoice.MethodParamDecl .InputCodeNeeded .OutputCodeNeeded .PullParameters .PullOutput .}}
    {{.WasmMethodName}}({{$methParamDecl}}) {{$methodRet}}
{{- end }}
}
{{- end }}{{/* closes no kernel option */}}
{{- end}} {{/* closes top service, the interface stuff*/}}

{{- range .info.Service }}
{{- if .NoKernelOption}}
{{ $svc:=.GetWasmServiceName }}
{{ $svcCamel:=.GetWasmServiceName }}
type {{$svcCamel}}Client struct {
    *lib.ClientSideService
}

func Locate{{$svc}}() (*{{$svcCamel}}Client,error) {
	var resp kernel.LocateResponse
	req := &kernel.LocateRequest{
        PackageName:"{{.ProtoPackage}}",
        ServiceName: "{{$svc}}",
	}
    service, err:=lib.Locate(req,&resp)
    if err!=nil {
        return nil, err
    }
    cs := lib.NewClientSideService(service)
    return &{{$svc}}Client{
        ClientSideService: cs,
    }, nil
}

{{- range .GetWasmMethod}}

{{- $meth:=.WasmMethodName}}
{{- $methCamel:=toCamelCase .WasmMethodName}}
{{- $bits:=call .FuncChoice.Bits .InputCodeNeeded .OutputCodeNeeded .PullParameters .PullOutput }}
{{- $needsFillIn:=call .FuncChoice.NeedsFillIn .InputCodeNeeded .OutputCodeNeeded .PullParameters .PullOutput }}
{{- $needsFillOut:=call .FuncChoice.NeedsFillOut .InputCodeNeeded .OutputCodeNeeded .PullParameters .PullOutput }}
{{- $needsPullApart:=call .FuncChoice.NeedsPullApart .InputCodeNeeded .OutputCodeNeeded .PullParameters .PullOutput }}
{{- $inParam:=call .FuncChoice.InputParam .InputCodeNeeded .OutputCodeNeeded .PullParameters .PullOutput .}}
{{- $outParam:=call .FuncChoice.OutputParam .InputCodeNeeded .OutputCodeNeeded .PullParameters .PullOutput .}}
{{- $inbound:=call .FuncChoice.Inbound .InputCodeNeeded .OutputCodeNeeded .PullParameters .PullOutput . }}
{{- $outbound:=call .FuncChoice.Outbound .InputCodeNeeded .OutputCodeNeeded .PullParameters .PullOutput . }}
{{- $methParamDecl:=call .FuncChoice.MethodParamDecl .InputCodeNeeded .OutputCodeNeeded .PullParameters .PullOutput .}}
{{- $dispatchParam:=call .FuncChoice.DispatchParam .InputCodeNeeded .OutputCodeNeeded .PullParameters .PullOutput .}}
{{- $dispatchResult:=call .FuncChoice.DispatchResult .InputCodeNeeded .OutputCodeNeeded .PullParameters .PullOutput .}}

{{/*
{{- $methCall:=call .FuncChoice.MethodCall .InputCodeNeeded .OutputCodeNeeded .PullParameters .PullOutput .}}
{{- $inputToSend:=call .FuncChoice.InputToSend .InputCodeNeeded .OutputCodeNeeded .PullParameters .PullOutput .}}
{{- $outLocal:=call .FuncChoice.OutLocal .InputCodeNeeded .OutputCodeNeeded .PullParameters .PullOutput .}}
{{- $retValue:=call .FuncChoice.RetValue .InputCodeNeeded .OutputCodeNeeded .PullParameters .PullOutput .}}
{{- $methodRet:=call .FuncChoice.MethodRet .InputCodeNeeded .OutputCodeNeeded .PullParameters .PullOutput false . }}
{{- $retError:=call .FuncChoice.RetError .InputCodeNeeded .OutputCodeNeeded .PullParameters .PullOutput . }}
*/}}

func (i *{{$svcCamel}}Client) {{$methCamel}}({{$methParamDecl}}) error {

{{- if $needsFillIn}}
    req:=&{{$inParam}}{}  // build the structure: {{$inParam}}
{{- range .InputFields}}
    req.{{toCamelCase .GetName}}={{.GetWasmFieldName}}
{{- end}}{{/* range input fields */}}
{{- else }} {{/* other side of needs fill in */}}
    {{ $inbound }}
{{- end}}{{/*needs fill*/}}
    
    {{$dispatchResult}}, err:= i.Dispatch("{{.WasmMethodName}}",{{$dispatchParam}})

{{- if .OutputCodeNeeded }}
{{- if $needsFillOut}}
        out:={{$outParam}}
{{- end}} {{/* needs fill out */}}
    err = resp.Result.UnmarshalTo(out)
    if err!=nil {
        return lib.NewPerror("failed to unmarshal result")
    }
{{- if $needsFillOut}} //take apart response structure: {{$outParam}}
{{- range .OutputFields}}
    *{{.Name}}={{.Field}}
{{- end}}{{/* range output fields */}}
{{- else}}{{/* other side of needs fill*/}}
    return nil
{{- end}}{{/*needs fill*/}}

{{- else }} {{/* other side of output code needed */}}
    return err
{{- end }} {{/* output code needed */}}
}
{{- end }} {{/*ranging over methods*/}}
{{- end }} {{/* no kernel option */}}
{{- end}} {{/*ranging over services*/}}


func init() {

{{- range .info.Service }}
{{- if .NoKernelOption }}
    req{{.GetWasmServiceName}}:=&kernel.RegisterRequest{
        ProtoPackage: "{{.ProtoPackage}}",
        Service:      "{{.GetWasmServiceName}}",
    }
    resp{{.GetWasmServiceName}}:=kernel.RegisterResponse{}
    _, regErr:=lib.Register(req{{.GetWasmServiceName}},&resp{{.GetWasmServiceName}})
    if regErr!=nil {
        panic("unable to register service "+"{{.GetWasmServiceName}}:"+ regErr.Error())
    }
{{- end }} {{/* if no kernel */}}
{{- end }}
}
