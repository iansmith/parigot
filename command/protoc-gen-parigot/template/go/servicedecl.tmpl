package {{ LastSegmentOfPackage .file.GetPackage }}
import(
{{- range $j,$i := .imports }}
    {{$j}}
{{- end}} {{/* imports */}}

    // this set of imports is _unrelated_ to the particulars of what the .proto imported... those are above
    "github.com/iansmith/parigot/lib"  // id manipulation
    "github.com/iansmith/parigot/api/proto/g/pb/call" // dispatch and locate
)

{{- $info:=.info }}
{{- range .info.Service }}
{{- if .NoKernelOption}}
{{- $svc:=.GetWasmServiceName }}
{{- $svcCamel:=toCamelCase .GetWasmServiceName }}
//
// {{$svcCamel}}
//
type {{$svcCamel}} interface {
{{- range .GetWasmMethod}}
{{- $methCamel:=toCamelCase .WasmMethodName}}
{{- $inParam:=call .FuncChoice.InputParam .InputCodeNeeded .OutputCodeNeeded .PullParameters .PullOutput .}}
{{- $outParam:=call .FuncChoice.OutputParam .InputCodeNeeded .OutputCodeNeeded .PullParameters .PullOutput .}}
{{- if .InputCodeNeeded }}
    {{$methCamel}}(in {{$inParam}}) 
{{- else }} 
    {{$methCamel}}() 
{{- end -}} 
{{- if .OutputCodeNeeded -}}
    ({{$outParam}}, error)
{{- else -}}
    error
{{- end -}} {{/* end of output code needed for declaration */}}
{{- end }} {{/* end of range over methods */}}
}
{{- end }}{{/* closes no kernel option */}}
{{- end}} {{/* closes top service, the interface stuff*/}}

{{- range .info.Service }}
{{- if .NoKernelOption}}
{{ $svc:=.GetWasmServiceName }}
{{ $svcCamel:=.GetWasmServiceName }}

type {{$svcCamel}}Client struct {
    *lib.ClientSideService
}

func Locate{{$svc}}() (*{{$svcCamel}}Client,error) {
	var resp *call.LocateResponse
	req := &call.LocateRequest{
        PackageName:"{{.ProtoPackage}}",
        ServiceName: "{{$svc}}",
	}
    resp, err:=lib.CallConnection().Locate(req)
    if err!=nil {
        return nil, err
    }
    service:=lib.UnmarshalServiceId(resp.GetServiceId())
    cs := lib.NewClientSideService(service, "{{$svc}}Client")
    return &{{$svc}}Client{
        ClientSideService: cs,
    }, nil
}

{{- range .GetWasmMethod}}

{{- $meth:=.WasmMethodName}}
{{- $methCamel:=toCamelCase .WasmMethodName}}
{{- $inbound:=call .FuncChoice.Inbound .InputCodeNeeded .OutputCodeNeeded .PullParameters .PullOutput . }}
{{- $inParam:=call .FuncChoice.InputParam .InputCodeNeeded .OutputCodeNeeded .PullParameters .PullOutput .}}
{{- $outParam:=call .FuncChoice.OutputParam .InputCodeNeeded .OutputCodeNeeded .PullParameters .PullOutput .}}
{{- $outParamDecl:=call .FuncChoice.OutParamDecl .InputCodeNeeded .OutputCodeNeeded .PullParameters .PullOutput .}}
{{- $dispatchResult:=call .FuncChoice.DispatchResult .InputCodeNeeded .OutputCodeNeeded .PullParameters .PullOutput .}}

{{/*
{{- $methParamDecl:=call .FuncChoice.MethodParamDecl .InputCodeNeeded .OutputCodeNeeded .PullParameters .PullOutput .}}
{{- $bits:=call .FuncChoice.Bits .InputCodeNeeded .OutputCodeNeeded .PullParameters .PullOutput }}
{{- $inbound:=call .FuncChoice.Inbound .InputCodeNeeded .OutputCodeNeeded .PullParameters .PullOutput . }}
{{- $outbound:=call .FuncChoice.Outbound .InputCodeNeeded .OutputCodeNeeded .PullParameters .PullOutput . }}
{{- $dispatchParam:=call .FuncChoice.DispatchParam .InputCodeNeeded .OutputCodeNeeded .PullParameters .PullOutput .}}
{{- $needsFillIn:=call .FuncChoice.NeedsFillIn .InputCodeNeeded .OutputCodeNeeded .PullParameters .PullOutput }}
{{- $needsFillOut:=call .FuncChoice.NeedsFillOut .InputCodeNeeded .OutputCodeNeeded .PullParameters .PullOutput }}
{{- $methCall:=call .FuncChoice.MethodCall .InputCodeNeeded .OutputCodeNeeded .PullParameters .PullOutput .}}
{{- $inputToSend:=call .FuncChoice.InputToSend .InputCodeNeeded .OutputCodeNeeded .PullParameters .PullOutput .}}
{{- $outLocal:=call .FuncChoice.OutLocal .InputCodeNeeded .OutputCodeNeeded .PullParameters .PullOutput .}}
{{- $retValue:=call .FuncChoice.RetValue .InputCodeNeeded .OutputCodeNeeded .PullParameters .PullOutput .}}
{{- $methodRet:=call .FuncChoice.MethodRet .InputCodeNeeded .OutputCodeNeeded .PullParameters .PullOutput false . }}
{{- $retError:=call .FuncChoice.RetError .InputCodeNeeded .OutputCodeNeeded .PullParameters .PullOutput . }}
{{- $needsPullApart:=call .FuncChoice.NeedsPullApart .InputCodeNeeded .OutputCodeNeeded .PullParameters .PullOutput }}
*/}}

{{- if .InputCodeNeeded -}}
func (i *{{$svcCamel}}Client) {{$methCamel}}(in {{$inParam}}) 
{{- else -}}
func (i *{{$svcCamel}}Client) {{$methCamel}}() 
{{- end -}}
{{- if .OutputCodeNeeded -}}
    ({{$outParam}}, error) {
{{- else -}}
    error {
{{- end -}} {{/* end of output code needed for declaration */}}

{{- if .OutputCodeNeeded }}
    out:=&{{$outParamDecl}}
    {{$dispatchResult}}, err:= i.Dispatch("{{.WasmMethodName}}",{{$inbound}})
{{- else }} {{/* other side of output code needed */}}
    _, err:= i.Dispatch("{{.WasmMethodName}}",{{$inbound}})
{{ end }} {{/* end of output code needed for dispatch call */}}

    if err!=nil {
{{- if .OutputCodeNeeded }}
        return nil, err
    }
{{- else }}
        return err
    }
{{ end }} {{/* end of output code needed for return */}}

{{- if .OutputCodeNeeded }}
    err = resp.Result.UnmarshalTo(out)
    if err!=nil {
        return nil,lib.NewPerrorFromError("failed to unmarshal result:",err)
    }
    return out,nil
{{- else }} {{/* other side of output code needed */}}
    return nil
{{- end }} {{/* output code needed */}}
}
{{- end }} {{/*ranging over methods*/}}
{{- end }} {{/* no kernel option */}}
{{- end}} {{/*ranging over services*/}}

