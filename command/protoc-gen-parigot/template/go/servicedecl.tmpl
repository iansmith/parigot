// Code generated by protoc-gen-parigot. DO NOT EDIT.
// source: {{.file}}

package {{ .package }}
{{ $file:=.file}}
import(
    "fmt"
{{- range $j,$i := .import }}
    {{$j}}
{{- end}} {{/* imports */}}
{{- $info:=.info }}

    // this set of imports is _unrelated_ to the particulars of what the .proto imported... those are above
    lib "github.com/iansmith/parigot/lib/go"  // id manipulation
    "github.com/iansmith/parigot/g/msg/syscall/v1"  //syscallmsg
    "github.com/iansmith/parigot/apiimpl/syscall"  // to get a callImpl

{{/* this special case for log.Log kinda stinks */}}
{{- $needLog:=true}}
{{- range .service }}
    {{- if eq "LogService" .GetWasmServiceName }}
        // found the log service 
        {{- $needLog = false }}
    {{- end }}
{{- end}}
)   

{{- range .service }}
{{- if .NoKernelOption}}
{{- $svc:=.GetWasmServiceName }}
{{- $svcCamel:=toCamelCase .GetWasmServiceName }}
//
// {{$svcCamel}} from {{$file}}
//
type {{$svcCamel}} interface {
{{- range .GetWasmMethod}}

{{- $genTest:=call .FuncChoice.GenMethodPossibleTest . }}
{{- if eq false $genTest }}
    // skipping {{.}}, not in test mode
    {{- continue}}
{{- end}}

{{- $methCamel:=toCamelCase .WasmMethodName}}
{{- $inParam:=call .FuncChoice.InputParam .InputCodeNeeded .OutputCodeNeeded false false .}}
{{- $outParam:=call .FuncChoice.OutputParam .InputCodeNeeded .OutputCodeNeeded .PullParameters .PullOutput .}}
{{- if .InputCodeNeeded }}
    {{$methCamel}}(in {{$inParam}}) 
{{- else }} 
    {{$methCamel}}() 
{{- end -}} 
{{- if .OutputCodeNeeded -}}
    ({{$outParam}}, error) // xxxx
{{- else -}}
    error
{{- end -}} {{/* end of output code needed for declaration */}}
{{- end }} {{/* end of range over methods */}}
}
{{- end }}{{/* closes no kernel option */}}
{{- end}} {{/* closes top service, the interface stuff*/}}

{{- range .service }}
{{- if .NoKernelOption}}
{{ $svc:=.GetWasmServiceName }}
{{ $svcCamel:=.GetWasmServiceName }}

type {{$svcCamel}}Client struct {
    *lib.ClientSideService
    lib.Call
}

// Locate finds a reference to the client interface of {{$svc}}.  The logger parameter can be 
// nil which implies that client code cannot call the Log() interface of ClientSideService.
{{- if $needLog }}
func Locate{{$svc}}(logger lib.Log) (*{{$svcCamel}}Client,error) {
{{- else }}
func Locate{{$svc}}() (*{{$svcCamel}}Client,error) {
{{- end}} {{/*end of if $needLog*/}}
	var resp *syscallmsg.LocateResponse
	req := &syscallmsg.LocateRequest{
        PackageName:"{{.ProtoPackage}}",
        ServiceName: "{{$svc}}",
	}
    callImpl:=syscall.NewCallImpl()
    resp, err:=callImpl.Locate(req)
    if err!=nil {
        return nil, err
    }
    if resp.GetServiceId()==nil {
        panic("service id is nil, can't create ClientSideService")
    }
    service:=lib.Unmarshal(resp.GetServiceId())
{{- if $needLog }}
    cs := lib.NewClientSideService(service, "{{$svc}}Client",logger,callImpl)
{{- else }}
    cs := lib.NewClientSideService(service, "{{$svc}}Client",nil,callImpl)
{{- end}} {{/*end of if $needLog*/}}
    
    return &{{$svc}}Client{
        ClientSideService: cs,
        Call: callImpl,
    }, nil
}

{{range .GetWasmMethod}}

{{- $meth:=.WasmMethodName}}
{{- $methCamel:=toCamelCase .WasmMethodName}}
{{- $inbound:=call .FuncChoice.Inbound .InputCodeNeeded .OutputCodeNeeded .PullParameters .PullOutput . }}
{{- $inParam:=call .FuncChoice.InputParam .InputCodeNeeded .OutputCodeNeeded false false .}}
{{- $outParam:=call .FuncChoice.OutputParam .InputCodeNeeded .OutputCodeNeeded .PullParameters .PullOutput .}}
{{- $outParamDecl:=call .FuncChoice.OutParamDecl .InputCodeNeeded .OutputCodeNeeded .PullParameters .PullOutput .}}
{{- $dispatchResult:=call .FuncChoice.DispatchResult .InputCodeNeeded .OutputCodeNeeded .PullParameters .PullOutput .}}

{{- $genTest:=call .FuncChoice.GenMethodPossibleTest . }}
{{- if eq false $genTest }}
    // skipping {{.}}, not in test mode
    {{- continue}}
{{- end}}

{{- if .InputCodeNeeded -}}
func (i *{{$svcCamel}}Client) {{$methCamel}}(in {{$inParam}}) 
{{- else -}}
func (i *{{$svcCamel}}Client) {{$methCamel}}() 
{{- end -}}
{{- if .OutputCodeNeeded -}}
    ({{$outParam}}, error) {
{{- else -}}
    error {
{{- end -}} {{/* end of output code needed for declaration */}}

{{- if .OutputCodeNeeded }}
    out:=&{{$outParamDecl}}
    {{$dispatchResult}}, err:= i.ClientSideService.Dispatch("{{.WasmMethodName}}",{{$inbound}})
{{- else }} {{/* other side of output code needed */}}
    _, err:= i.ClientSideService.Dispatch("{{.WasmMethodName}}",{{$inbound}})
{{ end }} {{/* end of output code needed for dispatch call */}}

    if err!=nil {
{{- if .OutputCodeNeeded }}
        return nil, err
    }
{{- else }}
        return err
    }
{{ end }} {{/* end of output code needed for return */}}

{{- if .OutputCodeNeeded }}
    err = resp.Result.UnmarshalTo(out)
    if err!=nil {
        print(fmt.Sprintf("generated code size of out %T, %v\n",out,out!=nil))
        return nil,lib.NewPerrorFromError("failed to unmarshal result (generated code):",err)
    }
    return out,nil
{{- else }} {{/* other side of output code needed */}}
    return nil
{{- end }} {{/* output code needed */}}
}
{{end}} {{/*ranging over methods*/}}
{{- end }} {{/* no kernel option */}}
{{- end}} {{/*ranging over services*/}}

