//go:build wasip1 

// Code generated by protoc-gen-parigot. DO NOT EDIT.
// source: {{.file}}

package {{ .package }}

{{$file:=.file}}
{{$package:=.package}}

import (
	"context"
    "unsafe"
{{- range $j,$i := .import  }}
	{{- $j -}}
{{- end}} {{/* imports */}}
    // this set of imports is _unrelated_ to the particulars of what the .proto imported... those are above
	syscallguest "github.com/iansmith/parigot/apiwasm/syscall"  
	pcontext "github.com/iansmith/parigot/context"
	lib "github.com/iansmith/parigot/lib/go"
	"github.com/iansmith/parigot/g/syscall/v1"
	"github.com/iansmith/parigot/apishared/id"
	"github.com/iansmith/parigot/lib/go/future"

	"google.golang.org/protobuf/types/known/anypb"
)
var _ =  unsafe.Sizeof([]byte{})
{{- $needServiceDifferentiation:=true }}
{{- $svcLen := len .service }}
{{- if eq $svcLen 1 }}
{{- $needServiceDifferentiation = false}}
{{- end}}
{{- $info:=.info }}
{{- range .service }}
{{- $svc:=.GetWasmServiceName }}
{{- $svcCamel:=toCamelCase .GetWasmServiceName }}
{{- $svcDiff:=""}}
{{- $errId:=.GetWasmServiceErrId }}
{{- if $needServiceDifferentiation}}
{{- $svcDiff = $svcCamel }}
{{- end}}

type Server{{$svcDiff}} interface {
{{- range .GetWasmMethod }}
{{- $methCamel:=toCamelCase .WasmMethodName}}
{{- $iParam:=.InputParam.CGType.String $package}}
{{- $oParam:=.OutputParam.CGType.String $package}}
{{- if .InputCodeNeeded }}
	{{$methCamel}}(ctx context.Context,in *{{$iParam}}) 
{{- else }}
	{{$methCamel}}(ctx context.Context) 
{{- end }} 
{{- if .OutputCodeNeeded -}}
    (*{{$oParam}}, {{$errId}})
{{- else -}}
    {{$errId}}
{{- end}} {{/* end of output code needed */}}
{{- end}} {{/* end of range over methods */}}
	Ready(ctx context.Context, sid id.ServiceId) *future.Base[bool]
}
{{- end}} {{/* end of range over services */}}

{{- range .service }}
{{- $svc:=.GetWasmServiceName }}
{{- $errId:=.GetWasmServiceErrId }}
{{- $svcCamel:=toCamelCase .GetWasmServiceName }}
{{- $svcCamelFL:=toCamelCaseFirstLower .GetWasmServiceName }}
{{- $svcLowerNoService:=toLowerNoService .GetWasmServiceName }}
{{- $svcDiff:=""}}
{{- $svcDiffFL:=""}}
{{if $needServiceDifferentiation}}
{{- $svcDiff = $svcCamel }}
{{- $svcDiffFL = $svcCamelFL }}
{{end}}



func Launch{{$svcDiff}}(ctx context.Context, sid id.ServiceId, impl Server{{$svcDiff}}) *future.Base[bool] {

	defer func() {
		pcontext.Dump(ctx)
	}()

	readyResult:=future.NewBase[bool]()

	ready:=impl.Ready(ctx,sid)
	ready.Handle(func (b bool) {
		if b {
			readyResult.Set(true)			
			return
		}
		pcontext.Errorf(ctx,"Unable to start {{.ProtoPackage}}.{{$svcCamel}}, Ready returned false")
		pcontext.Dump(ctx)
		readyResult.Set(false)
	})

	return readyResult
}

func Init{{$svcDiff}}(ctx context.Context,require []lib.MustRequireFunc, impl Server{{$svcDiff}}) *lib.ServiceMethodMap{
	defer func() {
		if r := recover(); r != nil {
			pcontext.Infof(ctx, "Init{{$svcCamel}}: trapped a panic in the guest side: %v", r)
		}
		pcontext.Dump(ctx)
	}()

	myId := MustRegister{{$svcDiff}}(ctx)
	MustExport{{$svcDiff}}(ctx)
	if len(require)>0 {
		for _, f := range require {
			f(ctx, myId)
		}
	}
	smmap:=MustWaitSatisfied{{$svcDiff}}(ctx, myId, impl)
	launchF:=Launch{{$svcDiff}}(ctx, myId, impl)

	launchF.Handle(func (ready bool) {
		if !ready {
			pcontext.Errorf(ctx, "ready call on {{$svcCamel}} failed")
			syscallguest.Exit(1)
		}
	})
	return smmap
}
func Run{{$svcDiff}}(ctx context.Context,
	binding *lib.ServiceMethodMap, timeoutInMillis int32, bg lib.Backgrounder) syscall.KernelErr{
	defer func() {
		if r := recover(); r != nil {
			pcontext.Infof(ctx, "Run{{$svcDiff}}: trapped a panic in the guest side: %v", r)
		}
		pcontext.Dump(ctx)
	}()
	var kerr syscall.KernelErr
	for {
		kctx:=pcontext.CallTo(ctx,"ReadOneAndCall{{$svcDiff}}")
		kerr = ReadOneAndCall{{$svcDiff}}(ctx, binding, timeoutInMillis)
		pcontext.Dump(kctx)
		if kerr == syscall.KernelErr_ReadOneTimeout {
			if bg==nil {
				continue
			}
			pcontext.Infof(ctx,"calling backgrounder of {{$svcCamel}}")
			bgctx:=pcontext.CallTo(ctx,"Background")
			bg.Background(bgctx)
			pcontext.Dump(bgctx)
			continue
		}
		if kerr == syscall.KernelErr_NoError {
			continue
		}
		break
	}
	pcontext.Errorf(ctx, "error while waiting for {{$svcDiff}} service calls: %s", syscall.KernelErr_name[int32(kerr)])
	return kerr
}

var TimeoutInMillis{{$svcDiff}} = int32(500)

func ReadOneAndCall{{$svcDiff}}(ctx context.Context, binding *lib.ServiceMethodMap, 
	timeoutInMillis int32)  syscall.KernelErr {
	req:=syscall.ReadOneRequest{}

	for _, c := range binding.Call() {
		req.Call=append(req.Call, c)
	}
	req.TimeoutInMillis = timeoutInMillis
	req.HostId = lib.CurrentHostId().Marshal()
	resp, err:=syscallguest.ReadOne(&req)
	if err!=syscall.KernelErr_NoError {
		return err
	}
	// is timeout?
	if resp.Timeout {
		return syscall.KernelErr_ReadOneTimeout
	}

	// is a promise being completed?
	if r:=resp.GetResolved(); r!=nil {
		cid:=id.UnmarshalCallId(r.GetCallId())
		return lib.CompleteCall(cid,r.GetResult(), r.GetResultError())
	}

	rvReq:=&syscall.ReturnValueRequest{
		//CallId: req.GetCallId(),
		HostId: lib.CurrentHostId().Marshal(),
	}

	sid:=id.UnmarshalServiceId(resp.GetCall().GetServiceId())
	mid:=id.UnmarshalMethodId(resp.GetCall().GetMethodId())

	fn:=binding.Func(sid,mid)
	funcAny, retErr:=fn(resp.Param)
	rvReq.Result = funcAny
	rvReq.ResultError = retErr
	return syscallguest.ReturnValue(rvReq)
}

func {{$svcDiffFL}}bind(ctx context.Context,sid id.ServiceId, impl Server{{$svcDiff}}) (*lib.ServiceMethodMap, syscall.KernelErr) {
	var bindReq *syscall.BindMethodRequest
	var mid id.MethodId
	var fn lib.FuncAnyIO
	smmap:=lib.NewServiceMethodMap()

{{- $goname:=packageToGoName .GetParent.Package}}
{{- range .GetWasmMethod}}
{{- $iParam:=.InputParam.CGType.StringNotInProto}}
{{- $oParam:=.OutputParam.CGType.StringNotInProto}}

{{- $methCamel:=toCamelCase .WasmMethodName}}
{{- $methCamelFL:=toCamelCaseFirstLower .WasmMethodName}}
{{- $dir :=call .FuncChoice.BindDirection .InputCodeNeeded .OutputCodeNeeded false false .}}
//
// {{.ProtoPackage}}.{{$svcCamel}}.{{$methCamel}}
//

	bindReq = &syscall.BindMethodRequest{}
	bindReq.HostId = lib.CurrentHostId().Marshal()
	bindReq.ServiceId = sid.Marshal()
	bindReq.MethodName = "{{$svcDiff}}{{$methCamel}}"
{{- if eq $dir "Both" }}
	bindReq.Direction = syscall.MethodDirection_METHOD_DIRECTION_BOTH

{{- else }} {{/* else of InOut */}}
{{- if eq $dir "Out" }}
	bindReq.Direction =syscall.MethodDirection_METHOD_DIRECTION_OUT
{{- else }} {{/* else of "Out */}}
	bindReq.Direction =syscall.MethodDirection_METHOD_DIRECTION_IN
{{- end }} {{/* end of Out */}}
{{- end }} {{/* end of Both */}}
	mid=syscallguest.MustBindMethodName(bindReq)

	fn=func(in *anypb.Any)(*anypb.Any,int32){
{{- if eq $dir "Both" }}
		var tmp {{$iParam}}
		err:=in.UnmarshalTo(&tmp)
		if err!=nil {
			pcontext.Errorf(ctx,"unmarshal of anypb.Any failed: %v",err)
			return nil,int32(syscall.KernelErr_UnmarshalFailed)
		}
		out,raw:= impl.{{$methCamel}}(ctx,&tmp)
		a,err :=anypb.New(out)
		if err!=nil {
			pcontext.Errorf(ctx,"unmarshal of anypb.Any failed: %v",err)
			return nil,int32(syscall.KernelErr_MarshalFailed)
		}
		result:=int32(raw)
		return a,result
{{- else }} {{/* else of InOut */}}
{{- if eq $dir "Out" }}
		out,raw:= impl.{{$methCamel}}(ctx)
		a,err :=anypb.New(out)
		if err!=nil {
			pcontext.Errorf(ctx,"unmarshal of anypb.Any failed: %v",err)
			return nil,int32(syscall.KernelErr_MarshalFailed)
		}
		result:=int32(raw)
		return a,result
{{- else }} {{/* else of "Out */}}
		var tmp {{$iParam}}
		err:=in.UnmarshalTo(&tmp)
		if err!=nil {
			pcontext.Errorf(ctx,"unmarshal of anypb.Any failed: %v",err)
			return nil,int32(syscall.KernelErr_UnmarshalFailed)
		}
		raw:= impl.{{$methCamel}}(ctx,&tmp)
		result:=int32(raw)
		return nil,result
{{- end }} {{/* end of Out */}}
{{- end }} {{/* end of Both */}}
	}
	smmap.AddServiceMethod(sid,mid,"{{$svcCamel}}",bindReq.MethodName,fn)

{{- end }} {{/* end of range over methods */}}
	pcontext.Dump(ctx)
	return smmap,syscall.KernelErr_NoError
}

{{- /* range over methods again to do the generated refs */}}
{{- $goname:=packageToGoName .GetParent.Package}}
{{- $pkg:=toSnakeCase $goname}}
{{- $pkgFL:=toSnakeCaseFirstUpper $goname }}
{{- $svc:=toSnakeCase .GetWasmServiceName }}
{{- $svcCamel:=toCamelCase .GetWasmServiceName }}
{{- $errId:=.GetWasmServiceErrId }}

{{- range .GetWasmMethod }}
{{- $methSnake:=toSnakeCase .WasmMethodName}}
{{- $methCamel:=toCamelCase .WasmMethodName}}
{{- $iParam:=.InputParam.CGType.StringNotInProto}}
{{- $oParam:=.OutputParam.CGType.StringNotInProto}}

{{- $hostFuncName:= $methCamel}}
{{- $hostFuncNameSnake:= $methSnake}}
{{- if ne .HostFuncName ""}} 
{{- $hostFuncName = .HostFuncName}}
{{- $hostFuncNameSnake = toSnakeCase .HostFuncName}}
{{- end }} {{/* end of if host func option used */}}

// If you want to implement part of your server in host cost you should call 
// {{$svcDiff}}{{$methCamel}}Host from your server implementation. These will be optimized 
// away by the compiler if you don't use them--in other words, if you want to 
// implement everything on the guest side).
//
//go:wasmimport {{packageToGoName $pkg}} {{$hostFuncNameSnake}}{{$svcDiff}}_
func {{$hostFuncName}}_(int32,int32,int32,int32) int64
func {{$hostFuncName}}{{$svcDiff}}Host(inPtr *{{$iParam}}) (*{{$oParam}}, {{$errId}}) {
	outProtoPtr := (*{{$oParam}})(nil)
	ctx := syscallguest.ManufactureGuestContext("[{{$svcCamel}}]{{$methCamel}}")
	defer pcontext.Dump(ctx)
	ret, raw, signal:= syscallguest.ClientSide(ctx, inPtr, outProtoPtr, {{$methCamel}}_)
	if signal {
		pcontext.Infof(ctx, "{{$hostFuncName}} exiting because of parigot signal")
		pcontext.Dump(ctx)
	}
	return ret, {{$errId}}(raw)
}
{{- end }}  {{/* end range over methods */}}
{{- end }} {{/* range over services */}}
