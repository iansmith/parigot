// DO NOT EDIT.  This file was machine generated by WCL from testdata/doc_test.wcl.
package main

import (
	"bytes"                                              // required by wcl text functions
	dommsg "github.com/iansmith/parigot-ui/g/msg/dom/v1" //required by doc functions
)

func foo() string {
	var buf bytes.Buffer
	buf.WriteString(`Hello, 世界`)
	return buf.String()
}

func liTest(t string) string {
	var buf bytes.Buffer
	buf.WriteString(`test of `)
	buf.WriteString(fmt.Sprint(t))
	return buf.String()
}

func _anon00000000() string {
	var buf bytes.Buffer
	buf.WriteString(`example anonymous function`)
	return buf.String()
}

func _anon00000001() string {
	var buf bytes.Buffer
	buf.WriteString(`literal string here`)
	return buf.String()
}

func _anon00000002() string {
	var buf bytes.Buffer
	buf.WriteString(`some content`)
	return buf.String()
}

func _anon00000003() string {
	var buf bytes.Buffer
	buf.WriteString(`three`)
	return buf.String()
}

func onlyAtom() *dommsg.Element {
	n0 := &dommsg.Element{
		Tag: &dommsg.Tag{
			Name:     "br",
			Id:       "",
			CssClass: []string{},
		},

		Text: _anon00000000(),
	}
	return n0
}

func onlyAtomInList() *dommsg.Element {

	n1 := &dommsg.Element{
		Tag: &dommsg.Tag{
			Name:     "br",
			Id:       "",
			CssClass: []string{},
		},

		Text: "",
	}

	n0 := &dommsg.Element{
		Child: []*dommsg.Element{
			n1,
		}}
	return n0
}

func atomInListWithLiteral() *dommsg.Element {

	n1 := &dommsg.Element{
		Tag: &dommsg.Tag{
			Name: "br",
			Id:   "blah",
			CssClass: []string{
				"blech",
				"foobie",
			},
		},

		Text: _anon00000001(),
	}

	n0 := &dommsg.Element{
		Child: []*dommsg.Element{
			n1,
		}}
	return n0
}

func deeplyNested() *dommsg.Element {

	n6 := &dommsg.Element{
		Tag: &dommsg.Tag{
			Name:     "p",
			Id:       "",
			CssClass: []string{},
		},

		Text: foo(),
	}

	n5 := &dommsg.Element{
		Tag: &dommsg.Tag{
			Name:     "p",
			Id:       "",
			CssClass: []string{},
		},

		Child: []*dommsg.Element{
			n6,
		}}

	n4 := &dommsg.Element{
		Tag: &dommsg.Tag{
			Name:     "p",
			Id:       "",
			CssClass: []string{},
		},

		Child: []*dommsg.Element{
			n5,
		}}

	n3 := &dommsg.Element{
		Tag: &dommsg.Tag{
			Name:     "p",
			Id:       "",
			CssClass: []string{},
		},

		Child: []*dommsg.Element{
			n4,
		}}

	n2 := &dommsg.Element{
		Tag: &dommsg.Tag{
			Name:     "p",
			Id:       "",
			CssClass: []string{},
		},

		Child: []*dommsg.Element{
			n3,
		}}

	n1 := &dommsg.Element{
		Tag: &dommsg.Tag{
			Name:     "p",
			Id:       "",
			CssClass: []string{},
		},

		Child: []*dommsg.Element{
			n2,
		}}

	n0 := &dommsg.Element{
		Child: []*dommsg.Element{
			n1,
		}}
	return n0
}

func silly() *dommsg.Element {

	n7 := &dommsg.Element{
		Tag: &dommsg.Tag{
			Name:     "p",
			Id:       "",
			CssClass: []string{},
		},

		Text: _anon00000002(),
	}

	n6 := &dommsg.Element{
		Child: []*dommsg.Element{
			n7,
		}}

	n5 := &dommsg.Element{
		Child: []*dommsg.Element{
			n6,
		}}

	n4 := &dommsg.Element{
		Child: []*dommsg.Element{
			n5,
		}}

	n3 := &dommsg.Element{
		Child: []*dommsg.Element{
			n4,
		}}

	n2 := &dommsg.Element{
		Child: []*dommsg.Element{
			n3,
		}}

	n1 := &dommsg.Element{
		Child: []*dommsg.Element{
			n2,
		}}

	n0 := &dommsg.Element{
		Child: []*dommsg.Element{
			n1,
		}}
	return n0
}

func exampleList() *dommsg.Element {

	n2 := &dommsg.Element{
		Tag: &dommsg.Tag{
			Name:     "li",
			Id:       "a",
			CssClass: []string{},
		},

		Text: liTest(),
	}

	n3 := &dommsg.Element{
		Tag: &dommsg.Tag{
			Name:     "li",
			Id:       "b",
			CssClass: []string{},
		},

		Text: liTest(),
	}

	n4 := &dommsg.Element{
		Tag: &dommsg.Tag{
			Name:     "li",
			Id:       "c",
			CssClass: []string{},
		},

		Text: _anon00000003(),
	}

	n1 := &dommsg.Element{
		Tag: &dommsg.Tag{
			Name:     "ul",
			Id:       "d",
			CssClass: []string{},
		},

		Child: []*dommsg.Element{
			n2,
			n3,
			n4,
		}}

	n0 := &dommsg.Element{
		Child: []*dommsg.Element{
			n1,
		}}
	return n0
}
