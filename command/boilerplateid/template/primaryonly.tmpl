package {{.pkg}}

//
// DO NOT EDIT.  This file was machine genarted by boilerplateid for {{.primaryName}}Id
//

import (
{{if .idNoImport }}
{{else}}	
    "github.com/iansmith/parigot/apishared/id"
{{end}}
	protosupport "github.com/iansmith/parigot/g/protosupport/v1"
)
//
//  Begin Boilerplate for {{.primaryName}}
//

type {{.primaryName}}Code {{.idPkg}}IdRootErrorCode
const {{.primaryName}}NoError {{.primaryName}}Code = 0
type Def{{.primaryName}} struct{}

func (f Def{{.primaryName}}) ShortString() string { return "{{.primaryShortName}}" }
func (f Def{{.primaryName}}) Letter() byte        { return {{.primaryLetter}} } 
func (f Def{{.primaryName}}) IsError() bool       { return true }

type {{.primaryName}}Id {{.idPkg}}IdRoot[Def{{.primaryName}}]


func New{{.primaryName}}IdFromRaw(in {{.idPkg}}IdRaw) {{.primaryName}}Id {
	return {{.primaryName}}Id({{.idPkg}}NewIdRootFromRaw[Def{{.primaryName}}](in))
}

func (f {{.primaryName}}Id) Marshal() *protosupport.IdRaw {
	return {{.idPkg}}MarshalProtobuf({{.primaryCast}})
}
func ZeroValue{{.primaryName}}Id() {{.primaryName}}Id {
	return {{.primaryName}}Id({{.idPkg}}ZeroValue[Def{{.primaryName}}]())
}
func (f {{.primaryName}}Id) Raw() {{.idPkg}}IdRaw {
	return {{.primaryCast}}.Raw()
}
func (f {{.primaryName}}Id) Equal(other {{.primaryName}}Id) bool{
	return {{.primaryCast}}.Equal({{.idPkg}}IdRoot[Def{{.primaryName}}](other))
}
func (f {{.primaryName}}Id) String() string{
	return {{.primaryCast}}.String()
}
func (f {{.primaryName}}Id) Short() string{
	return {{.primaryCast}}.Short()
}
func (f {{.primaryName}}Id) IsError() bool{
	return {{.primaryCast}}.IsError()
}
func (f {{.primaryName}}Id) IsZeroValue() bool{
	return {{.primaryCast}}.IsZeroValue()
}
func (f {{.primaryName}}Id) IsEmptyValue() bool{
	return {{.primaryCast}}.IsEmptyValue()
}

func (f {{.primaryName}}Id) High() uint64{
	return {{.primaryCast}}.High()
}
func (f {{.primaryName}}Id) Low() uint64{
	return {{.primaryCast}}.Low()
}

func Unmarshal{{.primaryName}}Id(b *protosupport.IdRaw) ({{.primaryName}}Id, {{.idPkg}}IdErr) {
	fid, err := {{.idPkg}}UnmarshalProtobuf[Def{{.primaryName}}](b)
	if err.IsError() {
		return ZeroValue{{.primaryName}}Id(), err
	}
	return {{.primaryName}}Id(fid), {{.idPkg}}NoIdErr
}

func MustUnmarshal{{.primaryName}}Id(b *protosupport.IdRaw) {{.primaryName}}Id{
	result, err:=Unmarshal{{.primaryName}}Id(b)
	if err.IsError() {
		panic("unable to unmarshal {{.primaryName}}Id from raw value: "+err.String())
	}
	return result
}

func New{{.primaryName}}IdFromProto(in *protosupport.IdRaw) {{.primaryName}}Id {
	raw:=MustUnmarshal{{.primaryName}}Id(in)
	return {{.primaryName}}Id(raw)
}

func New{{.primaryName}}Id() {{.primaryName}}Id {
	idroot := {{.idPkg}}NewIdRoot[Def{{.primaryName}}]()
	return {{.primaryName}}Id(idroot)
}


//
// End Boilerplate for {{.primaryName}}
//
