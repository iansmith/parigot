package {{.pkg}}

//
// DO NOT EDIT.  This file was machine genarted by boilerplateid for {{.primaryName}}Id
//

import (
{{if .idNoImport }}
{{else}}	
    "github.com/iansmith/parigot/api/shared/id"
{{end}}
	protosupport "github.com/iansmith/parigot/g/protosupport/v1"
)
//
//  Begin Boilerplate for {{.primaryName}}
//

type Def{{.primaryName}} struct{}

func (f Def{{.primaryName}}) ShortString() string { return "{{.primaryShortName}}" }
func (f Def{{.primaryName}}) Letter() byte        { return {{.primaryLetter}} } 

type {{.primaryName}}Id {{.idPkg}}IdRoot[Def{{.primaryName}}]


func New{{.primaryName}}Id() {{.primaryName}}Id {
	return {{.primaryName}}Id({{.idPkg}}NewIdRoot[Def{{.primaryName}}]())
}

func (f {{.primaryName}}Id) Marshal() *protosupport.IdRaw {
	raw:=&protosupport.IdRaw{}
	raw.High = f.High()
	raw.Low = f.Low()
	return raw
}
func {{.primaryName}}IdZeroValue() {{.primaryName}}Id {
	return {{.primaryName}}Id({{.idPkg}}NewIdTyped[Def{{.primaryName}}](0xffffffffffffff,0xffffffffffffffff))
}
func {{.primaryName}}IdEmptyValue() {{.primaryName}}Id {
	return {{.primaryName}}Id({{.idPkg}}NewIdTyped[Def{{.primaryName}}](0,0))
}

func (f {{.primaryName}}Id) Equal(other {{.primaryName}}Id) bool{
	return {{.primaryCast}}.Equal({{.idPkg}}IdRoot[Def{{.primaryName}}](other))
}
func (f {{.primaryName}}Id) String() string{
	return {{.primaryCast}}.String()
}
func (f {{.primaryName}}Id) Short() string{
	return {{.primaryCast}}.Short()
}

func (f {{.primaryName}}Id) IsZeroValue() bool{
	return {{.primaryCast}}.IsZeroValue()
}
func (f {{.primaryName}}Id) IsEmptyValue() bool{
	return {{.primaryCast}}.IsEmptyValue()
}
func (f {{.primaryName}}Id) IsZeroOrEmptyValue() bool{
	return {{.primaryCast}}.IsZeroOrEmptyValue()
}

func (f {{.primaryName}}Id) High() uint64{
	return {{.primaryCast}}.High()
}
func (f {{.primaryName}}Id) Low() uint64{
	return {{.primaryCast}}.Low()
}

func Unmarshal{{.primaryName}}Id(b *protosupport.IdRaw) {{.primaryName}}Id {
	l:=b.GetLow()
	h:=b.GetHigh()
	return {{.primaryName}}Id({{.idPkg}}NewIdTyped[Def{{.primaryName}}](h,l))
}

//
// End Boilerplate for {{.primaryName}}
//
