package {{.pkg}}

//
// DO NOT EDIT.  This file was machine genarted by boilerplateid for {{.errorName}}Id
//

import (
{{if .idNoImport }}
{{else}}	
    "github.com/iansmith/parigot/apishared/id"
{{end}}
	protosupportmsg "github.com/iansmith/parigot/g/msg/protosupport/v1"
    "github.com/tetratelabs/wazero/api"
)
//
//  Begin Boilerplate for {{.errorName}}
//

type {{.errorName}}IdCode uint16
const {{.errorName}}IdNoError {{.errorName}}IdCode = 0
const {{.errorName}}IdLocateError {{.errorName}}IdCode = 1
const {{.errorName}}IdUnmarshalError {{.errorName}}IdCode = 2
const {{.errorName}}IdDispatchError {{.errorName}}IdCode = 3
const {{.errorName}}IdGuestStart {{.errorName}}IdCode = 4
type Def{{.errorName}} struct{}

// Use Def{{.errorName}} if you need to make an IdRoot[T] with T being Def{{.ErrorName}}
func (f Def{{.errorName}}) ShortString() string { return "{{.errorShortName}}" }
func (f Def{{.errorName}}) Letter() byte        { return {{.errorLetter}} } 
func (f Def{{.errorName}}) IsError() bool       { return true }

type {{.errorName}}Id {{.idPkg}}IdRoot[Def{{.errorName}}]

// NoErr is a convenience for referring to an errorId that is
// "everything is ok".
var {{.errorName}}IdNoErr = New{{.errorName}}Id({{.errorName}}IdNoError)

func New{{.errorName}}Id(code {{.errorName}}IdCode) {{.errorName}}Id {
    high2:=uint64(Def{{.errorName}}{}.Letter())
    high2 <<= 8
    high2 |= 0x80
    high:=high2<<48
    low4:=uint16(code)
    low:=uint64(low4)
    root:={{.idPkg}}NewIdRootFromRaw[Def{{.errorName}}]({{.idPkg}}NewRawId(high,low))
    return {{.errorName}}Id(root)
}

func (f {{.errorName}}Id) Marshal() *protosupportmsg.IdRaw {
	return {{.idPkg}}MarshalProtobuf({{.errorCast}})
}
func ZeroValue{{.errorName}}Id() {{.errorName}}Id {
	return {{.errorName}}Id({{.idPkg}}ZeroValue[Def{{.errorName}}]())
}
func (f {{.errorName}}Id) Raw() {{.idPkg}}IdRaw {
	return {{.errorCast}}.Raw()
}
func (f {{.errorName}}Id) Equal(other {{.errorName}}Id) bool{
	return {{.errorCast}}.Equal({{.idPkg}}IdRoot[Def{{.errorName}}](other))
}
func (f {{.errorName}}Id) String() string{
	return {{.errorCast}}.String()
}
func (f {{.errorName}}Id) Short() string{
	return {{.errorCast}}.Short()
}
func (f {{.errorName}}Id) IsZeroValue() bool{
	return {{.errorCast}}.IsZeroValue()
}
func (f {{.errorName}}Id) IsError() bool{
	return {{.errorCast}}.IsError()
}
func New{{.errorName}}IdFromRaw(in {{.idPkg}}IdRaw) {{.errorName}}Id {
	return {{.errorName}}Id({{.idPkg}}NewIdRootFromRaw[Def{{.errorName}}](in)) //xx
}
func (f {{.errorName}}Id) WriteGuestLe(mem api.Memory, offset uint32) bool {
    return {{.errorCast}}.WriteGuestLe(mem,offset)
}
func (f {{.errorName}}Id) MustWriteGuestLe(mem api.Memory, offset uint32) {
    if !{{.errorCast}}.WriteGuestLe(mem,offset){
        panic("cannot write error code to guest memory, giving up")
    }
}
func (f {{.errorName}}Id) ErrorCode() {{.errorName}}IdCode{
	return {{.errorName}}IdCode({{.idPkg}}IdRoot[Def{{.errorName}}](f).ErrorCode())
}


//
// End Boilerplate for {{.errorName}}
//
