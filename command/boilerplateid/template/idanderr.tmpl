package {{.pkg}}

//
// DO NOT EDIT.  This file was machine genarted by boilerplateid for {{.primaryName}}Id and {{.errorName}}Id
//

import (
{{if .idNoImport }}
{{else}}	
    "github.com/iansmith/parigot/apishared/id"
{{end}}
	protosupportmsg "github.com/iansmith/parigot/g/msg/protosupport/v1"
)
//
//  Begin Boilerplate for {{.primaryName}} and {{.errorName}}
//

type {{.errorName}}IdCode uint16
const {{.errorName}}IdNoError {{.errorName}}IdCode = 0
const {{.errorName}}IdLocateError {{.errorName}}IdCode = 1
const {{.errorName}}IdUnmarshalError {{.errorName}}IdCode = 2
const {{.errorName}}IdDispatchError {{.errorName}}IdCode = 3
const {{.errorName}}IdGuestStart {{.errorName}}IdCode = 4
type def{{.primaryName}} struct{}

func (f def{{.primaryName}}) ShortString() string { return "{{.primaryShortName}}" }
func (f def{{.primaryName}}) Letter() byte        { return {{.primaryLetter}} } 
func (f def{{.primaryName}}) IsError() bool       { return false }

type {{.primaryName}}Id id.IdRoot[def{{.primaryName}}]

type def{{.errorName}} struct{}

func (f def{{.errorName}}) ShortString() string { return "{{.errorShortName}}" }
func (f def{{.errorName}}) Letter() byte        { return {{.errorLetter}} } 
func (f def{{.errorName}}) IsError() bool       { return true }

type {{.errorName}}Id id.IdRoot[def{{.errorName}}]

// {{.errorName}}IdNoErr is a convenience for referring to an errorId that is
// "everything is ok".
var {{.errorName}}IdNoErr = New{{.errorName}}Id({{.errorName}}IdNoError)

func New{{.errorName}}Id(code {{.errorName}}IdCode) {{.errorName}}Id {
    high2:=uint64(def{{.errorName}}{}.Letter())
    high2 <<= 8
    high2 |= 0x80
    high:=high2<<48
    low4:=uint16(code)
    low:=uint64(low4)
    root:={{.idPkg}}NewIdRootFromRaw[def{{.errorName}}]({{.idPkg}}NewRawId(high,low))
    return {{.errorName}}Id(root)
}

func New{{.errorName}}IdFromRaw(in {{.idPkg}}IdRaw) {{.errorName}}Id {
	return {{.errorName}}Id({{.idPkg}}NewIdRootFromRaw[def{{.errorName}}](in))
}
func New{{.primaryName}}IdFromRaw(in {{.idPkg}}IdRaw) {{.primaryName}}Id {
	return {{.primaryName}}Id({{.idPkg}}NewIdRootFromRaw[def{{.primaryName}}](in))
}

func (f {{.primaryName}}Id) Marshal() *protosupportmsg.IdRaw {
	return {{.idPkg}}MarshalProtobuf({{.primaryCast}})
}
func (f {{.errorName}}Id) Marshal() *protosupportmsg.IdRaw {
	return {{.idPkg}}MarshalProtobuf({{.errorCast}})
}
func ZeroValue{{.primaryName}}Id() {{.primaryName}}Id {
	return {{.primaryName}}Id({{.idPkg}}ZeroValue[def{{.primaryName}}]())
}
func ZeroValue{{.errorName}}Id() {{.errorName}}Id {
	return {{.errorName}}Id({{.idPkg}}ZeroValue[def{{.errorName}}]())
}
func (f {{.errorName}}Id) Raw() {{.idPkg}}IdRaw {
	return {{.errorCast}}.Raw()
}
func (f {{.primaryName}}Id) Raw() {{.idPkg}}IdRaw {
	return {{.primaryCast}}.Raw()
}
func (f {{.errorName}}Id) Equal(other {{.errorName}}Id) bool{
	return {{.errorCast}}.Equal({{.idPkg}}IdRoot[def{{.errorName}}](other))
}

func (f {{.primaryName}}Id) Equal(other {{.primaryName}}Id) bool{
	return {{.primaryCast}}.Equal({{.idPkg}}IdRoot[def{{.primaryName}}](other))
}

func (f {{.primaryName}}Id) String() string{
	return {{.errorCast}}.String()
}
func (f {{.primaryName}}Id) Short() string{
	return {{.primaryCast}}.Short()
}
func (f {{.errorName}}Id) String() string{
	return {{.primaryCast}}.String()
}
func (f {{.errorName}}Id) Short() string{
	return {{.errorCast}}.Short()
}
func (f {{.primaryName}}Id) IsError() bool{
	return {{.errorCast}}.IsError()
}
func (f {{.errorName}}Id) IsError() bool{
	return {{.primaryCast}}.IsError()
}
func (f {{.errorName}}Id) IsZeroValue() bool{
	return {{.errorCast}}.IsZeroValue()
}
func (f {{.primaryName}}Id) IsZeroValue() bool{
	return {{.primaryCast}}.IsZeroValue()
}

func Unmarshal{{.primaryName}}Id(b *protosupportmsg.IdRaw) ({{.primaryName}}Id, {{.idPkg}}IdErr) {
	fid, err := {{.idPkg}}UnmarshalProtobuf[def{{.primaryName}}](b)
	if err.IsError() {
		return ZeroValue{{.primaryName}}Id(), err
	}
	return {{.primaryName}}Id(fid), {{.idPkg}}NoIdErr
}

func Unmarshal{{.primaryName}}IdErr(b *protosupportmsg.IdRaw) ({{.errorName}}Id, {{.idPkg}}IdErr) {
	fid, err := {{.idPkg}}UnmarshalProtobuf[def{{.errorName}}](b)
	if err != {{.idPkg}}NoIdErr {
		return ZeroValue{{.errorName}}Id(), err
	}
	return {{.errorName}}Id(fid), {{.idPkg}}NoIdErr
}

func New{{.primaryName}}() {{.primaryName}}Id {
	idroot := {{.idPkg}}NewIdRoot[def{{.primaryName}}]()
	return {{.primaryName}}Id(idroot)
}

//
// End Boilerplate for {{.primaryName}} and {{.errorName}}
//
