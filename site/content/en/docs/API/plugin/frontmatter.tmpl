---
title: Plugins (native servers)
description: utilities for building a golang service that uses native code
date: _date_
weight: 1
---
{{% pageinfo %}} 

All of this information applies the current version of parigot, `atlanta-0.3.0`.
Versions up to `some_city-1.0.0` carry no backward compatibility guarantees,
promises or anything else to protect you from change.  One may assume that
there will be significant changes in any and all publicly facing APIs and
internal code as well.  

{{% /pageinfo %}}

{{% pageinfo %}} 

This documentation sections also has documentation for some built-in parigot
services that are implemented via the plugin mechanism.  These are intended
to be used by future implementors as samples.

{{% /pageinfo %}}

Sometimes developers building services cannot implement their service, or the
entirety of their service, in pure guest code (WASM).  Since parigot guests
cannot see the true filesystem and cannot make unexpected network requests, a
common use of these types of services is cases where the service is a "wrapper"
or "bridge" to some existing network service such as Redis, a network
filesystem, or internal legacy system.  In these cases, a plugin must be built
to support the service.

Plugins are loaded into the __host__ to provide the "extra" function calls
not available to normal services.  Plugins need to be compiled using 
-buildmode=shared and the resulting file should be named `foo.so` for a 
linux shared object representing the native code for foo.

Parigot generates "bridge" or "glue" code for every service and every method of
every service to allow a service implementor to use a plugin if desired.  Obviously,
using purely guest code provides far better safety and isolation properties and
it is always preferred to the use of plugins. If a plugin crashes, it is likely
to bring down the host and thus all of the guest programs. 

{{% pageinfo %}} 

Plugin crashes are likely to bring down all guest programs as well as the host.
Plugins should be considered armed and dangerous.

{{% /pageinfo %}}


At the moment, the plugin API can only be used from golang.

The plugin support is not related to the ["normal" API](../guest) that is used for
building a service. parigot's generated code does some work to make the API
at the plugin level be similar to the normal API. In particular, a plugin function
like a normal service function implementation, receives a `FooRequest` for a
function called `Foo` and responds with a `FooResponse`.  However, the plugin
does not return a future, it is expected that the native code can produce its
result in a very short period of time and thus it is ok for the caller of the
plugin-based service to block.  

{{% pageinfo %}} 

Plugins should return from their functions "quickly".  Plugins do not return
futures and the caller of a function implemented in a plugin will block until
the plugin's implementation returns.  Quickly might considered to be a maximum
of 200ms.

{{% /pageinfo %}}




