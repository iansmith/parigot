package lib

import (
	protosupportmsg "github.com/iansmith/parigot/g/msg/protosupport/v1"
	syscallmsg "github.com/iansmith/parigot/g/msg/syscall/v1"

	"google.golang.org/protobuf/proto"
)

// Call is an interface that defines the set of calls that WASM code make into the kernel.  Note that
// look similar to the RPC but the mechanism here is the same as a split service.  These calls are
// always made from WASM code and primarily from code generated by our protoc plugin which wraps these
// nicely for the appropriate language.
//
// Call has an analogue called SysCall that is the means by which the kernel receives these calls.
type Call interface {
	Exit(in *syscallmsg.ExitRequest)
	Locate(in *syscallmsg.LocateRequest) (*syscallmsg.LocateResponse, error)
	Dispatch(in *syscallmsg.DispatchRequest) (*syscallmsg.DispatchResponse, error)
	BindMethodIn(in *syscallmsg.BindMethodRequest, _ func(*protosupportmsg.Pctx, proto.Message) error) (*syscallmsg.BindMethodResponse, error)
	BindMethodOut(in *syscallmsg.BindMethodRequest, _ func(*protosupportmsg.Pctx) (proto.Message, error)) (*syscallmsg.BindMethodResponse, error)
	BindMethodBoth(in *syscallmsg.BindMethodRequest, _ func(*protosupportmsg.Pctx, proto.Message) (proto.Message, error)) (*syscallmsg.BindMethodResponse, error)
	Run(in *syscallmsg.RunRequest) (*syscallmsg.RunResponse, error)
	Export(in *syscallmsg.ExportRequest) (*syscallmsg.ExportResponse, error)
	Require(in *syscallmsg.RequireRequest) (*syscallmsg.RequireResponse, error)
	BlockUntilCall(in *syscallmsg.BlockUntilCallRequest, canTimeout bool) (*syscallmsg.BlockUntilCallResponse, error)
	ReturnValue(in *syscallmsg.ReturnValueRequest) (*syscallmsg.ReturnValueResponse, error)
	Export1(pkg, name string) (*syscallmsg.ExportResponse, error)
	Require1(pkg, name string) (*syscallmsg.RequireResponse, error)
}
