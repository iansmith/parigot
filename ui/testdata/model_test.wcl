@wcl 0.7.0
//
// Test for the basics of models
//
/////////////////// CSS /////////////////
// path is relative to this file
@css 
    +"../../static/css/bootstrap.css"
    +"../../static/css/bootstrap-grid.css"
/////////////////// PREAMBLE /////////////////
@preamble 
<<
    import(
        "bytes"
        "fmt"
        "syscall/js"

	    dommsg "github.com/iansmith/parigot/g/msg/dom/v1"
        dom "github.com/iansmith/parigot/g/dom/v1"
        apidom "github.com/iansmith/parigot/apiimpl/dom"
        protosupportmsg "github.com/iansmith/parigot/g/msg/protosupport/v1"

        "github.com/iansmith/parigot/ui/parser/builtin"
        "github.com/iansmith/parigot/lib/go"
        "github.com/iansmith/parigot/g/msg/queue/v1"

        "google.golang.org/protobuf/types/known/anypb"

    )

// This is necessary so we don't have to refer to builtin.ParigotId which causes
// parsing problems.    
func ParigotId[T lib.AllIdPtr](id T) string {
    return builtin.ParigotId(id)
}
func switchShortAndLong(this js.Value, arg []js.Value) any {
    return nil
}
>>

@extern(ParigotId,switchShortAndLong)

/////////////////// MODELS /////////////////


//----- queue message is the actual thing we are going to utilize -----
@model 
// paths are relative to this file
:QueueModel 
    "../../api/proto/msg/queue/v1/queue.proto","../../api/proto/msg/file/v1/file.proto"

@view
// ---- Tests Needed ---
// xxx add test for :Quemodel with no qualifier
// xxx add test for :QueueModel.foo
// xxx add test for :QueueModel:foo:bar
// xxx add tests for bad mesg from model
// xxx add tests to make sure . works but is not checked
// xxx add test for google types (proto v2)

QueueMsgParent :QueueModel:QueueMsg() 
    <"div" #ParigotId(model:id)>

QueueMsgView :QueueModel:QueueMsg(a int64) 
    <"h4"> <<Message ${model:msg_id:id} from Queue ${$model:id}>>
    ( 
        <"h5"> <<some text before ${model:msg_id:id} and some text after>>
        <"h6">  <<Sent: ${model.sent}>>
        <"h6"> <<Size:${sizeInBytes(model:payload)} bytes>>
    )

QueueMsgViewShort :QueueModel:QueueMsg(a int64) 
 <"h4"> <<${shortModel(model)}>>

// xxx this is really a call to builtin.ParigotId
@controller :QueueModel:QueueMsg
    #ParigotId(model:msg_id) click switchShortAndLong()
    

///////////////// TEXT FUNC GLOBAL /////////////////

@text 
sizeInBytes(p *anypb.Any)
@local(size int)
@pre
<<
    size=len(p.Value)
>>
<<${size} bytes>>

shortModel(model :QueueModel:QueueMsg)
@local(qid string,mid string,size string)
@pre
<<
    qid=lib.Unmarshal(model.Id).Short()
    mid=lib.Unmarshal(model.MsgId).Short()
    size=${sizeInBytes(model.Payload)}
>>
    <<QueueId: ${qid}:Message Id: ${mid}:${size}>>

///////////////// DOC FUNC GLOBAL /////////////////

///////////////// EVENT GLOBAL /////////////////
