@wcl 0.7.0
//
// TestCase for the basics of docs
//
/////////////////// CSS /////////////////
// path is relative to this file
@css 
    +"../../static/css/bootstrap.css"
    +"../../static/css/bootstrap-grid.css"


/////////////////// PREAMBLE /////////////////
@preamble 
<<
>>
///////////////// GLOBAL /////////////////
@global(g string)
///////////////// EXTERNAL /////////////////
@extern(foo)
///////////////// TEXT /////////////////

// checkUTF8
@text
checkUTF8 
@local(cwd string)
<<Hello, 世界>>
@post
<<
    cwd,_=os.Getwd()
    fmt.Printf("working directory is %s",cwd)
>>

// textTest
textTest(t string, a string) 
@local(aString string) 
@pre
<<
    aString=fmt.Sprintf("you have %d lives left",${a})
>>
<< test of the ${t}, and a local: ${aString} with ${g} >>

///////////////// DOC /////////////////
@doc

peers(a int64) 
@local(b int64, c int64)
@pre
<<
    ${b}=${a}\>\>32
    ${c}=${a}&0xffffffff
>>
 <"h1"><<foo>> (
    <"h2"><<bar>>
    <"p"><<${foo()}>>
    )
@post
<<
    ${result}=${result}+fmt.Sprintf("%08x",c)
>>

// onlyAtom
onlyAtom <"p"> <<example "literal" function, this is just shorthand for make an anonymous text func>>
// only in Atom tests that we can nest single elem
onlyAtomInList <"span"> (<"p" #"blah" ."btn-warning" ."display-1">)
tagInListWithVar(in *dommsg.Foo) 
    <in> <<string in double less and double greater here>>
tagInListWithCall
    <"div"> (
        <"p" #"blah" ."mark" ."small"> 
        <<${textTest("the emergency broadcast system","9")}>>
    )

// does NOT produce a link (anchor)!
justVar(a *dommsg.Element)
    <a>

deeplyNested <p>(<p>(<p>(<p>(<p>(<p> <<${foo()}>> ) ) ) ) ) 
exampleList(param []string) 
@local(x string, y int)
    <"ul" #"d"> 
        (<"li" #"a"><<${liTest("foo")}>>
            <"li" #"b"><<${liTest(param)}>>
            <"li" #"c"><<${liTest(x)}>>
        )
    
@post
<<
    ${result}=${result}+"0000001"
>>
