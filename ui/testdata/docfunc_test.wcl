@wcl 0.7.0
//
// TestCase for the basics of docs
//
/////////////////// CSS /////////////////
// path is relative to this file
@css 
    +"../static/css/bootstrap.css"
    +"../static/css/bootstrap-grid.css"


/////////////////// PREAMBLE /////////////////
@preamble {
}
///////////////// GLOBAL /////////////////
@global(g string)
///////////////// TEXT /////////////////

// checkUTF8
@text
checkUTF8 
@local(cwd string)
`Hello, 世界`
@post{
    cwd,_=os.Getwd()
    fmt.Printf("working directory is %s",cwd)
}

// textTest
textTest(t string, a string) 
@local(aString string) 
@pre{
    aString=fmt.Sprintf("you have %d lives left",${a})
}
` test of the ${t}, and a local: ${aString} with ${g} `

///////////////// DOC /////////////////
@doc

// peers forms three elements that end up as peers in the tree
// tests the @pre and @post
peers(a int64) 
@local(b int64, c int64)
@pre{
    ${b}=${a}>>32
    ${c}=${a}&0xffffffff
}
 (<h1>`foo`
    <h2>`bar`
    <p>foo()
)
@post{
    ${result}=${result}+fmt.Sprintf("%08x",c)
}

// onlyAtom
onlyAtom <br> `example "literal" function, this is just shorthand for make an anonymous text func`
// only in Atom tests that we can handle the _lack_ of a tag that "owns" the list
onlyAtomInList (<br #blah .blech .foobie>)
tagInListWithVar(in *dommsg.Tag) 
    (<${in}> `backtick string here`)
tagInListWithCall
    (<br #blah .fleazil .frik .frak .quux> 
        textTest("the emergency broadcast system","9"))
justVar(a *dommsg.Element)
    (${a})

deeplyNested (<p>(<p>(<p>(<p>(<p>(<p> foo() ) ) ) ) ) )
silly (((((((<p>{{some content}})))))))
exampleList(param []string) 
@local(x string, y int)
    (<ul #d> 
        (<li #a>liTest("foo") 
            <li #b>liTest(param)
            <li #c>liTest(x)
        )
    )
@post{
    ${result}=${result}+"0000001"
}
