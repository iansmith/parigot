{{/* ----------------------------------------------------- */}}
{{- define "TextConstant" -}}
{{- .Value -}}
{{- end -}}{{/* template TextConstant */}}
{{/* ----------------------------------------------------- */}}
{{- define "TextValueRef" -}}
{{ if eq "result" .Ref.Lit -}}
result
{{- else -}}
fmt.Sprint({{- template "ValueRef" .Ref -}})
{{- end -}}{{/* end of test for magic result */}}
{{- end -}} {{/* template TextVar */}}
{{/* ----------------------------------------------------- */}}
{{- define "TextInvoc" -}}
{{ .String -}}
{{- end -}} {{/* template TextInvoc */}}

{{/* ----------------------------------------------------- */}}
{{- define "TextInline" -}}
{{- range . -}}
{{- $subtemplate := .SubTemplate -}}

{{- if eq $subtemplate "TextConstant" -}}
{{- template "TextConstant" . -}}
{{- end -}}{{/*TextConstant*/}}

{{- if eq $subtemplate "TextValueRef" }}
{{ template "TextValueRef" . }}
{{- end -}} {{/*TextValueRef*/}}

{{- if eq $subtemplate "TextInline" }}
// Inline Code Sections Do Not Nest
{{- end -}} {{/*TextInline*/}}

{{- if eq $subtemplate "TextInvoc" }}
{{template "TextInvoc" .}}
{{- end -}} {{/*TextInvoc*/}}

{{- end -}} {{/* end of ranging over text objects */}}
{{- end -}} {{/* template TextInline*/}}

{{/* ----------------------------------------------------- */}}
{{- define "ParamFormal" -}}
{{- if . }}
{{- range . }}
{{- .Name }} {{ .Type -}},
{{- end }} {{/* end of ranging over param list */}}
{{- end }} {{/*end of if */}}
{{- end }} {{/* end of template ParamFormal */}}

{{/* ----------------------------------------------------- */}}
{{- define "DeclareLocal" -}}
{{- if . }}
{{- range . }}
var {{ .Name }} {{ .Type -}}
{{- end }} {{/* end of ranging over param list */}}
{{- end }} {{/*end of if */}}
{{- end }} {{/* end of template ParamFormal */}}

{{/* ------------------------------------------------------- */}}
{{- define "ValueRef" -}}
{{- if . -}}
{{- if .Id }}
{{- .Id.String -}}
{{- end -}} {{/* end of Id field */}}
{{- if .FuncInvoc -}}
{{- template "FuncInvoc" .FuncInvoc -}}
{{- end -}} {{/* end of FuncInvoc field */}}
{{- if .Lit -}}
"{{.Lit}}"
{{- end -}} {{/* end of literal field */}}
{{- end -}} {{/* end of test that this is not null */}}
{{- end -}} {{/* end of ValueRef template */}}

{{/* ----------------------------------------------------- */}}
{{- define "Package" -}}
package {{.package}} 

{{end}} {{/* end of template package */}}
{{/* ----------------------------------------------------- */}}
{{- define "FuncInvoc" -}}
    {{- .Name.String -}}(
    {{- range .Actual -}}
    {{- template "ValueRef" .Ref -}},
    {{- end -}}) {{/*end of ranging over actuals*/}}
{{- end -}}{{/* end of template */}}
{{/* ----------------------------------------------------- */}}
{{define "DocTag"}}
{{- if . -}} 
    {{- if .Tag -}}
    Tag: &dommsg.Tag{
        Name: {{template "ValueRef" .Tag}},
{{- if .Id -}}
        Id: {{ template "ValueRef" .Id}},
{{- end -}} {{/* end of if .Id */}}
{{- if .Class }}
        CssClass: []string{
        {{- range .Class -}}
            {{- template "ValueRef" . -}},
        {{- end -}} }, {{/* end of css classes */}}
        
{{- end -}} {{/* if .Class */}}
}, // end of tag with name,id,class
    {{- else -}} {{/* else of if .Tag */}}
    Tag: &dommsg.Tag{
        Name: {{template "ValueRef" .Id}},
    }
    {{- end -}} {{/* end of if .Tag */}}
{{else}} {{/* else of if . */}}
{{end}} {{/* end of if .*/}}
{{end}} {{/* end of template for tag */}}
{{/* ----------------------------------------------------- */}}
{{define "DocElement"}}
{{- range .Child -}}
{{template "DocElement" .}}
{{- end -}} {{/* iterate over children, recursively downward */}}

{{ if eq 0 .Number -}}result{{- else -}}n{{- .Number -}}{{- end -}}:=
    &dommsg.Element{ {{template "DocTag" .Tag}} // tag part ended
{{ if .TextContent }}
    Text:""
{{- range .TextContent -}}
{{- $tmpl:=.SubTemplate -}}
{{- if eq $tmpl "TextConstant" -}}
    +`{{template "TextConstant" .}}`
{{- end -}} {{/* case of a constant */}}    
{{- if eq $tmpl "TextValueRef" -}}
    +{{template "TextValueRef" .}}
{{- end -}} {{/* case of a variable or func */}}    
{{- end -}},{{/* end of text content */}}
{{- else -}}{{/* else of if textcontent */}}
{{end}}{{/* end of if text content */}}

{{- if .Child}}
        Child: []*dommsg.Element{
{{- range .Child}} 
    {{ if eq 0 .Number -}}result{{- else -}}n{{- .Number -}}{{- end -}}{{/*end of if check for zero */}},
{{- end}} {{/*end of list children*/}}
}, // end of children
}
{{- else }} {{/* else of if .Child */}}
    } // end of doc element (with no Children)
{{- end }} {{/* end of if .Child */}}
{{- end}} {{/*end of template */}}
{{/* ----------------------------------------------------- */}}
{{define "EventFunction"}}
{{- if .Builtin -}}
builtin.
{{- end -}}
{{- .Name.String -}}
{{- end}} {{/*end of template */}}
{{/* ----------------------------------------------------- */}}
{{define "Selector"}}
{{- if .Id -}}
"#"+{{template "ValueRef" .Id}}
{{- else -}}
"."+{{template "ValueRef" .Class}}
{{- end}} {{/*end of if .Id */}}
{{- end}} {{/*end of template */}}

{{/* ----------------------------------------------------- */}}
{{/* PROGRAM GEN */}}
{{/* ----------------------------------------------------- */}}

//
// DO NOT EDIT.  This file was machine generated by WCL from {{.inputFile}}.
//

{{/* PACKAGE PLUS EXTRA IMPORTS */}}
{{ template "Package" .golang}}

{{/* IMPORT/PREAMBLE SECTION */}}

{{- if .import -}}
{{- template "TextInline" .import.TextItem_}}
{{- end -}}{{/* if */}}


{{/* TEXT SECTION */}}
//
// Text Section
//
{{if .text }}
{{range .text.Func}}
func {{.Name -}}({{- template "ParamFormal" .Param -}}) string {
    {{- template "DeclareLocal" .Local}}
    var result bytes.Buffer
{{- template "TextInline" .PreCode }}
{{ range .Item -}}
{{- $subtemplate := .SubTemplate -}}
{{- if eq $subtemplate "TextConstant" -}}
result.WriteString(`{{- template "TextConstant" . -}}`)
{{ end }}{{/*TextConstant*/ -}}
{{- if eq $subtemplate "TextValueRef" -}}
result.WriteString({{ template "TextValueRef" . }})
{{ end }} {{/*TextVar*/}}
{{- if eq $subtemplate "TextInline" -}}
{{ template "TextInline" .TextItem_ }}
{{end }} {{/*TextInline*/}}
{{- if eq $subtemplate "TextInvoc" -}}
result.WriteString({{ template "TextInvoc" . }})
{{end }} {{/*TextInline*/}}
{{- end }} {{/* end ranging item */ -}}
{{- template "TextInline" .PostCode }}
    return result.String()
}
{{end}}{{/*end range over all text objects*/}}

{{end}}{{/*end of if for is .text nil */}}

{{/* DOC SECTION */}}
//
// Doc Section
//
{{if .doc }}
{{range .doc.DocFunc}}
func {{.Name -}}({{- template "ParamFormal" .Param -}}) *dommsg.Element{
{{- template "DeclareLocal" .Local }}
{{- template "TextInline" .PreCode }}
{{if .Elem}}
{{- template "DocElement" .Elem}}
{{end}} {{/* end of making sure we have elements*/}}
{{- template "TextInline" .PostCode }}

return result
}

{{end}} {{/*end of doc funcs*/}}

{{/* EVENT SECTION */}}
//
// Event Section
//
{{if .event}}
func AddGlobalEvent(svc dom.DOMService) {
var tmp js.Value
var fn func(js.Value, []js.Value) any
var vr,selector string
{{- range .event.Spec}}
vr={{template "ValueRef" zerothElem .Function.Actual}}
tmp=js.ValueOf(vr)
selector={{template "Selector" .Selector}}
fn = func(this js.Value, arg []js.Value) any{ 
    return {{template "EventFunction" .Function}}(this,append(arg,tmp,js.ValueOf(selector),js.ValueOf(svc.(*apidom.DOMServer).ServerId())))
}
svc.(*apidom.DOMServer).AddEvent({{template "Selector" .Selector}},"{{.EventName}}",fn)
{{- end}} {{/* end of ranging over event specs */}}
}
{{end}} {{/* end of event section*/}}
{{end}} {{/*end of if on .event */}}
