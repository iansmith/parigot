{{/* ----------------------------------------------------- */}}
{{- define "TextConstant" -}}
{{- .Value -}}
{{- end -}}{{/* template TextConstant */}}

{{/* ----------------------------------------------------- */}}
{{- define "TextVar" -}}
{{ if eq "result" .Name -}}
result
{{- else -}}
fmt.Sprint({{.Name}})
{{- end -}}{{/* end of test for magic result */}}
{{- end -}} {{/* template TextVar */}}

{{/* ----------------------------------------------------- */}}
{{- define "TextInline" -}}
{{- range . -}}
{{- $subtemplate := .SubTemplate -}}

{{- if eq $subtemplate "TextConstant" -}}
{{- template "TextConstant" . -}}
{{- end -}}{{/*TextConstant*/}}

{{- if eq $subtemplate "TextVar" }}
{{ template "TextVar" . }}
{{- end -}} {{/*TextVar*/}}
{{- if eq $subtemplate "TextInline" }}
// Inline Code Sections Do Not Nest
{{- end -}} {{/*TextInline*/}}

{{- end -}} {{/* end of ranging over text objects */}}
{{- end -}} {{/* template TextInline*/}}

{{/* ----------------------------------------------------- */}}
{{- define "ParamFormal" -}}
{{- if . }}
{{- range . }}
{{- .Name }} {{ .Type -}},
{{- end }} {{/* end of ranging over param list */}}
{{- end }} {{/*end of if */}}
{{- end }} {{/* end of template ParamFormal */}}
{{/* ----------------------------------------------------- */}}
{{- define "DeclareLocal" -}}
{{- if . }}
{{- range . }}
var {{ .Name }} {{ .Type -}}
{{- end }} {{/* end of ranging over param list */}}
{{- end }} {{/*end of if */}}
{{- end }} {{/* end of template ParamFormal */}}
{{/* ----------------------------------------------------- */}}
{{- define "Tag" -}}
    {{if .Tag.IsVar}}
        Tag: {{.Tag.Name}},
    {{else}}
    Tag: &dommsg.Tag{
        Name: "{{.Tag.Name}}",
        Id:"{{.Id}}",
        CssClass: []string{
        {{- range .Class}}
        "{{.}}",
        {{- end}}
        },
    },
{{end}}{{/* end possible variable */}}
{{end}}{{/* end of template */}}
{{/* ----------------------------------------------------- */}}
{{- define "Package" -}}
package {{.package}}
{{if .needBytes }}
import (
    "bytes"  // required by wcl text functions
    "fmt" // required by wcl text functions
)
{{end}}
{{if .needElement }}
import (
    dommsg "github.com/iansmith/parigot/g/msg/dom/v1" //required by doc functions
)
{{end}}
{{if .needEvent }}
import (
    apidom  "github.com/iansmith/parigot/apiimpl/dom" //required by event handlers
     "github.com/iansmith/parigot/g/dom/v1" //required by event handlers
    "github.com/iansmith/parigot/ui/parser/builtin" //required by event handlers
)
{{end}}


{{end}}
{{/* ----------------------------------------------------- */}}
{{- define "FuncInvoc" -}}
    {{.Name.Name}}(
    {{- range .Actual -}}
    {{- if .Var -}}
    {{.Var}},
    {{- else -}}
    {{.Literal}},
    {{- end -}}{{/* end of if var*/}}
    {{- end -}}{{/*end of ranging over actuals*/}}
    )
{{- end -}}{{/* end of template */}}
{{/* ----------------------------------------------------- */}}
{{- define "DocElement" -}}
{{- if not .Child}}
    {{- if eq 0 .Number -}}result{{- else -}}n{{- .Number -}}{{- end -}}{{/*end of if check for zero */}}:=
{{- if .Var -}}
    {{- .Var -}}
{{- else }}
        &dommsg.Element{ {{template "Tag" .Tag}} 
{{if .TextContent}}
        Text:{{ template "FuncInvoc" .TextContent}},
{{else}}
        Text:"",
{{end}}{{/* end of text content */}}
    }
{{end}}{{/* end of if .Var */}}
{{- else}}{{/*other side if no child */}}
{{- range .Child}} 
{{ template "DocElement" .}}    
{{- end}} {{/*end of list elements*/}}
    {{ if eq 0 .Number -}}result{{- else -}}n{{- .Number -}}{{- end -}}{{/*end of if check for zero */}}:=&dommsg.Element{
    {{- if .Tag}}
        {{template "Tag" .Tag}}
    {{- end}}
        Child: []*dommsg.Element{
{{- range .Child}} 
        n{{.Number}},        
{{- end}} {{/*end of list elements*/}}
    }}

{{- end}} {{/*end of if*/}}
{{- end}} {{/*end of template */}}
{{/* ----------------------------------------------------- */}}
{{/* PROGRAM GEN */}}
{{/* ----------------------------------------------------- */}}

//
// DO NOT EDIT.  This file was machine generated by WCL from {{.inputFile}}.
//

{{/* PACKAGE PLUS EXTRA IMPORTS */}}
{{ template "Package" .golang}}

{{/* IMPORT/PREAMBLE SECTION */}}

{{- if .import -}}
{{- template "TextInline" .import.TextItem_}}
{{- end -}}{{/* if */}}


{{/* TEXT SECTION */}}
//
// Text Section
//
{{if .text }}
{{range .text.Func}}
func {{.Name -}}({{- template "ParamFormal" .Param -}}) string {
    {{- template "DeclareLocal" .Local}}
    var result bytes.Buffer
    {{- template "TextInline" .PreCode }}

{{ range .Item -}}
{{- $subtemplate := .SubTemplate -}}
{{- if eq $subtemplate "TextConstant" -}}
result.WriteString(`{{- template "TextConstant" . -}}`)
{{ end }}{{/*TextConstant*/ -}}
{{- if eq $subtemplate "TextVar" -}}
result.WriteString({{ template "TextVar" . }})
{{ end }} {{/*TextVar*/}}
{{- if eq $subtemplate "TextInline" -}}
{{ template "TextInline" .TextItem_ }}
{{end }} {{/*TextInline*/}}
{{- end }} {{/* end ranging item */ -}}
{{- template "TextInline" .PostCode }}
    return result.String()
}
{{end}}{{/*end range over all text objects*/}}

{{end}}{{/*end of if for is .text nil */}}

{{/* DOC SECTION */}}
//
// Doc Section
//
{{if .doc }}
{{range .doc.DocFunc}}
func {{.Name -}}({{- template "ParamFormal" .Param -}}) *dommsg.Element{
{{- template "DeclareLocal" .Local }}
{{- template "TextInline" .PreCode }}
{{- template "DocElement" .Elem}}
{{- template "TextInline" .PostCode }}

return result
}

{{end}} {{/*end of doc funcs*/}}

{{if .event}}
//
// Event Section
//
func AddGlobalEvent(dom dom.DOMService) {
{{- range .event.Spec}}
dom.(*apidom.DOMServer).AddEvent({{.Selector.String}},"{{.EventName}}",builtin.{{.Function.Name.Name}})
{{- end}} {{/* end of ranging over event specs */}}
}
{{end}} {{/* end of event section*/}}
{{end}} {{/*end of if */}}
