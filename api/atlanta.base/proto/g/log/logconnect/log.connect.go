// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: log/log.proto

package logconnect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	log "github.com/iansmith/parigot/api/proto/g/pb/log"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// LogName is the fully-qualified name of the Log service.
	LogName = "log.Log"
)

// LogClient is a client for the log.Log service.
type LogClient interface {
	Log(context.Context, *connect_go.Request[log.LogRequest]) (*connect_go.Response[log.LogResult], error)
}

// NewLogClient constructs a client for the log.Log service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewLogClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) LogClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &logClient{
		log: connect_go.NewClient[log.LogRequest, log.LogResult](
			httpClient,
			baseURL+"/log.Log/Log",
			opts...,
		),
	}
}

// logClient implements LogClient.
type logClient struct {
	log *connect_go.Client[log.LogRequest, log.LogResult]
}

// Log calls log.Log.Log.
func (c *logClient) Log(ctx context.Context, req *connect_go.Request[log.LogRequest]) (*connect_go.Response[log.LogResult], error) {
	return c.log.CallUnary(ctx, req)
}

// LogHandler is an implementation of the log.Log service.
type LogHandler interface {
	Log(context.Context, *connect_go.Request[log.LogRequest]) (*connect_go.Response[log.LogResult], error)
}

// NewLogHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewLogHandler(svc LogHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/log.Log/Log", connect_go.NewUnaryHandler(
		"/log.Log/Log",
		svc.Log,
		opts...,
	))
	return "/log.Log/", mux
}

// UnimplementedLogHandler returns CodeUnimplemented from all methods.
type UnimplementedLogHandler struct{}

func (UnimplementedLogHandler) Log(context.Context, *connect_go.Request[log.LogRequest]) (*connect_go.Response[log.LogResult], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("log.Log.Log is not implemented"))
}
