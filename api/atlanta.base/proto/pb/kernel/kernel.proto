syntax = "proto3";
package pb.kernel;
option go_package="github.com/iansmith/parigot/g/pb/kernel;kernel";
import "pb/parigot/parigot.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/any.proto";


message ExitRequest {
  int32 code = 1;
}
message ExitResponse{}


message LocateRequest {
  string package_name = 1;
  string service_name = 2;
}

message LocateResponse {
  parigot.ServiceId service_id =1;
  parigot.KernelErrorId error_id=2;
}

message DispatchRequest {
  parigot.ServiceId service_id = 1;
  string method=2;
  string caller =3;
  parigot.PCtx in_pctx = 4;
  google.protobuf.Any param=5;
}

message DispatchResponse {
  parigot.PCtx out_pctx = 1;
  google.protobuf.Any result = 2;
  parigot.KernelErrorId error_id =3;
}

enum MethodDirection {
  MethodDirectionUnspecified = 0;
  MethodDirectionIn = 1;
  MethodDirectionOut = 2;
  MethodDirectionBoth = 3;
}

message BindMethodRequest  {
  string protoPackage = 1;
  string service = 2;
  string method = 3;
  MethodDirection direction = 4;
}

message BindMethodResponse {
  parigot.MethodId method_id = 1;
  parigot.KernelErrorId error_id = 2;
}

message BlockUntilCallRequest{
  bytes pctx_buffer = 1;
  bytes param_buffer = 2;
}

message BlockUntilCallResponse{
  int32 pctx_len =1 ;
  int32 param_len = 2;
  parigot.MethodId method = 3;
  parigot.CallId call = 4;
  parigot.KernelErrorId error_id= 5;
}

message ReturnValueRequest{
  parigot.CallId call = 1;
  parigot.MethodId method = 2;
  string error_message = 3;
  parigot.KernelErrorId error_id = 4;
  bytes pctx_buffer = 6;
  bytes result_buffer = 7;
}

message ReturnValueResponse {
  parigot.KernelErrorId error_id = 1;
}

message fullyQualifiedService {
  string packagePath = 1;
  string service = 2;
}

message ExportRequest {
  repeated fullyQualifiedService service = 1;
}

message ExportResponse {
  parigot.KernelErrorId error_id = 1;
}

message RequireRequest {
  repeated fullyQualifiedService service = 1;
}

message RequireResponse {
  parigot.KernelErrorId error_id = 1;
}

message RunRequest {
  bool wait = 1;
}

message RunResponse {
  parigot.KernelErrorId error_id = 1;
}
