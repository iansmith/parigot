syntax = "proto3";
package msg.queue.v1;
option go_package="github.com/iansmith/parigot/g/msg/queue/v1;queuemsg";
import "msg/protosupport/v1/protosupport.proto";
import "google/protobuf/any.proto";
import "google/protobuf/timestamp.proto";


// Create creates a queue or returns an error.  Note that this is usually used
// only once to set up the operating environment.
message CreateQueueRequest {
    string queue_name = 1;
}

// CreateQueueResponse returns the queue just created.
// Errors are passed back out of band.
message CreateQueueResponse {
    msg.protosupport.v1.QueueId id = 1;
}

// LocateRequest is request to access a given queue.
message LocateRequest {
    string queue_name = 1;
}

// LocateResponse returns the queue id corresponding to the name
// provided.  It returns errors out of band.
message LocateResponse {
    msg.protosupport.v1.QueueId id = 1;
}

// Delete queue deletes a queue and returns the queue id deleted, or sends
// an error out of band.
message DeleteQueueRequest {
    msg.protosupport.v1.QueueId id = 1;
}

// DeleteQueueResponse returns the (now invalid) queue id of what
// was just deleted.
message DeleteQueueResponse {
    msg.protosupport.v1.QueueId id = 1;
}

// Receive pulls the available messages from the queue and returns
// them.  Note that if multiple copies of the caller exist, the 
// caller must be prepared to receive the same message multiple
// times.
message ReceiveRequest {
    msg.protosupport.v1.QueueId id = 1;
    // it is expected that you can process all received messages inside the time limit
    int32 message_limit = 2; // 1 is usually the right choice here
}

// Receive response hands the caller a list of messages to 
// process. If you need to return an error, do so out of band.
message ReceiveResponse {
    msg.protosupport.v1.QueueId id = 1;
    repeated QueueMsg message = 2;
}

// QueueMsg represents an object returned by a call to Receive.
message QueueMsg {
    msg.protosupport.v1.QueueId id = 1;
    msg.protosupport.v1.QueueMsgId msg_id = 2;
    // ReceiveCount is an approximation of the number of times
    // this messages has been delivered before this delivery.
    int32 receive_count = 3;
    // ReceiveTime is an approximation to the first time the message was received.
    // If the message has never been received before, this will be the zero value.
    google.protobuf.Timestamp  received = 4;
    // sender may be any type (or nil) at the discretion of sender
    google.protobuf.Any sender = 5;
    // when the message was sent
    google.protobuf.Timestamp  sent = 6;
    // payload must be a serialized protobuf object
    google.protobuf.Any payload = 7;
}

// MarkDone request indicates that the caller has finished processing
// each message in msg.
message MarkDoneRequest {
    msg.protosupport.v1.QueueId id = 1;
    repeated msg.protosupport.v1.QueueMsgId msg = 2;
}

// MarkDone returns the list of unmodified (not marked done) messages 
// remaining. In the normal case, this will be empty.  If there was an error
// trying to mark items as done, it returns the error out of band and
// puts the unmarked elements in the list unmodified
message MarkDoneResponse {
    msg.protosupport.v1.QueueId id = 1;
    repeated msg.protosupport.v1.QueueMsgId unmodified = 2;
}

// Length requests and approximation of the number of elements in the queue 
message LengthRequest {
    msg.protosupport.v1.QueueId id = 1;
}

// LengthResponse returns the queue id identifying the queue we 
// computed the length for.
message LengthResponse {
    msg.protosupport.v1.QueueId id = 1;
    int64 length = 2;
}

// Send requests enqueues the queue messages provided.
message SendRequest {
    msg.protosupport.v1.QueueId id = 1;
    repeated QueueMsg msg = 2;
}

// If the queue msg id is an error then we are using the error_detail_msg to
// return the value.  Note that the message id you provide here will
// changed once we send you the success notification using your id.
message SendResponse {
    repeated msg.protosupport.v1.QueueMsgId succeed = 1;
    repeated QueueMsg fail = 2;
}
