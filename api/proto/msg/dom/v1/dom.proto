syntax ="proto3";
package msg.dom.v1;
option go_package="github.com/iansmith/parigot/g/msg/dom/v1;dommsg";
import "msg/protosupport/v1/protosupport.proto";

message Tag {
    string name  = 1;
    string id  =2;
    repeated string css_class =3;
}

// Element is actually the final type that is passed to
// the DOM service. When these are returned the children
// in the child list do NOT have their children filled in.
message Element {
    msg.protosupport.v1.ElementId parigot_id = 1;
    Tag tag = 2;
    // text is the innerText property of an HTMLElement, not the lower level DOM element
    string text = 3;   
    repeated Element child = 4;
}

// ElementById returns the element associated with the id given.  Note
// that a document that has more than one element with the same id is
// invalid. The id given must be a DOM id.
message ElementByIdRequest {
    string id = 1;
}

// ElementById returns the element associated with the id given and this is 
// the return value from that call. 
message ElementByIdResponse {
    Element elem = 1;
}

// ElementByEitherId returns the element associated with either the id or
// parigot id given.  The id (DOM id) is checked first.  If there are
// multiple matching elements (and there should not be) you will receive
// a response that includes only the first match.
message ElementByEitherIdRequest {
    msg.protosupport.v1.ElementId parigot_id = 1;
    string id =2;
}


// ElementByEitherId returns the element associated with the either of the ids given and this is 
// the return value from that call.
message ElementByEitherIdResponse {
    Element elem = 1;
}

// SetChild sets the child of the element named by the id to the children
// provided.  Any children that existed prior to this call are discarded.
// You must supply one of id and parigot_id but not both.
message SetChildRequest {
    string id = 1;
    msg.protosupport.v1.ElementId parigot_id = 2;
    repeated Element child = 3;
}

// SetChildResponse informs the caller of what happened with their set
// SetChild call.  If the id provided in the SetChildRequest does not match
// an element an error is returned, not a SetChildResponse.  The number
// replacements is the number of children the element had _before_ the
// SetChild() updated it.
message SetChildResponse {
    int32 replacements = 1;
}

// CreateElementRequest is the data to create a new element in the dom.
// Do not supply a parigot id here, this is where those are generated.
// The text, id, cssClass, and children are optional.  If you do not
// supply a parent, then these elements will be "created" but they
// will need to be added to a parent later.  
message CreateElementRequest {
    Element root = 1;
    Element parent = 2;
}

// CreateElementResponse will contain the same element (and children)
// as supplied to this function, but the returned copy has the ParigotId
// fields filled in.
message CreateElementResponse {
    Element root = 1;
}

// UpdateCssClass find the element in the DOM based on
// id field in this element or the parigot id in this
// element, if no id is provided.  The CSS classes in the
// DOM will be replaced the values in this element. 
// This update is NOT recursive downward.
message UpdateCssClassRequest {
    Element elem = 1;
}

// There is no return value from UpdateCSSClass because
// any errors would have been signalled at the call site.
message UpdateCssClassResponse {
}