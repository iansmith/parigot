syntax ="proto3";
package file.v1;
option go_package="github.com/iansmith/parigot/g/file/v1;file";
import "protosupport/v1/protosupport.proto";


// This is the File service for parigot.  It is sandboxed such that caller to this service
// has limited access to files. The caller can expect that "/app" is a directory in which new
// files can be created and existing files can be found.  
// 
// Paths must be UTF-8 encoded with no control characters, without leading -, without . or ..
// elements, and without carriage returns or newlines.
//
// This api provides no synchronous interface to reading or writing file content.  The caller will
// be handed an Id upon successfully starting a read or write.  That Id can be used later to 
// query the status of the read or write and it is expected that this will be driven by the *end user*,
// such as a user on the internet with a web browser.


service File {
  rpc Open(OpenRequest) returns (OpenResponse);

  // Create creates or truncates the named file in the path. If the file already exists, 
  // it is truncated. If the file does not exist, it is created.
  rpc Create(CreateRequest) returns (CreateResponse);

  rpc Close(CloseRequest) returns (CloseResponse);

  // Load does NOT check that the file(s) referred to are reasonable in length, do not contain
  // symlinks, are readable, etc.  Don't allow this call in prod.
  rpc LoadTestData(LoadTestDataRequest) returns (LoadTestDataResponse);
}


message CreateRequest {
  string path  = 1;
  string content = 2;
}

message OpenRequest {
  string path  = 1;
}

message CloseRequest {
  protosupport.v1.IdRaw id = 1;
}

message CreateResponse {
    string path = 1;
    // This id might contain an error value.
    protosupport.v1.IdRaw id = 2;
    bool truncated = 3;
}

message OpenResponse {
    string path = 1;
    // This id might contain an error value.
    protosupport.v1.IdRaw id = 2;
}

// CloseResponse is not empty because it can return an error. However, there is no
// action that the receiver of this response can take other than perhaps issuing a warning
// to the system operators.
message CloseResponse {
  // This will be NoError or some error code, not a handle to an open file.
  protosupport.v1.IdRaw id = 1;
}

// LoadTestDataRequest loads the contents of given directory from the _host_ file system into the /app directory
// of the test filesystem (in memory).   This is only intended to be use for test code.
message LoadTestDataRequest {
    // path is a path to a directory on the _host_ filesystem that is to be loaded in /app
    string path = 1;
    // where this new file will exist in the in-memory filesystem... this path
    // will be cleaned lexically and then joined to /app.  Note that it is possible
    // create paths with this parameter that cannot be opened because of
    // restrictions on the path in open.
    string mount_location = 2;
    // returnOnFail should be set to true if you do NOT want the normal behavior of using panic on error.
    // If this value is set to true, the paths that cause an error on import are return in the TestDataResponse.
    bool return_on_fail = 3;
}

// LoadTestDataResponse contains a list of paths that caused an error during loading. This value is only
// returned if the LoadRequest has the returnOnFail set to true.  If LoadDataRequest.return_on_fail is
// false since by definition the error_path will be empty.
message LoadTestDataResponse {
  repeated string error_path = 1;
}

enum FileErr {
    option (protosupport.v1.parigot_error) = true;
    NoError = 0; // mandatory
    DispatchError = 1; //mandatory
    UnmarshalError = 2; // mandatory
    MarshalError = 3; // mandatory
    // invalid path means that the given path name is a not a valid identifier.  Identifiers should be 
    // shortest path name equivalent to path by purely lexical processingand. Specifically, it should 
    // start with "/parigot/app/", also, any use of '.' or '..' in the path is not allowed.
    InvalidPathError = 4;
    AlreadyInUseError = 5;
    NotExistError = 6;
}