syntax ="proto3";
package test.v1;
option go_package="github.com/iansmith/parigot/g/test/v1;test";
import "msg/test/v1/test.proto";

service TestService {
    // AddTestSuite adds all the elements in the request as suites to the
    // TestService list.  If you add a Suite more than once, the function
    // lists are merged--the functions that were already present are retained
    // and the response will show these tests as failures.
    rpc AddTestSuite(msg.test.v1.AddTestSuiteRequest) returns (msg.test.v1.AddTestSuiteResponse);

    //Start starts the TestManager running all the known tests, implicitly
    //this includes all suites.  If you give a suite filter the entire suite's tests
    //are dropped if the suite name doesn't match the filter.  For finer
    //granularity you can supple a name filter which walks all the known
    //tests and discards any test that doesn't match the filter.
    rpc Start(msg.test.v1.StartRequest) returns (msg.test.v1.StartResponse);
}

// UnderTestService is the service that services should implement to be "under test" and
// testable via TestService.
service UnderTestService {
    // For the default test setup, this is the method that dispatches requests from the
    // TestService to the appropriate test function.
    rpc Exec(msg.test.v1.ExecRequest) returns (msg.test.v1.ExecResponse);
}