syntax ="proto3";
package dom.v1;
option go_package="github.com/iansmith/parigot/g/dom/v1;dom";
import "msg/dom/v1/dom.proto";

service DOMService {
    // ElementById returns the DOMElement that has the has the (DOM) id
    // given or it returns an error, DOMNotFound.
    rpc ElementById(msg.dom.v1.ElementByIdRequest) returns (msg.dom.v1.ElementByIdResponse); 
    // ElementByEitherId returns the DOMElement that has the either the given
    // DOM id or the given ParigotId. Note that the DOM element id is
    // checked first, so this is a drop-in replacement for ElementById
    // which also checks for parigot id.
    // If can't find any element given both ids, it returns an error, DOMNotFound.
    rpc ElementByEitherId(msg.dom.v1.ElementByEitherIdRequest) returns (msg.dom.v1.ElementByEitherIdResponse); 
    // SetChild is used when you created an element or elements with CreateElement
    // but did not provide a parent.  This call will add the element or elements
    // given to parent given.
    rpc SetChild(msg.dom.v1.SetChildRequest) returns (msg.dom.v1.SetChildResponse);
    // CreateElement creates new element or elements and attaches them
    // to the dom to the parent given, or simply returns them if no parent
    // was given.
    rpc CreateElement(msg.dom.v1.CreateElementRequest) returns (msg.dom.v1.CreateElementResponse);
    // Update the css classes present on an element.
    // The new values should be present in the element.
    rpc UpdateCssClass(msg.dom.v1.UpdateCssClassRequest) returns (msg.dom.v1.UpdateCssClassResponse);
}
