// Code generated by protoc-gen-parigot. DO NOT EDIT.
// source: store/v1/store.proto

package store

import(
    "example/vvv/g/msg/store/v1" 

    // this set of imports is _unrelated_ to the particulars of what the .proto imported... those are above
    lib "github.com/iansmith/parigot/lib/go"  // id manipulation
    "github.com/iansmith/parigot/g/msg/syscall/v1"  
    "github.com/iansmith/parigot/api_impl/syscall"  // to get a callImpl


)
//
// StoreService
//
type StoreService interface { 
    MediaTypesInStock()(*storemsg.MediaTypesInStockResponse, error)
    BestOfAllTime(in *storemsg.BestOfAllTimeRequest)(*storemsg.BestOfAllTimeResponse, error)
    Revenue(in *storemsg.RevenueRequest)(*storemsg.RevenueResponse, error)
    SoldItem(in *storemsg.SoldItemRequest)error 
} 



type StoreServiceClient struct {
    *lib.ClientSideService
    lib.Call
}

// Locate finds a reference to the client interface of StoreService.  The logger parameter can be 
// nil which implies that client code cannot call the Log() interface of ClientSideService.
func LocateStoreService(logger lib.Log) (*StoreServiceClient,error) { 
	var resp *syscallmsg.LocateResponse
	req := &syscallmsg.LocateRequest{
        PackageName:"store.v1",
        ServiceName: "StoreService",
	}
    callImpl:=syscall.NewCallImpl()
    resp, err:=callImpl.Locate(req)
    if err!=nil {
        return nil, err
    }
    if resp.GetServiceId()==nil {
        panic("service id is nil, can't create ClientSideService")
    }
    service:=lib.Unmarshal(resp.GetServiceId())
    cs := lib.NewClientSideService(service, "StoreServiceClient",logger,callImpl) 
    
    return &StoreServiceClient{
        ClientSideService: cs,
        Call: callImpl,
    }, nil
}

func (i *StoreServiceClient) MediaTypesInStock()(*storemsg.MediaTypesInStockResponse, error) {
    out:=&storemsg.MediaTypesInStockResponse{}
    resp, err:= i.ClientSideService.Dispatch("MediaTypesInStock",nil) 

    if err!=nil {
        return nil, err
    } 
    err = resp.Result.UnmarshalTo(out)
    if err!=nil {
        return nil,lib.NewPerrorFromError("failed to unmarshal result:",err)
    }
    return out,nil 
}
func (i *StoreServiceClient) BestOfAllTime(in *storemsg.BestOfAllTimeRequest)(*storemsg.BestOfAllTimeResponse, error) {
    out:=&storemsg.BestOfAllTimeResponse{}
    resp, err:= i.ClientSideService.Dispatch("BestOfAllTime",in) 

    if err!=nil {
        return nil, err
    } 
    err = resp.Result.UnmarshalTo(out)
    if err!=nil {
        return nil,lib.NewPerrorFromError("failed to unmarshal result:",err)
    }
    return out,nil 
}
func (i *StoreServiceClient) Revenue(in *storemsg.RevenueRequest)(*storemsg.RevenueResponse, error) {
    out:=&storemsg.RevenueResponse{}
    resp, err:= i.ClientSideService.Dispatch("Revenue",in) 

    if err!=nil {
        return nil, err
    } 
    err = resp.Result.UnmarshalTo(out)
    if err!=nil {
        return nil,lib.NewPerrorFromError("failed to unmarshal result:",err)
    }
    return out,nil 
}
func (i *StoreServiceClient) SoldItem(in *storemsg.SoldItemRequest)error { 
    _, err:= i.ClientSideService.Dispatch("SoldItem",in)
 

    if err!=nil {
        return err
    }
  
    return nil 
}
   

