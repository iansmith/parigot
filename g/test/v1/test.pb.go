// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: test/v1/test.proto

package test

import (
	v1 "github.com/iansmith/parigot/g/protosupport/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Error codes
type TestErr int32

const (
	TestErr_NoError        TestErr = 0 // mandatory
	TestErr_DispatchError  TestErr = 1 // used by generated code
	TestErr_UnmarshalError TestErr = 2 //used by generated code
	// ServiceNotFound means that the service that was supposed to be under test
	// could not be found.
	TestErr_ServiceNotFound TestErr = 3
	// Exec means that the exec itself (not the thing being execed) has failed.
	TestErr_Exec TestErr = 4
	// SendFailed means that the Test code itself could not create the
	// necessary queue entries.
	TestErr_SendFailed TestErr = 5
	// Internal means that the Test code itself (not the code under test) has had
	// a problem.
	TestErr_Internal TestErr = 6
	// RegexpFailed means that the regexp provided by the caller did not compile
	// and is not a valid go regexp.
	TestErr_RegexpFailed TestErr = 7
	// Marshal is used to when we cannot marshal arguments
	// into to a protobuf.
	TestErr_Marshal TestErr = 8
	// Queue means that the there was internal error with the queue
	// that is used by the Test service.
	TestErr_Queue TestErr = 9
	// DynamicLocate is returned when we cannot discover the protobuf
	// package and service name pair provided.
	TestErr_DynamicLocate TestErr = 10
)

// Enum value maps for TestErr.
var (
	TestErr_name = map[int32]string{
		0:  "NoError",
		1:  "DispatchError",
		2:  "UnmarshalError",
		3:  "ServiceNotFound",
		4:  "Exec",
		5:  "SendFailed",
		6:  "Internal",
		7:  "RegexpFailed",
		8:  "Marshal",
		9:  "Queue",
		10: "DynamicLocate",
	}
	TestErr_value = map[string]int32{
		"NoError":         0,
		"DispatchError":   1,
		"UnmarshalError":  2,
		"ServiceNotFound": 3,
		"Exec":            4,
		"SendFailed":      5,
		"Internal":        6,
		"RegexpFailed":    7,
		"Marshal":         8,
		"Queue":           9,
		"DynamicLocate":   10,
	}
)

func (x TestErr) Enum() *TestErr {
	p := new(TestErr)
	*p = x
	return p
}

func (x TestErr) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TestErr) Descriptor() protoreflect.EnumDescriptor {
	return file_test_v1_test_proto_enumTypes[0].Descriptor()
}

func (TestErr) Type() protoreflect.EnumType {
	return &file_test_v1_test_proto_enumTypes[0]
}

func (x TestErr) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TestErr.Descriptor instead.
func (TestErr) EnumDescriptor() ([]byte, []int) {
	return file_test_v1_test_proto_rawDescGZIP(), []int{0}
}

// AddTestSuiteRequest adds one or more test suites to the list of available
// suites for the TestService.
type AddTestSuiteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Suite       []*SuiteInfo `protobuf:"bytes,1,rep,name=suite,proto3" json:"suite,omitempty"`
	ExecPackage string       `protobuf:"bytes,2,opt,name=exec_package,json=execPackage,proto3" json:"exec_package,omitempty"`
	ExecService string       `protobuf:"bytes,3,opt,name=exec_service,json=execService,proto3" json:"exec_service,omitempty"`
}

func (x *AddTestSuiteRequest) Reset() {
	*x = AddTestSuiteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_test_v1_test_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddTestSuiteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddTestSuiteRequest) ProtoMessage() {}

func (x *AddTestSuiteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_test_v1_test_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddTestSuiteRequest.ProtoReflect.Descriptor instead.
func (*AddTestSuiteRequest) Descriptor() ([]byte, []int) {
	return file_test_v1_test_proto_rawDescGZIP(), []int{0}
}

func (x *AddTestSuiteRequest) GetSuite() []*SuiteInfo {
	if x != nil {
		return x.Suite
	}
	return nil
}

func (x *AddTestSuiteRequest) GetExecPackage() string {
	if x != nil {
		return x.ExecPackage
	}
	return ""
}

func (x *AddTestSuiteRequest) GetExecService() string {
	if x != nil {
		return x.ExecService
	}
	return ""
}

// AddTestSuiteResponse contains a map that takes a tuple, written as
// pkg.service.name, and maps it to a boolean to indicate if the given
// tuple was added successfully.
type AddTestSuiteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Succeeded map[string]bool `protobuf:"bytes,1,rep,name=succeeded,proto3" json:"succeeded,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *AddTestSuiteResponse) Reset() {
	*x = AddTestSuiteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_test_v1_test_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddTestSuiteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddTestSuiteResponse) ProtoMessage() {}

func (x *AddTestSuiteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_test_v1_test_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddTestSuiteResponse.ProtoReflect.Descriptor instead.
func (*AddTestSuiteResponse) Descriptor() ([]byte, []int) {
	return file_test_v1_test_proto_rawDescGZIP(), []int{1}
}

func (x *AddTestSuiteResponse) GetSucceeded() map[string]bool {
	if x != nil {
		return x.Succeeded
	}
	return nil
}

// StartRequest is what the client should use to start the tests running.
// The provided data is exclusive, if filter_suite is provided filter_name
// may not be, and vice versa.  Both the suite and name filters may be empty
// to request running all tests.  filter_name and filter_suite must be legal
// golang regular expressions.  Parallel is currently ignored.
type StartRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FilterSuite string `protobuf:"bytes,1,opt,name=filter_suite,json=filterSuite,proto3" json:"filter_suite,omitempty"`
	FilterName  string `protobuf:"bytes,2,opt,name=filter_name,json=filterName,proto3" json:"filter_name,omitempty"`
	Parallel    bool   `protobuf:"varint,3,opt,name=parallel,proto3" json:"parallel,omitempty"`
}

func (x *StartRequest) Reset() {
	*x = StartRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_test_v1_test_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartRequest) ProtoMessage() {}

func (x *StartRequest) ProtoReflect() protoreflect.Message {
	mi := &file_test_v1_test_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartRequest.ProtoReflect.Descriptor instead.
func (*StartRequest) Descriptor() ([]byte, []int) {
	return file_test_v1_test_proto_rawDescGZIP(), []int{2}
}

func (x *StartRequest) GetFilterSuite() string {
	if x != nil {
		return x.FilterSuite
	}
	return ""
}

func (x *StartRequest) GetFilterName() string {
	if x != nil {
		return x.FilterName
	}
	return ""
}

func (x *StartRequest) GetParallel() bool {
	if x != nil {
		return x.Parallel
	}
	return false
}

// StartResponse returns the number of tests that will be run, given
// the filters provided in StartRequest.  If regex_failed means that one
// of the regex fields (filter_suite or filter_name) was not a valid
// golang regex.
type StartResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegexFailed bool  `protobuf:"varint,1,opt,name=regex_failed,json=regexFailed,proto3" json:"regex_failed,omitempty"` // so common we don't even call it an error
	NumTest     int32 `protobuf:"varint,2,opt,name=num_test,json=numTest,proto3" json:"num_test,omitempty"`
}

func (x *StartResponse) Reset() {
	*x = StartResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_test_v1_test_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartResponse) ProtoMessage() {}

func (x *StartResponse) ProtoReflect() protoreflect.Message {
	mi := &file_test_v1_test_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartResponse.ProtoReflect.Descriptor instead.
func (*StartResponse) Descriptor() ([]byte, []int) {
	return file_test_v1_test_proto_rawDescGZIP(), []int{3}
}

func (x *StartResponse) GetRegexFailed() bool {
	if x != nil {
		return x.RegexFailed
	}
	return false
}

func (x *StartResponse) GetNumTest() int32 {
	if x != nil {
		return x.NumTest
	}
	return 0
}

// SuiteInfo is used to describe the set of test functions that a
// suite has. The map provided goes from the logical name of the
// test ("MyFunc") to the function the test service will actually
// request ("MyTrickyDispatcher").   The key and value can be identical in
// the simple case.
type SuiteInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PackagePath  string   `protobuf:"bytes,1,opt,name=package_path,json=packagePath,proto3" json:"package_path,omitempty"`
	Service      string   `protobuf:"bytes,2,opt,name=service,proto3" json:"service,omitempty"`
	FunctionName []string `protobuf:"bytes,3,rep,name=function_name,json=functionName,proto3" json:"function_name,omitempty"`
}

func (x *SuiteInfo) Reset() {
	*x = SuiteInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_test_v1_test_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuiteInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuiteInfo) ProtoMessage() {}

func (x *SuiteInfo) ProtoReflect() protoreflect.Message {
	mi := &file_test_v1_test_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuiteInfo.ProtoReflect.Descriptor instead.
func (*SuiteInfo) Descriptor() ([]byte, []int) {
	return file_test_v1_test_proto_rawDescGZIP(), []int{4}
}

func (x *SuiteInfo) GetPackagePath() string {
	if x != nil {
		return x.PackagePath
	}
	return ""
}

func (x *SuiteInfo) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

func (x *SuiteInfo) GetFunctionName() []string {
	if x != nil {
		return x.FunctionName
	}
	return nil
}

// Comparison result describes a single comparison that was done during
// a test.  This result is generally optional inside a ExecResult.  The
// name field is not the package, service, or function name, it is a name
// that can used to narrow down to a single comparison. name can be "",
// as can error_message.  The error_id can be nil. These can be zero
// value because they are not crucial to the display of the results, although
// it is highly recommended that if the success == false, then one of
// error_message or error_id is set.
type ComparisonResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string    `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ErrorMessage string    `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	ErrorId      *v1.IdRaw `protobuf:"bytes,3,opt,name=error_id,json=errorId,proto3" json:"error_id,omitempty"`
	Success      bool      `protobuf:"varint,4,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *ComparisonResult) Reset() {
	*x = ComparisonResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_test_v1_test_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComparisonResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComparisonResult) ProtoMessage() {}

func (x *ComparisonResult) ProtoReflect() protoreflect.Message {
	mi := &file_test_v1_test_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComparisonResult.ProtoReflect.Descriptor instead.
func (*ComparisonResult) Descriptor() ([]byte, []int) {
	return file_test_v1_test_proto_rawDescGZIP(), []int{5}
}

func (x *ComparisonResult) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ComparisonResult) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *ComparisonResult) GetErrorId() *v1.IdRaw {
	if x != nil {
		return x.ErrorId
	}
	return nil
}

func (x *ComparisonResult) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

// ExecRequest is the type that flows _from_ the TestService to the
// package.service.func that is under test.  The package, service, and
// name are in the request message because the callee might be doing
// trickery with names (see the map field in the SuiteInfo) and
// thus needs to know what to emulate, dispatch, etc.
type ExecRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Package string `protobuf:"bytes,1,opt,name=package,proto3" json:"package,omitempty"`
	Service string `protobuf:"bytes,2,opt,name=service,proto3" json:"service,omitempty"`
	Name    string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *ExecRequest) Reset() {
	*x = ExecRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_test_v1_test_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecRequest) ProtoMessage() {}

func (x *ExecRequest) ProtoReflect() protoreflect.Message {
	mi := &file_test_v1_test_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecRequest.ProtoReflect.Descriptor instead.
func (*ExecRequest) Descriptor() ([]byte, []int) {
	return file_test_v1_test_proto_rawDescGZIP(), []int{6}
}

func (x *ExecRequest) GetPackage() string {
	if x != nil {
		return x.Package
	}
	return ""
}

func (x *ExecRequest) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

func (x *ExecRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// ExecResponse is what an object under test sends back to the TestService
// describing the test outcome.  A single package/service/name can have
// many comparisons.
type ExecResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool                `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Skipped bool                `protobuf:"varint,2,opt,name=skipped,proto3" json:"skipped,omitempty"`
	Package string              `protobuf:"bytes,3,opt,name=package,proto3" json:"package,omitempty"`
	Service string              `protobuf:"bytes,4,opt,name=service,proto3" json:"service,omitempty"`
	Name    string              `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	Detail  []*ComparisonResult `protobuf:"bytes,6,rep,name=detail,proto3" json:"detail,omitempty"`
}

func (x *ExecResponse) Reset() {
	*x = ExecResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_test_v1_test_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecResponse) ProtoMessage() {}

func (x *ExecResponse) ProtoReflect() protoreflect.Message {
	mi := &file_test_v1_test_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecResponse.ProtoReflect.Descriptor instead.
func (*ExecResponse) Descriptor() ([]byte, []int) {
	return file_test_v1_test_proto_rawDescGZIP(), []int{7}
}

func (x *ExecResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ExecResponse) GetSkipped() bool {
	if x != nil {
		return x.Skipped
	}
	return false
}

func (x *ExecResponse) GetPackage() string {
	if x != nil {
		return x.Package
	}
	return ""
}

func (x *ExecResponse) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

func (x *ExecResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ExecResponse) GetDetail() []*ComparisonResult {
	if x != nil {
		return x.Detail
	}
	return nil
}

// SuiteReportRequest is passed to the suite _from_ the TestService and
// contains overall information about the suite's tests.  The maps have a key
// that is the logical function name (the key in the map of SuiteRequest).
type SuiteReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success     bool                         `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	NumSuccess  int32                        `protobuf:"varint,2,opt,name=num_success,json=numSuccess,proto3" json:"num_success,omitempty"`
	NumFailure  int32                        `protobuf:"varint,3,opt,name=num_failure,json=numFailure,proto3" json:"num_failure,omitempty"`
	NumSkip     int32                        `protobuf:"varint,4,opt,name=num_skip,json=numSkip,proto3" json:"num_skip,omitempty"`
	Package     string                       `protobuf:"bytes,5,opt,name=package,proto3" json:"package,omitempty"`
	Service     string                       `protobuf:"bytes,6,opt,name=service,proto3" json:"service,omitempty"`
	TestSuccess map[string]bool              `protobuf:"bytes,7,rep,name=test_success,json=testSuccess,proto3" json:"test_success,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	TestSkip    map[string]bool              `protobuf:"bytes,8,rep,name=test_skip,json=testSkip,proto3" json:"test_skip,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Detail      map[string]*ComparisonResult `protobuf:"bytes,9,rep,name=detail,proto3" json:"detail,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SuiteReportRequest) Reset() {
	*x = SuiteReportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_test_v1_test_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuiteReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuiteReportRequest) ProtoMessage() {}

func (x *SuiteReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_test_v1_test_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuiteReportRequest.ProtoReflect.Descriptor instead.
func (*SuiteReportRequest) Descriptor() ([]byte, []int) {
	return file_test_v1_test_proto_rawDescGZIP(), []int{8}
}

func (x *SuiteReportRequest) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *SuiteReportRequest) GetNumSuccess() int32 {
	if x != nil {
		return x.NumSuccess
	}
	return 0
}

func (x *SuiteReportRequest) GetNumFailure() int32 {
	if x != nil {
		return x.NumFailure
	}
	return 0
}

func (x *SuiteReportRequest) GetNumSkip() int32 {
	if x != nil {
		return x.NumSkip
	}
	return 0
}

func (x *SuiteReportRequest) GetPackage() string {
	if x != nil {
		return x.Package
	}
	return ""
}

func (x *SuiteReportRequest) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

func (x *SuiteReportRequest) GetTestSuccess() map[string]bool {
	if x != nil {
		return x.TestSuccess
	}
	return nil
}

func (x *SuiteReportRequest) GetTestSkip() map[string]bool {
	if x != nil {
		return x.TestSkip
	}
	return nil
}

func (x *SuiteReportRequest) GetDetail() map[string]*ComparisonResult {
	if x != nil {
		return x.Detail
	}
	return nil
}

// SuiteReportResponse is empty because there is nothing valuable that
// can be sent from the suite to the TestService.
type SuiteReportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SuiteReportResponse) Reset() {
	*x = SuiteReportResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_test_v1_test_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuiteReportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuiteReportResponse) ProtoMessage() {}

func (x *SuiteReportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_test_v1_test_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuiteReportResponse.ProtoReflect.Descriptor instead.
func (*SuiteReportResponse) Descriptor() ([]byte, []int) {
	return file_test_v1_test_proto_rawDescGZIP(), []int{9}
}

// QueuePayload is the payload that is sent to the TestService via sending
// and receiving items from the queue.  Note that the TestSends these messages
// during setup and retreives them in the background once the tests have started.
type QueuePayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	FuncName string `protobuf:"bytes,2,opt,name=func_name,json=funcName,proto3" json:"func_name,omitempty"`
}

func (x *QueuePayload) Reset() {
	*x = QueuePayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_test_v1_test_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueuePayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueuePayload) ProtoMessage() {}

func (x *QueuePayload) ProtoReflect() protoreflect.Message {
	mi := &file_test_v1_test_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueuePayload.ProtoReflect.Descriptor instead.
func (*QueuePayload) Descriptor() ([]byte, []int) {
	return file_test_v1_test_proto_rawDescGZIP(), []int{10}
}

func (x *QueuePayload) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *QueuePayload) GetFuncName() string {
	if x != nil {
		return x.FuncName
	}
	return ""
}

var File_test_v1_test_proto protoreflect.FileDescriptor

var file_test_v1_test_proto_rawDesc = []byte{
	0x0a, 0x12, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x1a, 0x22, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x85, 0x01, 0x0a, 0x13, 0x41, 0x64, 0x64, 0x54, 0x65, 0x73, 0x74, 0x53, 0x75, 0x69,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x05, 0x73, 0x75, 0x69,
	0x74, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x75, 0x69, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x73, 0x75,
	0x69, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x78, 0x65, 0x63, 0x5f, 0x70, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x78, 0x65, 0x63, 0x50,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x78, 0x65, 0x63, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x78,
	0x65, 0x63, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x22, 0xa0, 0x01, 0x0a, 0x14, 0x41, 0x64,
	0x64, 0x54, 0x65, 0x73, 0x74, 0x53, 0x75, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x4a, 0x0a, 0x09, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x64, 0x64, 0x54, 0x65, 0x73, 0x74, 0x53, 0x75, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x09, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x1a, 0x3c,
	0x0a, 0x0e, 0x53, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x6e, 0x0a, 0x0c,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x75, 0x69, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x75, 0x69, 0x74, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x22, 0x4d, 0x0a, 0x0d,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x72, 0x65, 0x67, 0x65, 0x78, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x72, 0x65, 0x67, 0x65, 0x78, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x6e, 0x75, 0x6d, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x6e, 0x75, 0x6d, 0x54, 0x65, 0x73, 0x74, 0x22, 0x6d, 0x0a, 0x09, 0x53,
	0x75, 0x69, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x98, 0x01, 0x0a, 0x10, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x08, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x52,
	0x61, 0x77, 0x52, 0x07, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x55, 0x0a, 0x0b, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xbd, 0x01, 0x0a,
	0x0c, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6b, 0x69, 0x70, 0x70,
	0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x65,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x65, 0x73, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0xec, 0x04, 0x0a,
	0x12, 0x53, 0x75, 0x69, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x1f, 0x0a,
	0x0b, 0x6e, 0x75, 0x6d, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x6e, 0x75, 0x6d, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x1f,
	0x0a, 0x0b, 0x6e, 0x75, 0x6d, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x6e, 0x75, 0x6d, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x6e, 0x75, 0x6d, 0x5f, 0x73, 0x6b, 0x69, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x6e, 0x75, 0x6d, 0x53, 0x6b, 0x69, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4f,
	0x0a, 0x0c, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x75, 0x69, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0b, 0x74, 0x65, 0x73, 0x74, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12,
	0x46, 0x0a, 0x09, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x6b, 0x69, 0x70, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x69,
	0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x54, 0x65, 0x73, 0x74, 0x53, 0x6b, 0x69, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x74,
	0x65, 0x73, 0x74, 0x53, 0x6b, 0x69, 0x70, 0x12, 0x3f, 0x0a, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x75, 0x69, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x1a, 0x3e, 0x0a, 0x10, 0x54, 0x65, 0x73, 0x74,
	0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3b, 0x0a, 0x0d, 0x54, 0x65, 0x73, 0x74,
	0x53, 0x6b, 0x69, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x54, 0x0a, 0x0b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x15, 0x0a, 0x13, 0x53,
	0x75, 0x69, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x3f, 0x0a, 0x0c, 0x51, 0x75, 0x65, 0x75, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x75, 0x6e, 0x63, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x4e,
	0x61, 0x6d, 0x65, 0x2a, 0xbe, 0x01, 0x0a, 0x07, 0x54, 0x65, 0x73, 0x74, 0x45, 0x72, 0x72, 0x12,
	0x0b, 0x0a, 0x07, 0x4e, 0x6f, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d,
	0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x01, 0x12,
	0x12, 0x0a, 0x0e, 0x55, 0x6e, 0x6d, 0x61, 0x72, 0x73, 0x68, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x6f,
	0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x45, 0x78, 0x65, 0x63,
	0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x65, 0x6e, 0x64, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x10, 0x05, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x10, 0x06,
	0x12, 0x10, 0x0a, 0x0c, 0x52, 0x65, 0x67, 0x65, 0x78, 0x70, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x10, 0x07, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x61, 0x72, 0x73, 0x68, 0x61, 0x6c, 0x10, 0x08, 0x12,
	0x09, 0x0a, 0x05, 0x51, 0x75, 0x65, 0x75, 0x65, 0x10, 0x09, 0x12, 0x11, 0x0a, 0x0d, 0x44, 0x79,
	0x6e, 0x61, 0x6d, 0x69, 0x63, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x10, 0x0a, 0x1a, 0x05, 0xd8,
	0x9e, 0x89, 0x02, 0x01, 0x32, 0x8b, 0x01, 0x0a, 0x04, 0x54, 0x65, 0x73, 0x74, 0x12, 0x4b, 0x0a,
	0x0c, 0x41, 0x64, 0x64, 0x54, 0x65, 0x73, 0x74, 0x53, 0x75, 0x69, 0x74, 0x65, 0x12, 0x1c, 0x2e,
	0x74, 0x65, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x54, 0x65, 0x73, 0x74, 0x53,
	0x75, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x74, 0x65,
	0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x54, 0x65, 0x73, 0x74, 0x53, 0x75, 0x69,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x05, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x12, 0x15, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x74, 0x65, 0x73,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x32, 0x9e, 0x01, 0x0a, 0x0f, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x43, 0x61, 0x6c,
	0x6c, 0x53, 0x75, 0x69, 0x74, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x45, 0x78, 0x65, 0x63, 0x12, 0x14,
	0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45,
	0x78, 0x65, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x0b, 0x53,
	0x75, 0x69, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1b, 0x2e, 0x74, 0x65, 0x73,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x69, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x75, 0x69, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x1a, 0x0c, 0xea, 0x9e, 0x89, 0x02, 0x07, 0x54, 0x65, 0x73, 0x74,
	0x45, 0x72, 0x72, 0x32, 0x62, 0x0a, 0x09, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x54, 0x65, 0x73, 0x74,
	0x12, 0x47, 0x0a, 0x04, 0x45, 0x78, 0x65, 0x63, 0x12, 0x14, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15,
	0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x12, 0xe2, 0x9e, 0x89, 0x02, 0x0d, 0x45, 0x78, 0x65, 0x63,
	0x55, 0x6e, 0x64, 0x65, 0x72, 0x54, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0xea, 0x9e, 0x89, 0x02, 0x07,
	0x54, 0x65, 0x73, 0x74, 0x45, 0x72, 0x72, 0x42, 0x2c, 0x5a, 0x2a, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x69, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x68, 0x2f, 0x70,
	0x61, 0x72, 0x69, 0x67, 0x6f, 0x74, 0x2f, 0x67, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x76, 0x31,
	0x3b, 0x74, 0x65, 0x73, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_test_v1_test_proto_rawDescOnce sync.Once
	file_test_v1_test_proto_rawDescData = file_test_v1_test_proto_rawDesc
)

func file_test_v1_test_proto_rawDescGZIP() []byte {
	file_test_v1_test_proto_rawDescOnce.Do(func() {
		file_test_v1_test_proto_rawDescData = protoimpl.X.CompressGZIP(file_test_v1_test_proto_rawDescData)
	})
	return file_test_v1_test_proto_rawDescData
}

var file_test_v1_test_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_test_v1_test_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_test_v1_test_proto_goTypes = []interface{}{
	(TestErr)(0),                 // 0: test.v1.TestErr
	(*AddTestSuiteRequest)(nil),  // 1: test.v1.AddTestSuiteRequest
	(*AddTestSuiteResponse)(nil), // 2: test.v1.AddTestSuiteResponse
	(*StartRequest)(nil),         // 3: test.v1.StartRequest
	(*StartResponse)(nil),        // 4: test.v1.StartResponse
	(*SuiteInfo)(nil),            // 5: test.v1.SuiteInfo
	(*ComparisonResult)(nil),     // 6: test.v1.ComparisonResult
	(*ExecRequest)(nil),          // 7: test.v1.ExecRequest
	(*ExecResponse)(nil),         // 8: test.v1.ExecResponse
	(*SuiteReportRequest)(nil),   // 9: test.v1.SuiteReportRequest
	(*SuiteReportResponse)(nil),  // 10: test.v1.SuiteReportResponse
	(*QueuePayload)(nil),         // 11: test.v1.QueuePayload
	nil,                          // 12: test.v1.AddTestSuiteResponse.SucceededEntry
	nil,                          // 13: test.v1.SuiteReportRequest.TestSuccessEntry
	nil,                          // 14: test.v1.SuiteReportRequest.TestSkipEntry
	nil,                          // 15: test.v1.SuiteReportRequest.DetailEntry
	(*v1.IdRaw)(nil),             // 16: protosupport.v1.IdRaw
}
var file_test_v1_test_proto_depIdxs = []int32{
	5,  // 0: test.v1.AddTestSuiteRequest.suite:type_name -> test.v1.SuiteInfo
	12, // 1: test.v1.AddTestSuiteResponse.succeeded:type_name -> test.v1.AddTestSuiteResponse.SucceededEntry
	16, // 2: test.v1.ComparisonResult.error_id:type_name -> protosupport.v1.IdRaw
	6,  // 3: test.v1.ExecResponse.detail:type_name -> test.v1.ComparisonResult
	13, // 4: test.v1.SuiteReportRequest.test_success:type_name -> test.v1.SuiteReportRequest.TestSuccessEntry
	14, // 5: test.v1.SuiteReportRequest.test_skip:type_name -> test.v1.SuiteReportRequest.TestSkipEntry
	15, // 6: test.v1.SuiteReportRequest.detail:type_name -> test.v1.SuiteReportRequest.DetailEntry
	6,  // 7: test.v1.SuiteReportRequest.DetailEntry.value:type_name -> test.v1.ComparisonResult
	1,  // 8: test.v1.Test.AddTestSuite:input_type -> test.v1.AddTestSuiteRequest
	3,  // 9: test.v1.Test.Start:input_type -> test.v1.StartRequest
	7,  // 10: test.v1.MethodCallSuite.Exec:input_type -> test.v1.ExecRequest
	9,  // 11: test.v1.MethodCallSuite.SuiteReport:input_type -> test.v1.SuiteReportRequest
	7,  // 12: test.v1.UnderTest.Exec:input_type -> test.v1.ExecRequest
	2,  // 13: test.v1.Test.AddTestSuite:output_type -> test.v1.AddTestSuiteResponse
	4,  // 14: test.v1.Test.Start:output_type -> test.v1.StartResponse
	8,  // 15: test.v1.MethodCallSuite.Exec:output_type -> test.v1.ExecResponse
	10, // 16: test.v1.MethodCallSuite.SuiteReport:output_type -> test.v1.SuiteReportResponse
	8,  // 17: test.v1.UnderTest.Exec:output_type -> test.v1.ExecResponse
	13, // [13:18] is the sub-list for method output_type
	8,  // [8:13] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_test_v1_test_proto_init() }
func file_test_v1_test_proto_init() {
	if File_test_v1_test_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_test_v1_test_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddTestSuiteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_test_v1_test_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddTestSuiteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_test_v1_test_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_test_v1_test_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_test_v1_test_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuiteInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_test_v1_test_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComparisonResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_test_v1_test_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_test_v1_test_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_test_v1_test_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuiteReportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_test_v1_test_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuiteReportResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_test_v1_test_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueuePayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_test_v1_test_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   3,
		},
		GoTypes:           file_test_v1_test_proto_goTypes,
		DependencyIndexes: file_test_v1_test_proto_depIdxs,
		EnumInfos:         file_test_v1_test_proto_enumTypes,
		MessageInfos:      file_test_v1_test_proto_msgTypes,
	}.Build()
	File_test_v1_test_proto = out.File
	file_test_v1_test_proto_rawDesc = nil
	file_test_v1_test_proto_goTypes = nil
	file_test_v1_test_proto_depIdxs = nil
}
