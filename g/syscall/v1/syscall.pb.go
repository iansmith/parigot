// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: syscall/v1/syscall.proto

package syscall

import (
	v1 "github.com/iansmith/parigot/g/protosupport/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type KernelErr int32

const (
	KernelErr_NoError KernelErr = 0
	// LocateError is return when the kernel cannot find the requested
	// service, given by a package name and service name pair.
	KernelErr_LocateError KernelErr = 1
	// UnmarshalFailed is used to indicate that in unmarshaling
	// a request or result, the protobuf layer returned an error.
	KernelErr_UnmarshalFailed KernelErr = 2
	// IdDispatch means that a dispatch call failed due to an
	// MethodId or ServiceId was not found.  This is also used when
	// binding a method if the name is invalid.
	KernelErr_IdDispatch KernelErr = 3
	// NamespaceExhausted is returned when the kernel can no
	// along accept additional packages, services, or methods.  This is used
	// primarily to thwart attempts at DOS attacks.
	KernelErr_NamespaceExhausted KernelErr = 4
	// NotFound means that a package, service, or method that was requested
	// could not be found.
	KernelErr_NotFound KernelErr = 5
	// DataTooLarge means that the size of some part of method call was bigger
	// than the buffer allocated to receive it.  This could be a problem either on
	// the call side or the return side.
	KernelErr_DataTooLarge KernelErr = 6
	// Marshal means that a marshal of a protobuf has failed.
	KernelErr_MarshalFailed KernelErr = 7
	// CallerUnavailable means that the kernel could not find the original caller
	// that requested the computation for which results have been provided.
	// It is most likely because the caller was killed, exited or timed out.
	KernelErr_CallerUnavailable KernelErr = 8
	// KernelServiceAlreadyClosedOrExported means that some process has already
	// reported the service in question as closed or has already expressed that it is
	// exporting (implementing this service).  This is very likely a case where there
	// are two servers that think they are or should be implementing the same service.
	KernelErr_ServiceAlreadyClosedOrExported KernelErr = 9
	// ServiceAlreadyRequired means that this same process has already
	// required the given service.
	KernelErr_ServiceAlreadyRequired KernelErr = 10
	// DependencyCycle means that no deterministic startup ordering
	// exists for the set of exports and requires in use.  In other words,
	// you must refactor your program so that you do not have a cyle to make
	// it come up cleanly.
	KernelErr_DependencyCycle KernelErr = 11
	// NetworkFailed means that we successfully connected to the nameserver, but failed
	// during the communication process itself.
	KernelErr_NetworkFailed KernelErr = 12
	// NetworkConnectionLost means that our internal connection to the remote nameserver
	// was either still working but has lost "sync" in the protocol or the connection has
	// become entirely broken.  The kernel will close the connection to remote nameserver
	// and reestablish it after this error.
	KernelErr_NetworkConnectionLost KernelErr = 13
	// DataTooSmall means that the kernel was speaking some protocol with a remote server,
	// such as a remote nameserver, and data read from the remote said was smaller than the protocol
	// dictated, e.g. it did not contain a checksum after a data block.
	KernelErr_DataTooSmall KernelErr = 14
	// ConnectionFailed means that the attempt to open a connection to a remote
	// service has failed to connect.
	KernelErr_KernelConnectionFailed KernelErr = 15
	// NSRetryFailed means that we tried twice to reach the nameserver with
	// the given request, but both times could not do so.
	KernelErr_NSRetryFailed KernelErr = 16
	// DecodeError indicates that an attempt to extract a protobuf object
	// from an encoded set of bytes has failed.  Typically, this means that
	// the encoder was not called.
	KernelErr_DecodeError KernelErr = 17
	// ExecError means that we received a response from the implenter of a particular
	// service's function and the execution of that function failed.
	KernelErr_ExecError KernelErr = 18
	// DependencyFailure means that the dependency infrastructure has failed.  This is different
	// than when a user creates bad set of depedencies (KernelDependencyCycle). This
	// an internal to the kernel error.
	KernelErr_KernelDependencyFailure KernelErr = 19
	// AbortRequest indicates that the program that receives this error
	// should exit because the nameserver has asked it to do so.  This
	// means that some _other_ program has failed to start correctly, so this
	// deployment cannot succeed.
	KernelErr_AbortRequest KernelErr = 20
	// EncodeError indicates that an attempt encode a protobuf
	// with header and CRC has failed.
	KernelErr_EncodeError KernelErr = 22
	// ClosedErr indicates that that object is now closed.  This is used
	// as a signal when writing data between the guest and host.
	KernelErr_ClosedErr KernelErr = 23
	// GuestReadFailed indicates that we did not successfully read
	// from guest memory. This is usually caused by the proposed address
	// to read from being out of bounds.
	KernelErr_GuestReadFailed KernelErr = 24
	// GuestWriteFailed indicates that we did not successfully write
	// to guest memory. This is usually caused by the proposed address
	// for writing to being out of bounds.
	KernelErr_GuestWriteFailed KernelErr = 25
	// BadId indicates that you passed the zero value or the empty value of a
	// an id type into a system call.  This usually means that you did not
	// properly initialize a protobuf.
	KernelErr_BadId KernelErr = 26
	// NotReady that the service that was trying
	// to start was aborted because it returned false from Ready().
	// Usually this error indicates that the program has no way to
	// continue running.
	KernelErr_NotReady KernelErr = 27
	// NotRequired that a service has tried to Locate() another service
	// that that the first service did not Require() previously.
	KernelErr_NotRequired KernelErr = 28
	// RunTimeout means that the programs timeout has expired when waiting
	// for all the required dependencies to be fulfilled.
	KernelErr_RunTimeout KernelErr = 29
	// ReadOneTimeout means that the program was trying to request
	// a service/method pair to invoke, but the request timed out.
	KernelErr_ReadOneTimeout KernelErr = 30
	// WriteTimeout means that the program was trying to send
	// a request to another service, but timed out before it could do so.
	KernelErr_WriteTimeout KernelErr = 31
	// BadCallId is returned when trying to match up the results
	// and the call of a function resulting in a promise. It is returned
	// if either there is no such cid registered yet or the cid
	// is already in use.
	KernelErr_BadCallId KernelErr = 32
	// ChannelClosed indicates that one of the internal channels used in
	// waiting for input has been closed unexpectedly.
	// is already in use.
	KernelErr_ChannelClosed KernelErr = 33
	// ExitFailed means that we were tyring to send an orderly shutdown but
	// could not reach all the of the hosts that we needed to notify.
	KernelErr_ExitFailed KernelErr = 34
)

// Enum value maps for KernelErr.
var (
	KernelErr_name = map[int32]string{
		0:  "NoError",
		1:  "LocateError",
		2:  "UnmarshalFailed",
		3:  "IdDispatch",
		4:  "NamespaceExhausted",
		5:  "NotFound",
		6:  "DataTooLarge",
		7:  "MarshalFailed",
		8:  "CallerUnavailable",
		9:  "ServiceAlreadyClosedOrExported",
		10: "ServiceAlreadyRequired",
		11: "DependencyCycle",
		12: "NetworkFailed",
		13: "NetworkConnectionLost",
		14: "DataTooSmall",
		15: "KernelConnectionFailed",
		16: "NSRetryFailed",
		17: "DecodeError",
		18: "ExecError",
		19: "KernelDependencyFailure",
		20: "AbortRequest",
		22: "EncodeError",
		23: "ClosedErr",
		24: "GuestReadFailed",
		25: "GuestWriteFailed",
		26: "BadId",
		27: "NotReady",
		28: "NotRequired",
		29: "RunTimeout",
		30: "ReadOneTimeout",
		31: "WriteTimeout",
		32: "BadCallId",
		33: "ChannelClosed",
		34: "ExitFailed",
	}
	KernelErr_value = map[string]int32{
		"NoError":                        0,
		"LocateError":                    1,
		"UnmarshalFailed":                2,
		"IdDispatch":                     3,
		"NamespaceExhausted":             4,
		"NotFound":                       5,
		"DataTooLarge":                   6,
		"MarshalFailed":                  7,
		"CallerUnavailable":              8,
		"ServiceAlreadyClosedOrExported": 9,
		"ServiceAlreadyRequired":         10,
		"DependencyCycle":                11,
		"NetworkFailed":                  12,
		"NetworkConnectionLost":          13,
		"DataTooSmall":                   14,
		"KernelConnectionFailed":         15,
		"NSRetryFailed":                  16,
		"DecodeError":                    17,
		"ExecError":                      18,
		"KernelDependencyFailure":        19,
		"AbortRequest":                   20,
		"EncodeError":                    22,
		"ClosedErr":                      23,
		"GuestReadFailed":                24,
		"GuestWriteFailed":               25,
		"BadId":                          26,
		"NotReady":                       27,
		"NotRequired":                    28,
		"RunTimeout":                     29,
		"ReadOneTimeout":                 30,
		"WriteTimeout":                   31,
		"BadCallId":                      32,
		"ChannelClosed":                  33,
		"ExitFailed":                     34,
	}
)

func (x KernelErr) Enum() *KernelErr {
	p := new(KernelErr)
	*p = x
	return p
}

func (x KernelErr) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KernelErr) Descriptor() protoreflect.EnumDescriptor {
	return file_syscall_v1_syscall_proto_enumTypes[0].Descriptor()
}

func (KernelErr) Type() protoreflect.EnumType {
	return &file_syscall_v1_syscall_proto_enumTypes[0]
}

func (x KernelErr) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KernelErr.Descriptor instead.
func (KernelErr) EnumDescriptor() ([]byte, []int) {
	return file_syscall_v1_syscall_proto_rawDescGZIP(), []int{0}
}

type MethodDirection int32

const (
	MethodDirection_METHOD_DIRECTION_UNSPECIFIED MethodDirection = 0
	MethodDirection_METHOD_DIRECTION_IN          MethodDirection = 1
	MethodDirection_METHOD_DIRECTION_OUT         MethodDirection = 2
	MethodDirection_METHOD_DIRECTION_BOTH        MethodDirection = 3
)

// Enum value maps for MethodDirection.
var (
	MethodDirection_name = map[int32]string{
		0: "METHOD_DIRECTION_UNSPECIFIED",
		1: "METHOD_DIRECTION_IN",
		2: "METHOD_DIRECTION_OUT",
		3: "METHOD_DIRECTION_BOTH",
	}
	MethodDirection_value = map[string]int32{
		"METHOD_DIRECTION_UNSPECIFIED": 0,
		"METHOD_DIRECTION_IN":          1,
		"METHOD_DIRECTION_OUT":         2,
		"METHOD_DIRECTION_BOTH":        3,
	}
)

func (x MethodDirection) Enum() *MethodDirection {
	p := new(MethodDirection)
	*p = x
	return p
}

func (x MethodDirection) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MethodDirection) Descriptor() protoreflect.EnumDescriptor {
	return file_syscall_v1_syscall_proto_enumTypes[1].Descriptor()
}

func (MethodDirection) Type() protoreflect.EnumType {
	return &file_syscall_v1_syscall_proto_enumTypes[1]
}

func (x MethodDirection) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MethodDirection.Descriptor instead.
func (MethodDirection) EnumDescriptor() ([]byte, []int) {
	return file_syscall_v1_syscall_proto_rawDescGZIP(), []int{1}
}

// MessageBundle tells the receiver all the necessary info to make a call
// on a method.  Note that when this is sent to a particular server, the HostId
// is the host id of the _caller_ not the place where the service is implemented.
type MethodBundle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HostId    *v1.IdRaw `protobuf:"bytes,1,opt,name=host_id,json=hostId,proto3" json:"host_id,omitempty"`
	ServiceId *v1.IdRaw `protobuf:"bytes,2,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	MethodId  *v1.IdRaw `protobuf:"bytes,3,opt,name=method_id,json=methodId,proto3" json:"method_id,omitempty"`
	CallId    *v1.IdRaw `protobuf:"bytes,4,opt,name=call_id,json=callId,proto3" json:"call_id,omitempty"`
}

func (x *MethodBundle) Reset() {
	*x = MethodBundle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_syscall_v1_syscall_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MethodBundle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MethodBundle) ProtoMessage() {}

func (x *MethodBundle) ProtoReflect() protoreflect.Message {
	mi := &file_syscall_v1_syscall_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MethodBundle.ProtoReflect.Descriptor instead.
func (*MethodBundle) Descriptor() ([]byte, []int) {
	return file_syscall_v1_syscall_proto_rawDescGZIP(), []int{0}
}

func (x *MethodBundle) GetHostId() *v1.IdRaw {
	if x != nil {
		return x.HostId
	}
	return nil
}

func (x *MethodBundle) GetServiceId() *v1.IdRaw {
	if x != nil {
		return x.ServiceId
	}
	return nil
}

func (x *MethodBundle) GetMethodId() *v1.IdRaw {
	if x != nil {
		return x.MethodId
	}
	return nil
}

func (x *MethodBundle) GetCallId() *v1.IdRaw {
	if x != nil {
		return x.CallId
	}
	return nil
}

type MethodBinding struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MethodName string    `protobuf:"bytes,1,opt,name=method_name,json=methodName,proto3" json:"method_name,omitempty"`
	MethodId   *v1.IdRaw `protobuf:"bytes,2,opt,name=method_id,json=methodId,proto3" json:"method_id,omitempty"`
}

func (x *MethodBinding) Reset() {
	*x = MethodBinding{}
	if protoimpl.UnsafeEnabled {
		mi := &file_syscall_v1_syscall_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MethodBinding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MethodBinding) ProtoMessage() {}

func (x *MethodBinding) ProtoReflect() protoreflect.Message {
	mi := &file_syscall_v1_syscall_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MethodBinding.ProtoReflect.Descriptor instead.
func (*MethodBinding) Descriptor() ([]byte, []int) {
	return file_syscall_v1_syscall_proto_rawDescGZIP(), []int{1}
}

func (x *MethodBinding) GetMethodName() string {
	if x != nil {
		return x.MethodName
	}
	return ""
}

func (x *MethodBinding) GetMethodId() *v1.IdRaw {
	if x != nil {
		return x.MethodId
	}
	return nil
}

// LocateRequest is a read from the kernel of the service id associated with a package, service pair.
type LocateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PackageName string `protobuf:"bytes,1,opt,name=package_name,json=packageName,proto3" json:"package_name,omitempty"`
	ServiceName string `protobuf:"bytes,2,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	// called_by is only needed for true clients. If you are doing a call to
	// locate with a service that you did not and could not have known beforehand
	// you should leave this empty.
	CalledBy *v1.IdRaw `protobuf:"bytes,3,opt,name=called_by,json=calledBy,proto3" json:"called_by,omitempty"`
}

func (x *LocateRequest) Reset() {
	*x = LocateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_syscall_v1_syscall_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocateRequest) ProtoMessage() {}

func (x *LocateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_syscall_v1_syscall_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocateRequest.ProtoReflect.Descriptor instead.
func (*LocateRequest) Descriptor() ([]byte, []int) {
	return file_syscall_v1_syscall_proto_rawDescGZIP(), []int{2}
}

func (x *LocateRequest) GetPackageName() string {
	if x != nil {
		return x.PackageName
	}
	return ""
}

func (x *LocateRequest) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *LocateRequest) GetCalledBy() *v1.IdRaw {
	if x != nil {
		return x.CalledBy
	}
	return nil
}

// LocateResponse hands back the service Id of the package_name and service_name supplied in the request.
// A service id can be thought of as a (network hostname,port) pair that defines which
// service's "location".
type LocateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HostId    *v1.IdRaw        `protobuf:"bytes,1,opt,name=host_id,json=hostId,proto3" json:"host_id,omitempty"`
	ServiceId *v1.IdRaw        `protobuf:"bytes,2,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	Binding   []*MethodBinding `protobuf:"bytes,3,rep,name=binding,proto3" json:"binding,omitempty"`
}

func (x *LocateResponse) Reset() {
	*x = LocateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_syscall_v1_syscall_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocateResponse) ProtoMessage() {}

func (x *LocateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_syscall_v1_syscall_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocateResponse.ProtoReflect.Descriptor instead.
func (*LocateResponse) Descriptor() ([]byte, []int) {
	return file_syscall_v1_syscall_proto_rawDescGZIP(), []int{3}
}

func (x *LocateResponse) GetHostId() *v1.IdRaw {
	if x != nil {
		return x.HostId
	}
	return nil
}

func (x *LocateResponse) GetServiceId() *v1.IdRaw {
	if x != nil {
		return x.ServiceId
	}
	return nil
}

func (x *LocateResponse) GetBinding() []*MethodBinding {
	if x != nil {
		return x.Binding
	}
	return nil
}

// DispatchRequest is a request by a client to invoke a particular method with the parameters provided.
type DispatchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bundle *MethodBundle `protobuf:"bytes,1,opt,name=bundle,proto3" json:"bundle,omitempty"`
	Param  *anypb.Any    `protobuf:"bytes,3,opt,name=param,proto3" json:"param,omitempty"` // inside is another Request object, but we don't know its type
}

func (x *DispatchRequest) Reset() {
	*x = DispatchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_syscall_v1_syscall_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DispatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DispatchRequest) ProtoMessage() {}

func (x *DispatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_syscall_v1_syscall_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DispatchRequest.ProtoReflect.Descriptor instead.
func (*DispatchRequest) Descriptor() ([]byte, []int) {
	return file_syscall_v1_syscall_proto_rawDescGZIP(), []int{4}
}

func (x *DispatchRequest) GetBundle() *MethodBundle {
	if x != nil {
		return x.Bundle
	}
	return nil
}

func (x *DispatchRequest) GetParam() *anypb.Any {
	if x != nil {
		return x.Param
	}
	return nil
}

// DispatchResponse sent by the server back to a client.  This what is returned
// as the intermediate value to the caller, because the caller
// cannot block.  This call_id value can be used on the client side
// to map to additional info about the call.
type DispatchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CallId       *v1.IdRaw `protobuf:"bytes,1,opt,name=call_id,json=callId,proto3" json:"call_id,omitempty"`                     // reserved for internal use
	TargetHostId *v1.IdRaw `protobuf:"bytes,2,opt,name=target_host_id,json=targetHostId,proto3" json:"target_host_id,omitempty"` // reserved for internal use
}

func (x *DispatchResponse) Reset() {
	*x = DispatchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_syscall_v1_syscall_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DispatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DispatchResponse) ProtoMessage() {}

func (x *DispatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_syscall_v1_syscall_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DispatchResponse.ProtoReflect.Descriptor instead.
func (*DispatchResponse) Descriptor() ([]byte, []int) {
	return file_syscall_v1_syscall_proto_rawDescGZIP(), []int{5}
}

func (x *DispatchResponse) GetCallId() *v1.IdRaw {
	if x != nil {
		return x.CallId
	}
	return nil
}

func (x *DispatchResponse) GetTargetHostId() *v1.IdRaw {
	if x != nil {
		return x.TargetHostId
	}
	return nil
}

// ReturnValueRequest is used to return the result of a
// function back to the caller. It is the result information
// of a call to a service/method function.
type ReturnValueRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bundle      *MethodBundle `protobuf:"bytes,1,opt,name=bundle,proto3" json:"bundle,omitempty"`
	Result      *anypb.Any    `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
	ResultError int32         `protobuf:"varint,3,opt,name=result_error,json=resultError,proto3" json:"result_error,omitempty"`
}

func (x *ReturnValueRequest) Reset() {
	*x = ReturnValueRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_syscall_v1_syscall_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReturnValueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReturnValueRequest) ProtoMessage() {}

func (x *ReturnValueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_syscall_v1_syscall_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReturnValueRequest.ProtoReflect.Descriptor instead.
func (*ReturnValueRequest) Descriptor() ([]byte, []int) {
	return file_syscall_v1_syscall_proto_rawDescGZIP(), []int{6}
}

func (x *ReturnValueRequest) GetBundle() *MethodBundle {
	if x != nil {
		return x.Bundle
	}
	return nil
}

func (x *ReturnValueRequest) GetResult() *anypb.Any {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *ReturnValueRequest) GetResultError() int32 {
	if x != nil {
		return x.ResultError
	}
	return 0
}

// ReturnValueResponse is currently empty.
type ReturnValueResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReturnValueResponse) Reset() {
	*x = ReturnValueResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_syscall_v1_syscall_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReturnValueResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReturnValueResponse) ProtoMessage() {}

func (x *ReturnValueResponse) ProtoReflect() protoreflect.Message {
	mi := &file_syscall_v1_syscall_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReturnValueResponse.ProtoReflect.Descriptor instead.
func (*ReturnValueResponse) Descriptor() ([]byte, []int) {
	return file_syscall_v1_syscall_proto_rawDescGZIP(), []int{7}
}

type BlockUntilCallRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CanTimeout bool `protobuf:"varint,1,opt,name=can_timeout,json=canTimeout,proto3" json:"can_timeout,omitempty"`
}

func (x *BlockUntilCallRequest) Reset() {
	*x = BlockUntilCallRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_syscall_v1_syscall_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockUntilCallRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockUntilCallRequest) ProtoMessage() {}

func (x *BlockUntilCallRequest) ProtoReflect() protoreflect.Message {
	mi := &file_syscall_v1_syscall_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockUntilCallRequest.ProtoReflect.Descriptor instead.
func (*BlockUntilCallRequest) Descriptor() ([]byte, []int) {
	return file_syscall_v1_syscall_proto_rawDescGZIP(), []int{8}
}

func (x *BlockUntilCallRequest) GetCanTimeout() bool {
	if x != nil {
		return x.CanTimeout
	}
	return false
}

type BlockUntilCallResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Param    *anypb.Any `protobuf:"bytes,1,opt,name=param,proto3" json:"param,omitempty"`
	Method   *v1.IdRaw  `protobuf:"bytes,2,opt,name=method,proto3" json:"method,omitempty"`
	Call     *v1.IdRaw  `protobuf:"bytes,3,opt,name=call,proto3" json:"call,omitempty"`
	TimedOut bool       `protobuf:"varint,4,opt,name=timed_out,json=timedOut,proto3" json:"timed_out,omitempty"`
}

func (x *BlockUntilCallResponse) Reset() {
	*x = BlockUntilCallResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_syscall_v1_syscall_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockUntilCallResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockUntilCallResponse) ProtoMessage() {}

func (x *BlockUntilCallResponse) ProtoReflect() protoreflect.Message {
	mi := &file_syscall_v1_syscall_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockUntilCallResponse.ProtoReflect.Descriptor instead.
func (*BlockUntilCallResponse) Descriptor() ([]byte, []int) {
	return file_syscall_v1_syscall_proto_rawDescGZIP(), []int{9}
}

func (x *BlockUntilCallResponse) GetParam() *anypb.Any {
	if x != nil {
		return x.Param
	}
	return nil
}

func (x *BlockUntilCallResponse) GetMethod() *v1.IdRaw {
	if x != nil {
		return x.Method
	}
	return nil
}

func (x *BlockUntilCallResponse) GetCall() *v1.IdRaw {
	if x != nil {
		return x.Call
	}
	return nil
}

func (x *BlockUntilCallResponse) GetTimedOut() bool {
	if x != nil {
		return x.TimedOut
	}
	return false
}

// BindMethodRequest is used to tell parigot that the given service_id (located
// at host_id) has an implementation for the given method name.  This will create
// the mapping to a method_id, which is in the response.  The direction parameter
// is either METHOD_DIRECTION_IN, OUT, or BOTH.  IN means thath the method has
// no output parameter (the result is ignored), OUT means the method has no input
// parameters, and BOTH means that both input and output parameters are used.
type BindMethodRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HostId     *v1.IdRaw       `protobuf:"bytes,1,opt,name=host_id,json=hostId,proto3" json:"host_id,omitempty"`
	ServiceId  *v1.IdRaw       `protobuf:"bytes,2,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	MethodName string          `protobuf:"bytes,3,opt,name=method_name,json=methodName,proto3" json:"method_name,omitempty"`
	Direction  MethodDirection `protobuf:"varint,4,opt,name=direction,proto3,enum=syscall.v1.MethodDirection" json:"direction,omitempty"`
}

func (x *BindMethodRequest) Reset() {
	*x = BindMethodRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_syscall_v1_syscall_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BindMethodRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BindMethodRequest) ProtoMessage() {}

func (x *BindMethodRequest) ProtoReflect() protoreflect.Message {
	mi := &file_syscall_v1_syscall_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BindMethodRequest.ProtoReflect.Descriptor instead.
func (*BindMethodRequest) Descriptor() ([]byte, []int) {
	return file_syscall_v1_syscall_proto_rawDescGZIP(), []int{10}
}

func (x *BindMethodRequest) GetHostId() *v1.IdRaw {
	if x != nil {
		return x.HostId
	}
	return nil
}

func (x *BindMethodRequest) GetServiceId() *v1.IdRaw {
	if x != nil {
		return x.ServiceId
	}
	return nil
}

func (x *BindMethodRequest) GetMethodName() string {
	if x != nil {
		return x.MethodName
	}
	return ""
}

func (x *BindMethodRequest) GetDirection() MethodDirection {
	if x != nil {
		return x.Direction
	}
	return MethodDirection_METHOD_DIRECTION_UNSPECIFIED
}

// BindMethodResponse is the method_id of the service and method name provided
// in the request.
type BindMethodResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MethodId *v1.IdRaw `protobuf:"bytes,1,opt,name=method_id,json=methodId,proto3" json:"method_id,omitempty"`
}

func (x *BindMethodResponse) Reset() {
	*x = BindMethodResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_syscall_v1_syscall_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BindMethodResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BindMethodResponse) ProtoMessage() {}

func (x *BindMethodResponse) ProtoReflect() protoreflect.Message {
	mi := &file_syscall_v1_syscall_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BindMethodResponse.ProtoReflect.Descriptor instead.
func (*BindMethodResponse) Descriptor() ([]byte, []int) {
	return file_syscall_v1_syscall_proto_rawDescGZIP(), []int{11}
}

func (x *BindMethodResponse) GetMethodId() *v1.IdRaw {
	if x != nil {
		return x.MethodId
	}
	return nil
}

// FullyQualified service is the complete (protobuf) name of a service as a
// a string.  This is typically something like "foo.v1" for the package and
// the service name is "Foo".  These are the names used by the export, require,
// and locate calls.
type FullyQualifiedService struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PackagePath string `protobuf:"bytes,1,opt,name=package_path,json=packagePath,proto3" json:"package_path,omitempty"`
	Service     string `protobuf:"bytes,2,opt,name=service,proto3" json:"service,omitempty"`
}

func (x *FullyQualifiedService) Reset() {
	*x = FullyQualifiedService{}
	if protoimpl.UnsafeEnabled {
		mi := &file_syscall_v1_syscall_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FullyQualifiedService) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FullyQualifiedService) ProtoMessage() {}

func (x *FullyQualifiedService) ProtoReflect() protoreflect.Message {
	mi := &file_syscall_v1_syscall_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FullyQualifiedService.ProtoReflect.Descriptor instead.
func (*FullyQualifiedService) Descriptor() ([]byte, []int) {
	return file_syscall_v1_syscall_proto_rawDescGZIP(), []int{12}
}

func (x *FullyQualifiedService) GetPackagePath() string {
	if x != nil {
		return x.PackagePath
	}
	return ""
}

func (x *FullyQualifiedService) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

// ExportRequest informs the kernel that the given
// service id implements the named services on the
// host given.  Note that the services provided must be
// distinct.
type ExportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceId *v1.IdRaw                `protobuf:"bytes,1,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	Service   []*FullyQualifiedService `protobuf:"bytes,2,rep,name=service,proto3" json:"service,omitempty"`
	HostId    *v1.IdRaw                `protobuf:"bytes,3,opt,name=host_id,json=hostId,proto3" json:"host_id,omitempty"`
}

func (x *ExportRequest) Reset() {
	*x = ExportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_syscall_v1_syscall_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportRequest) ProtoMessage() {}

func (x *ExportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_syscall_v1_syscall_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportRequest.ProtoReflect.Descriptor instead.
func (*ExportRequest) Descriptor() ([]byte, []int) {
	return file_syscall_v1_syscall_proto_rawDescGZIP(), []int{13}
}

func (x *ExportRequest) GetServiceId() *v1.IdRaw {
	if x != nil {
		return x.ServiceId
	}
	return nil
}

func (x *ExportRequest) GetService() []*FullyQualifiedService {
	if x != nil {
		return x.Service
	}
	return nil
}

func (x *ExportRequest) GetHostId() *v1.IdRaw {
	if x != nil {
		return x.HostId
	}
	return nil
}

// Nothing to return.
type ExportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ExportResponse) Reset() {
	*x = ExportResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_syscall_v1_syscall_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportResponse) ProtoMessage() {}

func (x *ExportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_syscall_v1_syscall_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportResponse.ProtoReflect.Descriptor instead.
func (*ExportResponse) Descriptor() ([]byte, []int) {
	return file_syscall_v1_syscall_proto_rawDescGZIP(), []int{14}
}

// Require establishes that the source given is going to import the service
// given by dest.  It is not required that the source locate the dest, although
// if one does call locate, a check is done to insure require was called previously.
// This check is done to prevent a common programming mistake.
type RequireRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dest   []*FullyQualifiedService `protobuf:"bytes,1,rep,name=dest,proto3" json:"dest,omitempty"`
	Source *v1.IdRaw                `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
}

func (x *RequireRequest) Reset() {
	*x = RequireRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_syscall_v1_syscall_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequireRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequireRequest) ProtoMessage() {}

func (x *RequireRequest) ProtoReflect() protoreflect.Message {
	mi := &file_syscall_v1_syscall_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequireRequest.ProtoReflect.Descriptor instead.
func (*RequireRequest) Descriptor() ([]byte, []int) {
	return file_syscall_v1_syscall_proto_rawDescGZIP(), []int{15}
}

func (x *RequireRequest) GetDest() []*FullyQualifiedService {
	if x != nil {
		return x.Dest
	}
	return nil
}

func (x *RequireRequest) GetSource() *v1.IdRaw {
	if x != nil {
		return x.Source
	}
	return nil
}

// RequireResponse is currently empty.
type RequireResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RequireResponse) Reset() {
	*x = RequireResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_syscall_v1_syscall_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequireResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequireResponse) ProtoMessage() {}

func (x *RequireResponse) ProtoReflect() protoreflect.Message {
	mi := &file_syscall_v1_syscall_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequireResponse.ProtoReflect.Descriptor instead.
func (*RequireResponse) Descriptor() ([]byte, []int) {
	return file_syscall_v1_syscall_proto_rawDescGZIP(), []int{16}
}

// LaunchRequest is used to block a service until its depnedencies are ready.
// It returns a future to the guest that can be used to take action once
// launch is completed.
type LaunchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceId *v1.IdRaw `protobuf:"bytes,1,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	CallId    *v1.IdRaw `protobuf:"bytes,2,opt,name=call_id,json=callId,proto3" json:"call_id,omitempty"`       // reserved for internal use
	HostId    *v1.IdRaw `protobuf:"bytes,3,opt,name=host_id,json=hostId,proto3" json:"host_id,omitempty"`       // reserved for internal use
	MethodId  *v1.IdRaw `protobuf:"bytes,4,opt,name=method_id,json=methodId,proto3" json:"method_id,omitempty"` // reserved for internal use
}

func (x *LaunchRequest) Reset() {
	*x = LaunchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_syscall_v1_syscall_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LaunchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LaunchRequest) ProtoMessage() {}

func (x *LaunchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_syscall_v1_syscall_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LaunchRequest.ProtoReflect.Descriptor instead.
func (*LaunchRequest) Descriptor() ([]byte, []int) {
	return file_syscall_v1_syscall_proto_rawDescGZIP(), []int{17}
}

func (x *LaunchRequest) GetServiceId() *v1.IdRaw {
	if x != nil {
		return x.ServiceId
	}
	return nil
}

func (x *LaunchRequest) GetCallId() *v1.IdRaw {
	if x != nil {
		return x.CallId
	}
	return nil
}

func (x *LaunchRequest) GetHostId() *v1.IdRaw {
	if x != nil {
		return x.HostId
	}
	return nil
}

func (x *LaunchRequest) GetMethodId() *v1.IdRaw {
	if x != nil {
		return x.MethodId
	}
	return nil
}

// LaunchResponse has nothing in it because the action will be handled by
// a future created as a result of LaunchRequest.
type LaunchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LaunchResponse) Reset() {
	*x = LaunchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_syscall_v1_syscall_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LaunchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LaunchResponse) ProtoMessage() {}

func (x *LaunchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_syscall_v1_syscall_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LaunchResponse.ProtoReflect.Descriptor instead.
func (*LaunchResponse) Descriptor() ([]byte, []int) {
	return file_syscall_v1_syscall_proto_rawDescGZIP(), []int{18}
}

// ExitRequest is how you can request for your wasm program, or the whole system
// to exit. This will not terminate the process immediately as there may be other
// services running that need to be notified.
type ExitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// For the code in the ExitPair, the valid values here are 0...192 and values>192
	// or <0 will be set to 192. The valid values for the service are a service id
	// (typically the service making this request) or an zero valued service, indicating
	// that the entire system should be brought down.
	Pair     *ExitPair `protobuf:"bytes,1,opt,name=pair,proto3" json:"pair,omitempty"`
	CallId   *v1.IdRaw `protobuf:"bytes,2,opt,name=call_id,json=callId,proto3" json:"call_id,omitempty"`       // reserved for internal use
	HostId   *v1.IdRaw `protobuf:"bytes,3,opt,name=host_id,json=hostId,proto3" json:"host_id,omitempty"`       // reserved for internal use
	MethodId *v1.IdRaw `protobuf:"bytes,4,opt,name=method_id,json=methodId,proto3" json:"method_id,omitempty"` // reserved for internal use
}

func (x *ExitRequest) Reset() {
	*x = ExitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_syscall_v1_syscall_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExitRequest) ProtoMessage() {}

func (x *ExitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_syscall_v1_syscall_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExitRequest.ProtoReflect.Descriptor instead.
func (*ExitRequest) Descriptor() ([]byte, []int) {
	return file_syscall_v1_syscall_proto_rawDescGZIP(), []int{19}
}

func (x *ExitRequest) GetPair() *ExitPair {
	if x != nil {
		return x.Pair
	}
	return nil
}

func (x *ExitRequest) GetCallId() *v1.IdRaw {
	if x != nil {
		return x.CallId
	}
	return nil
}

func (x *ExitRequest) GetHostId() *v1.IdRaw {
	if x != nil {
		return x.HostId
	}
	return nil
}

func (x *ExitRequest) GetMethodId() *v1.IdRaw {
	if x != nil {
		return x.MethodId
	}
	return nil
}

// ExitResponse will not happen.  The stack will unwind before this
// message could be received.
type ExitResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ExitResponse) Reset() {
	*x = ExitResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_syscall_v1_syscall_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExitResponse) ProtoMessage() {}

func (x *ExitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_syscall_v1_syscall_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExitResponse.ProtoReflect.Descriptor instead.
func (*ExitResponse) Descriptor() ([]byte, []int) {
	return file_syscall_v1_syscall_proto_rawDescGZIP(), []int{20}
}

// Register informs the kernel you are one of the running services
// and you want a service id.
type RegisterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HostId    *v1.IdRaw `protobuf:"bytes,1,opt,name=host_id,json=hostId,proto3" json:"host_id,omitempty"`
	DebugName string    `protobuf:"bytes,2,opt,name=debug_name,json=debugName,proto3" json:"debug_name,omitempty"`
}

func (x *RegisterRequest) Reset() {
	*x = RegisterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_syscall_v1_syscall_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterRequest) ProtoMessage() {}

func (x *RegisterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_syscall_v1_syscall_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterRequest.ProtoReflect.Descriptor instead.
func (*RegisterRequest) Descriptor() ([]byte, []int) {
	return file_syscall_v1_syscall_proto_rawDescGZIP(), []int{21}
}

func (x *RegisterRequest) GetHostId() *v1.IdRaw {
	if x != nil {
		return x.HostId
	}
	return nil
}

func (x *RegisterRequest) GetDebugName() string {
	if x != nil {
		return x.DebugName
	}
	return ""
}

// RegisterResponse indicates if the registering caller has created
// the new service or not.
type RegisterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceId         *v1.IdRaw `protobuf:"bytes,1,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	ExistedPreviously bool      `protobuf:"varint,2,opt,name=existed_previously,json=existedPreviously,proto3" json:"existed_previously,omitempty"`
}

func (x *RegisterResponse) Reset() {
	*x = RegisterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_syscall_v1_syscall_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterResponse) ProtoMessage() {}

func (x *RegisterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_syscall_v1_syscall_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterResponse.ProtoReflect.Descriptor instead.
func (*RegisterResponse) Descriptor() ([]byte, []int) {
	return file_syscall_v1_syscall_proto_rawDescGZIP(), []int{22}
}

func (x *RegisterResponse) GetServiceId() *v1.IdRaw {
	if x != nil {
		return x.ServiceId
	}
	return nil
}

func (x *RegisterResponse) GetExistedPreviously() bool {
	if x != nil {
		return x.ExistedPreviously
	}
	return false
}

// HostBinding is the mapping between a service and a host. Note that a given
// host may be bound to many services, but a single service is always bound
// to exactly one host.
type HostBinding struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceId *v1.IdRaw `protobuf:"bytes,1,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	HostId    *v1.IdRaw `protobuf:"bytes,2,opt,name=host_id,json=hostId,proto3" json:"host_id,omitempty"`
}

func (x *HostBinding) Reset() {
	*x = HostBinding{}
	if protoimpl.UnsafeEnabled {
		mi := &file_syscall_v1_syscall_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HostBinding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostBinding) ProtoMessage() {}

func (x *HostBinding) ProtoReflect() protoreflect.Message {
	mi := &file_syscall_v1_syscall_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostBinding.ProtoReflect.Descriptor instead.
func (*HostBinding) Descriptor() ([]byte, []int) {
	return file_syscall_v1_syscall_proto_rawDescGZIP(), []int{23}
}

func (x *HostBinding) GetServiceId() *v1.IdRaw {
	if x != nil {
		return x.ServiceId
	}
	return nil
}

func (x *HostBinding) GetHostId() *v1.IdRaw {
	if x != nil {
		return x.HostId
	}
	return nil
}

// ServiceByName looks up the given service and returns all
// the host bindings associated with it.   This does
// change the internal data structures, only reports on them.
type ServiceByNameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fqs *FullyQualifiedService `protobuf:"bytes,1,opt,name=fqs,proto3" json:"fqs,omitempty"`
}

func (x *ServiceByNameRequest) Reset() {
	*x = ServiceByNameRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_syscall_v1_syscall_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceByNameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceByNameRequest) ProtoMessage() {}

func (x *ServiceByNameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_syscall_v1_syscall_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceByNameRequest.ProtoReflect.Descriptor instead.
func (*ServiceByNameRequest) Descriptor() ([]byte, []int) {
	return file_syscall_v1_syscall_proto_rawDescGZIP(), []int{24}
}

func (x *ServiceByNameRequest) GetFqs() *FullyQualifiedService {
	if x != nil {
		return x.Fqs
	}
	return nil
}

// ServiceByNameResponse returns the list, possibly empty,
// that has all the host bindings for the named service.
type ServiceByNameResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Binding []*HostBinding `protobuf:"bytes,1,rep,name=binding,proto3" json:"binding,omitempty"`
}

func (x *ServiceByNameResponse) Reset() {
	*x = ServiceByNameResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_syscall_v1_syscall_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceByNameResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceByNameResponse) ProtoMessage() {}

func (x *ServiceByNameResponse) ProtoReflect() protoreflect.Message {
	mi := &file_syscall_v1_syscall_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceByNameResponse.ProtoReflect.Descriptor instead.
func (*ServiceByNameResponse) Descriptor() ([]byte, []int) {
	return file_syscall_v1_syscall_proto_rawDescGZIP(), []int{25}
}

func (x *ServiceByNameResponse) GetBinding() []*HostBinding {
	if x != nil {
		return x.Binding
	}
	return nil
}

// ServiceByIdRequest looks up the given service by
// its string representation.  This is probably only
// useful for passing service objects over the wire.
type ServiceByIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceId string `protobuf:"bytes,1,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
}

func (x *ServiceByIdRequest) Reset() {
	*x = ServiceByIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_syscall_v1_syscall_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceByIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceByIdRequest) ProtoMessage() {}

func (x *ServiceByIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_syscall_v1_syscall_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceByIdRequest.ProtoReflect.Descriptor instead.
func (*ServiceByIdRequest) Descriptor() ([]byte, []int) {
	return file_syscall_v1_syscall_proto_rawDescGZIP(), []int{26}
}

func (x *ServiceByIdRequest) GetServiceId() string {
	if x != nil {
		return x.ServiceId
	}
	return ""
}

// ServiceByIdResponse returns host binding for the
// service or nothing.
type ServiceByIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Binding *HostBinding `protobuf:"bytes,1,opt,name=binding,proto3" json:"binding,omitempty"`
}

func (x *ServiceByIdResponse) Reset() {
	*x = ServiceByIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_syscall_v1_syscall_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceByIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceByIdResponse) ProtoMessage() {}

func (x *ServiceByIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_syscall_v1_syscall_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceByIdResponse.ProtoReflect.Descriptor instead.
func (*ServiceByIdResponse) Descriptor() ([]byte, []int) {
	return file_syscall_v1_syscall_proto_rawDescGZIP(), []int{27}
}

func (x *ServiceByIdResponse) GetBinding() *HostBinding {
	if x != nil {
		return x.Binding
	}
	return nil
}

// DependencyExistsRequest is used to check if there a dependency
// path from source to destination.  Callers should use either
// a target service or a target service name, not both.
// The semantics are slightly different.  When you ask about the
// name of a service, it is a question about what the service
// has declared with require calls.   When you ask about a specific
// service you are asking if a dependency path between the two services
// exists and thus the dest service must be started before the
// source.
type DependencyExistsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceServiceId *v1.IdRaw              `protobuf:"bytes,1,opt,name=source_service_id,json=sourceServiceId,proto3" json:"source_service_id,omitempty"`
	DestServiceId   *v1.IdRaw              `protobuf:"bytes,2,opt,name=dest_service_id,json=destServiceId,proto3" json:"dest_service_id,omitempty"`
	ServiceName     *FullyQualifiedService `protobuf:"bytes,3,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
}

func (x *DependencyExistsRequest) Reset() {
	*x = DependencyExistsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_syscall_v1_syscall_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DependencyExistsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DependencyExistsRequest) ProtoMessage() {}

func (x *DependencyExistsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_syscall_v1_syscall_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DependencyExistsRequest.ProtoReflect.Descriptor instead.
func (*DependencyExistsRequest) Descriptor() ([]byte, []int) {
	return file_syscall_v1_syscall_proto_rawDescGZIP(), []int{28}
}

func (x *DependencyExistsRequest) GetSourceServiceId() *v1.IdRaw {
	if x != nil {
		return x.SourceServiceId
	}
	return nil
}

func (x *DependencyExistsRequest) GetDestServiceId() *v1.IdRaw {
	if x != nil {
		return x.DestServiceId
	}
	return nil
}

func (x *DependencyExistsRequest) GetServiceName() *FullyQualifiedService {
	if x != nil {
		return x.ServiceName
	}
	return nil
}

// DependencyExistsResponse has the exists field set to
// true if there exists a sequence of dependencies that
// join source and dest (from the request).
type DependencyExistsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exists bool `protobuf:"varint,1,opt,name=exists,proto3" json:"exists,omitempty"`
}

func (x *DependencyExistsResponse) Reset() {
	*x = DependencyExistsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_syscall_v1_syscall_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DependencyExistsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DependencyExistsResponse) ProtoMessage() {}

func (x *DependencyExistsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_syscall_v1_syscall_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DependencyExistsResponse.ProtoReflect.Descriptor instead.
func (*DependencyExistsResponse) Descriptor() ([]byte, []int) {
	return file_syscall_v1_syscall_proto_rawDescGZIP(), []int{29}
}

func (x *DependencyExistsResponse) GetExists() bool {
	if x != nil {
		return x.Exists
	}
	return false
}

// ServiceMethodCall is the structure that holds "what's been called" in a service.
type ServiceMethodCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceId *v1.IdRaw `protobuf:"bytes,1,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	MethodId  *v1.IdRaw `protobuf:"bytes,2,opt,name=method_id,json=methodId,proto3" json:"method_id,omitempty"`
}

func (x *ServiceMethodCall) Reset() {
	*x = ServiceMethodCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_syscall_v1_syscall_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceMethodCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceMethodCall) ProtoMessage() {}

func (x *ServiceMethodCall) ProtoReflect() protoreflect.Message {
	mi := &file_syscall_v1_syscall_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceMethodCall.ProtoReflect.Descriptor instead.
func (*ServiceMethodCall) Descriptor() ([]byte, []int) {
	return file_syscall_v1_syscall_proto_rawDescGZIP(), []int{30}
}

func (x *ServiceMethodCall) GetServiceId() *v1.IdRaw {
	if x != nil {
		return x.ServiceId
	}
	return nil
}

func (x *ServiceMethodCall) GetMethodId() *v1.IdRaw {
	if x != nil {
		return x.MethodId
	}
	return nil
}

// ResolvedCall is used to hold the output of a service/method call while we
// are waiting for the future to be resolved.  Note that the host_id here is the
// host id of the SENDER of this message, so the place that the result was
// calculated.
type ResolvedCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HostId      *v1.IdRaw  `protobuf:"bytes,1,opt,name=host_id,json=hostId,proto3" json:"host_id,omitempty"`
	CallId      *v1.IdRaw  `protobuf:"bytes,2,opt,name=call_id,json=callId,proto3" json:"call_id,omitempty"`
	Result      *anypb.Any `protobuf:"bytes,3,opt,name=result,proto3" json:"result,omitempty"`
	ResultError int32      `protobuf:"varint,4,opt,name=result_error,json=resultError,proto3" json:"result_error,omitempty"`
}

func (x *ResolvedCall) Reset() {
	*x = ResolvedCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_syscall_v1_syscall_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResolvedCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolvedCall) ProtoMessage() {}

func (x *ResolvedCall) ProtoReflect() protoreflect.Message {
	mi := &file_syscall_v1_syscall_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolvedCall.ProtoReflect.Descriptor instead.
func (*ResolvedCall) Descriptor() ([]byte, []int) {
	return file_syscall_v1_syscall_proto_rawDescGZIP(), []int{31}
}

func (x *ResolvedCall) GetHostId() *v1.IdRaw {
	if x != nil {
		return x.HostId
	}
	return nil
}

func (x *ResolvedCall) GetCallId() *v1.IdRaw {
	if x != nil {
		return x.CallId
	}
	return nil
}

func (x *ResolvedCall) GetResult() *anypb.Any {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *ResolvedCall) GetResultError() int32 {
	if x != nil {
		return x.ResultError
	}
	return 0
}

// ReadOneRequest gives a set of service/method pairs
// that should be considered for a read.  The ReadOne
// operation returns a single service/method pair that
// has received a call. If the timeout expires, only
// the timeout bool is returned. If the timeout value
// is 0, then an instanteous sample is returned.  If
// the timeout value is negative, it means wait forever.
// In addition to potential calls on the service who
// requests this read, it is also possible that the
// return value represents a completed call from a previous
// point in the execution of the calling program.
type ReadOneRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeoutInMillis int32     `protobuf:"varint,1,opt,name=timeout_in_millis,json=timeoutInMillis,proto3" json:"timeout_in_millis,omitempty"`
	HostId          *v1.IdRaw `protobuf:"bytes,2,opt,name=host_id,json=hostId,proto3" json:"host_id,omitempty"`
}

func (x *ReadOneRequest) Reset() {
	*x = ReadOneRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_syscall_v1_syscall_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadOneRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadOneRequest) ProtoMessage() {}

func (x *ReadOneRequest) ProtoReflect() protoreflect.Message {
	mi := &file_syscall_v1_syscall_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadOneRequest.ProtoReflect.Descriptor instead.
func (*ReadOneRequest) Descriptor() ([]byte, []int) {
	return file_syscall_v1_syscall_proto_rawDescGZIP(), []int{32}
}

func (x *ReadOneRequest) GetTimeoutInMillis() int32 {
	if x != nil {
		return x.TimeoutInMillis
	}
	return 0
}

func (x *ReadOneRequest) GetHostId() *v1.IdRaw {
	if x != nil {
		return x.HostId
	}
	return nil
}

// ReadOneResponse is returned when the control
// is turned over to parigot for a period of time via
// a call to ReadOne.
// ReadOneResponse returns timeout = true if a timeout
// has occurred. If timeout is true, all the other fields
// should be ignored. There are two types of results and
// these are mutually exclusive.
//
// If resolved is not nil, then this a notification that a
// call made by this program have completed.  The
// resolved field holds information about the completed call,
// and that data needs to be matched with the appropriate call ids
// and the promises resolved.
//
// If resolved is nil, then the call is a call
// on a service and method exposed by this server.
// In that case the pair indicates the method and service
// being invoked, and the param and call id should be
// to create a matching ReturnValueRequest.
//
// Note that if the method denoted by the pair does not
// take input, the value of param should be ignored and
// it may be nil.
type ReadOneResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timeout       bool          `protobuf:"varint,1,opt,name=timeout,proto3" json:"timeout,omitempty"`
	Bundle        *MethodBundle `protobuf:"bytes,2,opt,name=bundle,proto3" json:"bundle,omitempty"`
	ParamOrResult *anypb.Any    `protobuf:"bytes,3,opt,name=param_or_result,json=paramOrResult,proto3" json:"param_or_result,omitempty"`
	ResultErr     int32         `protobuf:"varint,4,opt,name=result_err,json=resultErr,proto3" json:"result_err,omitempty"`
	Resolved      *ResolvedCall `protobuf:"bytes,5,opt,name=resolved,proto3" json:"resolved,omitempty"`
	Exit          *ExitPair     `protobuf:"bytes,6,opt,name=exit,proto3" json:"exit,omitempty"`
}

func (x *ReadOneResponse) Reset() {
	*x = ReadOneResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_syscall_v1_syscall_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadOneResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadOneResponse) ProtoMessage() {}

func (x *ReadOneResponse) ProtoReflect() protoreflect.Message {
	mi := &file_syscall_v1_syscall_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadOneResponse.ProtoReflect.Descriptor instead.
func (*ReadOneResponse) Descriptor() ([]byte, []int) {
	return file_syscall_v1_syscall_proto_rawDescGZIP(), []int{33}
}

func (x *ReadOneResponse) GetTimeout() bool {
	if x != nil {
		return x.Timeout
	}
	return false
}

func (x *ReadOneResponse) GetBundle() *MethodBundle {
	if x != nil {
		return x.Bundle
	}
	return nil
}

func (x *ReadOneResponse) GetParamOrResult() *anypb.Any {
	if x != nil {
		return x.ParamOrResult
	}
	return nil
}

func (x *ReadOneResponse) GetResultErr() int32 {
	if x != nil {
		return x.ResultErr
	}
	return 0
}

func (x *ReadOneResponse) GetResolved() *ResolvedCall {
	if x != nil {
		return x.Resolved
	}
	return nil
}

func (x *ReadOneResponse) GetExit() *ExitPair {
	if x != nil {
		return x.Exit
	}
	return nil
}

// ExitPair is a structure that is a service that is requesting
// an exit and the exit code desired.  The service can be empty
// if the caller wants the entire suite of services to be exited.
// Code will be in the "allowed" range of 0 to 192.
type ExitPair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceId *v1.IdRaw `protobuf:"bytes,1,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	Code      int32     `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *ExitPair) Reset() {
	*x = ExitPair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_syscall_v1_syscall_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExitPair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExitPair) ProtoMessage() {}

func (x *ExitPair) ProtoReflect() protoreflect.Message {
	mi := &file_syscall_v1_syscall_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExitPair.ProtoReflect.Descriptor instead.
func (*ExitPair) Descriptor() ([]byte, []int) {
	return file_syscall_v1_syscall_proto_rawDescGZIP(), []int{34}
}

func (x *ExitPair) GetServiceId() *v1.IdRaw {
	if x != nil {
		return x.ServiceId
	}
	return nil
}

func (x *ExitPair) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

// SynchronousExit is sent to a program (a service) that is being told
// by the parigot system to run its cleanup (AtExit) handlers because it
// is going down.
type SynchronousExitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pair *ExitPair `protobuf:"bytes,1,opt,name=pair,proto3" json:"pair,omitempty"`
}

func (x *SynchronousExitRequest) Reset() {
	*x = SynchronousExitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_syscall_v1_syscall_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SynchronousExitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SynchronousExitRequest) ProtoMessage() {}

func (x *SynchronousExitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_syscall_v1_syscall_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SynchronousExitRequest.ProtoReflect.Descriptor instead.
func (*SynchronousExitRequest) Descriptor() ([]byte, []int) {
	return file_syscall_v1_syscall_proto_rawDescGZIP(), []int{35}
}

func (x *SynchronousExitRequest) GetPair() *ExitPair {
	if x != nil {
		return x.Pair
	}
	return nil
}

// Synchronous exit response is sent to the at exit handlers for a service or
// program.  There is no way to stop the shutdown once this is received, it
// can be used only to clean up resources that need to be released.
type SynchronousExitResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pair *ExitPair `protobuf:"bytes,1,opt,name=pair,proto3" json:"pair,omitempty"`
}

func (x *SynchronousExitResponse) Reset() {
	*x = SynchronousExitResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_syscall_v1_syscall_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SynchronousExitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SynchronousExitResponse) ProtoMessage() {}

func (x *SynchronousExitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_syscall_v1_syscall_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SynchronousExitResponse.ProtoReflect.Descriptor instead.
func (*SynchronousExitResponse) Descriptor() ([]byte, []int) {
	return file_syscall_v1_syscall_proto_rawDescGZIP(), []int{36}
}

func (x *SynchronousExitResponse) GetPair() *ExitPair {
	if x != nil {
		return x.Pair
	}
	return nil
}

var File_syscall_v1_syscall_proto protoreflect.FileDescriptor

var file_syscall_v1_syscall_proto_rawDesc = []byte{
	0x0a, 0x18, 0x73, 0x79, 0x73, 0x63, 0x61, 0x6c, 0x6c, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x79, 0x73,
	0x63, 0x61, 0x6c, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x73, 0x79, 0x73, 0x63,
	0x61, 0x6c, 0x6c, 0x2e, 0x76, 0x31, 0x1a, 0x22, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xdc, 0x01, 0x0a, 0x0c, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x2f, 0x0a, 0x07, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x52, 0x61, 0x77, 0x52,
	0x06, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64,
	0x52, 0x61, 0x77, 0x52, 0x09, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x33,
	0x0a, 0x09, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x52, 0x61, 0x77, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x07, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x52, 0x61, 0x77, 0x52, 0x06, 0x63, 0x61,
	0x6c, 0x6c, 0x49, 0x64, 0x22, 0x65, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x42, 0x69,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x09, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x52, 0x61,
	0x77, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x49, 0x64, 0x22, 0x8a, 0x01, 0x0a, 0x0d,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a,
	0x0c, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x62, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x52, 0x61, 0x77, 0x52, 0x08,
	0x63, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x42, 0x79, 0x22, 0xad, 0x01, 0x0a, 0x0e, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x07, 0x68,
	0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x64, 0x52, 0x61, 0x77, 0x52, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x0a,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x64, 0x52, 0x61, 0x77, 0x52, 0x09, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x07, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x79, 0x73, 0x63, 0x61, 0x6c, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52,
	0x07, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x22, 0x6f, 0x0a, 0x0f, 0x44, 0x69, 0x73, 0x70,
	0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x06, 0x62,
	0x75, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x79,
	0x73, 0x63, 0x61, 0x6c, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x42,
	0x75, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x06, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x2a, 0x0a,
	0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41,
	0x6e, 0x79, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x22, 0x81, 0x01, 0x0a, 0x10, 0x44, 0x69,
	0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f,
	0x0a, 0x07, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x64, 0x52, 0x61, 0x77, 0x52, 0x06, 0x63, 0x61, 0x6c, 0x6c, 0x49, 0x64, 0x12,
	0x3c, 0x0a, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x52, 0x61, 0x77, 0x52,
	0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x22, 0x97, 0x01,
	0x0a, 0x12, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x06, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x79, 0x73, 0x63, 0x61, 0x6c, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x06,
	0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x15, 0x0a, 0x13, 0x52, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x38,
	0x0a, 0x15, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x43, 0x61, 0x6c, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x6e, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x63, 0x61,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x22, 0xbd, 0x01, 0x0a, 0x16, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12,
	0x2e, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x64, 0x52, 0x61, 0x77, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12,
	0x2a, 0x0a, 0x04, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x64, 0x52, 0x61, 0x77, 0x52, 0x04, 0x63, 0x61, 0x6c, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x64, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x74, 0x69, 0x6d, 0x65, 0x64, 0x4f, 0x75, 0x74, 0x22, 0xd7, 0x01, 0x0a, 0x11, 0x42, 0x69, 0x6e,
	0x64, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f,
	0x0a, 0x07, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x64, 0x52, 0x61, 0x77, 0x52, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x12,
	0x35, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x52, 0x61, 0x77, 0x52, 0x09, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x73, 0x79, 0x73,
	0x63, 0x61, 0x6c, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x49, 0x0a, 0x12, 0x42, 0x69, 0x6e, 0x64, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x09, 0x6d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64,
	0x52, 0x61, 0x77, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x49, 0x64, 0x22, 0x54, 0x0a,
	0x15, 0x46, 0x75, 0x6c, 0x6c, 0x79, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x64, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x22, 0xb4, 0x01, 0x0a, 0x0d, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x52, 0x61,
	0x77, 0x52, 0x09, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x07,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x73, 0x79, 0x73, 0x63, 0x61, 0x6c, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x75, 0x6c, 0x6c, 0x79,
	0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x2f, 0x0a, 0x07, 0x68, 0x6f, 0x73,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x52,
	0x61, 0x77, 0x52, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x22, 0x10, 0x0a, 0x0e, 0x45, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x77, 0x0a, 0x0e,
	0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35,
	0x0a, 0x04, 0x64, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73,
	0x79, 0x73, 0x63, 0x61, 0x6c, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x75, 0x6c, 0x6c, 0x79, 0x51,
	0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x04, 0x64, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x52, 0x61, 0x77, 0x52, 0x06, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x11, 0x0a, 0x0f, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xdd, 0x01, 0x0a, 0x0d, 0x4c, 0x61, 0x75,
	0x6e, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x0a, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x64, 0x52, 0x61, 0x77, 0x52, 0x09, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49,
	0x64, 0x12, 0x2f, 0x0a, 0x07, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x52, 0x61, 0x77, 0x52, 0x06, 0x63, 0x61, 0x6c, 0x6c,
	0x49, 0x64, 0x12, 0x2f, 0x0a, 0x07, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x52, 0x61, 0x77, 0x52, 0x06, 0x68, 0x6f, 0x73,
	0x74, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x09, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x52, 0x61, 0x77, 0x52, 0x08,
	0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x49, 0x64, 0x22, 0x10, 0x0a, 0x0e, 0x4c, 0x61, 0x75, 0x6e,
	0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xce, 0x01, 0x0a, 0x0b, 0x45,
	0x78, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x04, 0x70, 0x61,
	0x69, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x79, 0x73, 0x63, 0x61,
	0x6c, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x69, 0x74, 0x50, 0x61, 0x69, 0x72, 0x52, 0x04,
	0x70, 0x61, 0x69, 0x72, 0x12, 0x2f, 0x0a, 0x07, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x52, 0x61, 0x77, 0x52, 0x06, 0x63,
	0x61, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x07, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x52, 0x61, 0x77, 0x52, 0x06,
	0x68, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x09, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x52, 0x61,
	0x77, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x49, 0x64, 0x22, 0x0e, 0x0a, 0x0c, 0x45,
	0x78, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x61, 0x0a, 0x0f, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f,
	0x0a, 0x07, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x64, 0x52, 0x61, 0x77, 0x52, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x65, 0x62, 0x75, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x78,
	0x0a, 0x10, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x35, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x52, 0x61, 0x77, 0x52, 0x09,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x12, 0x65, 0x78, 0x69,
	0x73, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x6c, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x65, 0x78, 0x69, 0x73, 0x74, 0x65, 0x64, 0x50, 0x72,
	0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x6c, 0x79, 0x22, 0x75, 0x0a, 0x0b, 0x48, 0x6f, 0x73, 0x74,
	0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x35, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64,
	0x52, 0x61, 0x77, 0x52, 0x09, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x2f,
	0x0a, 0x07, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x64, 0x52, 0x61, 0x77, 0x52, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x22,
	0x4b, 0x0a, 0x14, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x03, 0x66, 0x71, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x79, 0x73, 0x63, 0x61, 0x6c, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x46, 0x75, 0x6c, 0x6c, 0x79, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x03, 0x66, 0x71, 0x73, 0x22, 0x4a, 0x0a, 0x15,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x07, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x79, 0x73, 0x63, 0x61, 0x6c, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52,
	0x07, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x22, 0x33, 0x0a, 0x12, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x22, 0x48, 0x0a,
	0x13, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x07, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x79, 0x73, 0x63, 0x61, 0x6c, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x07,
	0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x22, 0xe3, 0x01, 0x0a, 0x17, 0x44, 0x65, 0x70, 0x65,
	0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x11, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x64, 0x52, 0x61, 0x77, 0x52, 0x0f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x0f, 0x64, 0x65, 0x73, 0x74, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x64, 0x52, 0x61, 0x77, 0x52, 0x0d, 0x64, 0x65, 0x73, 0x74, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x44, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x73, 0x79, 0x73, 0x63, 0x61, 0x6c, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x75, 0x6c, 0x6c, 0x79,
	0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x32, 0x0a,
	0x18, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x45, 0x78, 0x69, 0x73, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x69,
	0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x78, 0x69, 0x73, 0x74,
	0x73, 0x22, 0x7f, 0x0a, 0x11, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x35, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x52,
	0x61, 0x77, 0x52, 0x09, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x33, 0x0a,
	0x09, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x64, 0x52, 0x61, 0x77, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x49, 0x64, 0x22, 0xc1, 0x01, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x43,
	0x61, 0x6c, 0x6c, 0x12, 0x2f, 0x0a, 0x07, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x52, 0x61, 0x77, 0x52, 0x06, 0x68, 0x6f,
	0x73, 0x74, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x07, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x52, 0x61, 0x77, 0x52, 0x06, 0x63,
	0x61, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x6d, 0x0a, 0x0e, 0x52, 0x65, 0x61, 0x64, 0x4f, 0x6e,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x5f, 0x69, 0x6e, 0x5f, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x49, 0x6e, 0x4d, 0x69,
	0x6c, 0x6c, 0x69, 0x73, 0x12, 0x2f, 0x0a, 0x07, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x52, 0x61, 0x77, 0x52, 0x06, 0x68,
	0x6f, 0x73, 0x74, 0x49, 0x64, 0x22, 0x9a, 0x02, 0x0a, 0x0f, 0x52, 0x65, 0x61, 0x64, 0x4f, 0x6e,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x12, 0x30, 0x0a, 0x06, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x79, 0x73, 0x63, 0x61, 0x6c, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x06, 0x62,
	0x75, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x3c, 0x0a, 0x0f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x5f, 0x6f,
	0x72, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x41, 0x6e, 0x79, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x4f, 0x72, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x65, 0x72,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x45,
	0x72, 0x72, 0x12, 0x34, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x79, 0x73, 0x63, 0x61, 0x6c, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x08,
	0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x04, 0x65, 0x78, 0x69, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x79, 0x73, 0x63, 0x61, 0x6c, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x69, 0x74, 0x50, 0x61, 0x69, 0x72, 0x52, 0x04, 0x65, 0x78,
	0x69, 0x74, 0x22, 0x55, 0x0a, 0x08, 0x45, 0x78, 0x69, 0x74, 0x50, 0x61, 0x69, 0x72, 0x12, 0x35,
	0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x52, 0x61, 0x77, 0x52, 0x09, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x42, 0x0a, 0x16, 0x53, 0x79, 0x6e,
	0x63, 0x68, 0x72, 0x6f, 0x6e, 0x6f, 0x75, 0x73, 0x45, 0x78, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x04, 0x70, 0x61, 0x69, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x73, 0x79, 0x73, 0x63, 0x61, 0x6c, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x45,
	0x78, 0x69, 0x74, 0x50, 0x61, 0x69, 0x72, 0x52, 0x04, 0x70, 0x61, 0x69, 0x72, 0x22, 0x43, 0x0a,
	0x17, 0x53, 0x79, 0x6e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x6f, 0x75, 0x73, 0x45, 0x78, 0x69, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x04, 0x70, 0x61, 0x69, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x79, 0x73, 0x63, 0x61, 0x6c, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x69, 0x74, 0x50, 0x61, 0x69, 0x72, 0x52, 0x04, 0x70, 0x61,
	0x69, 0x72, 0x2a, 0xa7, 0x05, 0x0a, 0x09, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x45, 0x72, 0x72,
	0x12, 0x0b, 0x0a, 0x07, 0x4e, 0x6f, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x00, 0x12, 0x0f, 0x0a,
	0x0b, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x01, 0x12, 0x13,
	0x0a, 0x0f, 0x55, 0x6e, 0x6d, 0x61, 0x72, 0x73, 0x68, 0x61, 0x6c, 0x46, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x49, 0x64, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63,
	0x68, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x45, 0x78, 0x68, 0x61, 0x75, 0x73, 0x74, 0x65, 0x64, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x4e,
	0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x10, 0x05, 0x12, 0x10, 0x0a, 0x0c, 0x44, 0x61, 0x74,
	0x61, 0x54, 0x6f, 0x6f, 0x4c, 0x61, 0x72, 0x67, 0x65, 0x10, 0x06, 0x12, 0x11, 0x0a, 0x0d, 0x4d,
	0x61, 0x72, 0x73, 0x68, 0x61, 0x6c, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0x07, 0x12, 0x15,
	0x0a, 0x11, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x55, 0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x10, 0x08, 0x12, 0x22, 0x0a, 0x1e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x41, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x4f, 0x72, 0x45,
	0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x10, 0x09, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x41, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x52, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x64, 0x10, 0x0a, 0x12, 0x13, 0x0a, 0x0f, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65,
	0x6e, 0x63, 0x79, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x10, 0x0b, 0x12, 0x11, 0x0a, 0x0d, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0x0c, 0x12, 0x19, 0x0a,
	0x15, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4c, 0x6f, 0x73, 0x74, 0x10, 0x0d, 0x12, 0x10, 0x0a, 0x0c, 0x44, 0x61, 0x74, 0x61,
	0x54, 0x6f, 0x6f, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x10, 0x0e, 0x12, 0x1a, 0x0a, 0x16, 0x4b, 0x65,
	0x72, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x10, 0x0f, 0x12, 0x11, 0x0a, 0x0d, 0x4e, 0x53, 0x52, 0x65, 0x74, 0x72,
	0x79, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0x10, 0x12, 0x0f, 0x0a, 0x0b, 0x44, 0x65, 0x63,
	0x6f, 0x64, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x11, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x78,
	0x65, 0x63, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x12, 0x12, 0x1b, 0x0a, 0x17, 0x4b, 0x65, 0x72,
	0x6e, 0x65, 0x6c, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x46, 0x61, 0x69,
	0x6c, 0x75, 0x72, 0x65, 0x10, 0x13, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x62, 0x6f, 0x72, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x10, 0x14, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x6e, 0x63, 0x6f,
	0x64, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x16, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x6c, 0x6f,
	0x73, 0x65, 0x64, 0x45, 0x72, 0x72, 0x10, 0x17, 0x12, 0x13, 0x0a, 0x0f, 0x47, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x65, 0x61, 0x64, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0x18, 0x12, 0x14, 0x0a,
	0x10, 0x47, 0x75, 0x65, 0x73, 0x74, 0x57, 0x72, 0x69, 0x74, 0x65, 0x46, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x10, 0x19, 0x12, 0x09, 0x0a, 0x05, 0x42, 0x61, 0x64, 0x49, 0x64, 0x10, 0x1a, 0x12, 0x0c,
	0x0a, 0x08, 0x4e, 0x6f, 0x74, 0x52, 0x65, 0x61, 0x64, 0x79, 0x10, 0x1b, 0x12, 0x0f, 0x0a, 0x0b,
	0x4e, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x10, 0x1c, 0x12, 0x0e, 0x0a,
	0x0a, 0x52, 0x75, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x10, 0x1d, 0x12, 0x12, 0x0a,
	0x0e, 0x52, 0x65, 0x61, 0x64, 0x4f, 0x6e, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x10,
	0x1e, 0x12, 0x10, 0x0a, 0x0c, 0x57, 0x72, 0x69, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x10, 0x1f, 0x12, 0x0d, 0x0a, 0x09, 0x42, 0x61, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x49, 0x64,
	0x10, 0x20, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6c, 0x6f,
	0x73, 0x65, 0x64, 0x10, 0x21, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x78, 0x69, 0x74, 0x46, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x10, 0x22, 0x1a, 0x05, 0xd8, 0x9e, 0x89, 0x02, 0x01, 0x2a, 0x81, 0x01, 0x0a,
	0x0f, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x20, 0x0a, 0x1c, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x44, 0x49, 0x52,
	0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x4d,
	0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x4f, 0x55, 0x54, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f,
	0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x4f, 0x54, 0x48, 0x10, 0x03,
	0x42, 0x16, 0x5a, 0x14, 0x67, 0x2f, 0x73, 0x79, 0x73, 0x63, 0x61, 0x6c, 0x6c, 0x2f, 0x76, 0x31,
	0x3b, 0x73, 0x79, 0x73, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_syscall_v1_syscall_proto_rawDescOnce sync.Once
	file_syscall_v1_syscall_proto_rawDescData = file_syscall_v1_syscall_proto_rawDesc
)

func file_syscall_v1_syscall_proto_rawDescGZIP() []byte {
	file_syscall_v1_syscall_proto_rawDescOnce.Do(func() {
		file_syscall_v1_syscall_proto_rawDescData = protoimpl.X.CompressGZIP(file_syscall_v1_syscall_proto_rawDescData)
	})
	return file_syscall_v1_syscall_proto_rawDescData
}

var file_syscall_v1_syscall_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_syscall_v1_syscall_proto_msgTypes = make([]protoimpl.MessageInfo, 37)
var file_syscall_v1_syscall_proto_goTypes = []interface{}{
	(KernelErr)(0),                   // 0: syscall.v1.KernelErr
	(MethodDirection)(0),             // 1: syscall.v1.MethodDirection
	(*MethodBundle)(nil),             // 2: syscall.v1.MethodBundle
	(*MethodBinding)(nil),            // 3: syscall.v1.MethodBinding
	(*LocateRequest)(nil),            // 4: syscall.v1.LocateRequest
	(*LocateResponse)(nil),           // 5: syscall.v1.LocateResponse
	(*DispatchRequest)(nil),          // 6: syscall.v1.DispatchRequest
	(*DispatchResponse)(nil),         // 7: syscall.v1.DispatchResponse
	(*ReturnValueRequest)(nil),       // 8: syscall.v1.ReturnValueRequest
	(*ReturnValueResponse)(nil),      // 9: syscall.v1.ReturnValueResponse
	(*BlockUntilCallRequest)(nil),    // 10: syscall.v1.BlockUntilCallRequest
	(*BlockUntilCallResponse)(nil),   // 11: syscall.v1.BlockUntilCallResponse
	(*BindMethodRequest)(nil),        // 12: syscall.v1.BindMethodRequest
	(*BindMethodResponse)(nil),       // 13: syscall.v1.BindMethodResponse
	(*FullyQualifiedService)(nil),    // 14: syscall.v1.FullyQualifiedService
	(*ExportRequest)(nil),            // 15: syscall.v1.ExportRequest
	(*ExportResponse)(nil),           // 16: syscall.v1.ExportResponse
	(*RequireRequest)(nil),           // 17: syscall.v1.RequireRequest
	(*RequireResponse)(nil),          // 18: syscall.v1.RequireResponse
	(*LaunchRequest)(nil),            // 19: syscall.v1.LaunchRequest
	(*LaunchResponse)(nil),           // 20: syscall.v1.LaunchResponse
	(*ExitRequest)(nil),              // 21: syscall.v1.ExitRequest
	(*ExitResponse)(nil),             // 22: syscall.v1.ExitResponse
	(*RegisterRequest)(nil),          // 23: syscall.v1.RegisterRequest
	(*RegisterResponse)(nil),         // 24: syscall.v1.RegisterResponse
	(*HostBinding)(nil),              // 25: syscall.v1.HostBinding
	(*ServiceByNameRequest)(nil),     // 26: syscall.v1.ServiceByNameRequest
	(*ServiceByNameResponse)(nil),    // 27: syscall.v1.ServiceByNameResponse
	(*ServiceByIdRequest)(nil),       // 28: syscall.v1.ServiceByIdRequest
	(*ServiceByIdResponse)(nil),      // 29: syscall.v1.ServiceByIdResponse
	(*DependencyExistsRequest)(nil),  // 30: syscall.v1.DependencyExistsRequest
	(*DependencyExistsResponse)(nil), // 31: syscall.v1.DependencyExistsResponse
	(*ServiceMethodCall)(nil),        // 32: syscall.v1.ServiceMethodCall
	(*ResolvedCall)(nil),             // 33: syscall.v1.ResolvedCall
	(*ReadOneRequest)(nil),           // 34: syscall.v1.ReadOneRequest
	(*ReadOneResponse)(nil),          // 35: syscall.v1.ReadOneResponse
	(*ExitPair)(nil),                 // 36: syscall.v1.ExitPair
	(*SynchronousExitRequest)(nil),   // 37: syscall.v1.SynchronousExitRequest
	(*SynchronousExitResponse)(nil),  // 38: syscall.v1.SynchronousExitResponse
	(*v1.IdRaw)(nil),                 // 39: protosupport.v1.IdRaw
	(*anypb.Any)(nil),                // 40: google.protobuf.Any
}
var file_syscall_v1_syscall_proto_depIdxs = []int32{
	39, // 0: syscall.v1.MethodBundle.host_id:type_name -> protosupport.v1.IdRaw
	39, // 1: syscall.v1.MethodBundle.service_id:type_name -> protosupport.v1.IdRaw
	39, // 2: syscall.v1.MethodBundle.method_id:type_name -> protosupport.v1.IdRaw
	39, // 3: syscall.v1.MethodBundle.call_id:type_name -> protosupport.v1.IdRaw
	39, // 4: syscall.v1.MethodBinding.method_id:type_name -> protosupport.v1.IdRaw
	39, // 5: syscall.v1.LocateRequest.called_by:type_name -> protosupport.v1.IdRaw
	39, // 6: syscall.v1.LocateResponse.host_id:type_name -> protosupport.v1.IdRaw
	39, // 7: syscall.v1.LocateResponse.service_id:type_name -> protosupport.v1.IdRaw
	3,  // 8: syscall.v1.LocateResponse.binding:type_name -> syscall.v1.MethodBinding
	2,  // 9: syscall.v1.DispatchRequest.bundle:type_name -> syscall.v1.MethodBundle
	40, // 10: syscall.v1.DispatchRequest.param:type_name -> google.protobuf.Any
	39, // 11: syscall.v1.DispatchResponse.call_id:type_name -> protosupport.v1.IdRaw
	39, // 12: syscall.v1.DispatchResponse.target_host_id:type_name -> protosupport.v1.IdRaw
	2,  // 13: syscall.v1.ReturnValueRequest.bundle:type_name -> syscall.v1.MethodBundle
	40, // 14: syscall.v1.ReturnValueRequest.result:type_name -> google.protobuf.Any
	40, // 15: syscall.v1.BlockUntilCallResponse.param:type_name -> google.protobuf.Any
	39, // 16: syscall.v1.BlockUntilCallResponse.method:type_name -> protosupport.v1.IdRaw
	39, // 17: syscall.v1.BlockUntilCallResponse.call:type_name -> protosupport.v1.IdRaw
	39, // 18: syscall.v1.BindMethodRequest.host_id:type_name -> protosupport.v1.IdRaw
	39, // 19: syscall.v1.BindMethodRequest.service_id:type_name -> protosupport.v1.IdRaw
	1,  // 20: syscall.v1.BindMethodRequest.direction:type_name -> syscall.v1.MethodDirection
	39, // 21: syscall.v1.BindMethodResponse.method_id:type_name -> protosupport.v1.IdRaw
	39, // 22: syscall.v1.ExportRequest.service_id:type_name -> protosupport.v1.IdRaw
	14, // 23: syscall.v1.ExportRequest.service:type_name -> syscall.v1.FullyQualifiedService
	39, // 24: syscall.v1.ExportRequest.host_id:type_name -> protosupport.v1.IdRaw
	14, // 25: syscall.v1.RequireRequest.dest:type_name -> syscall.v1.FullyQualifiedService
	39, // 26: syscall.v1.RequireRequest.source:type_name -> protosupport.v1.IdRaw
	39, // 27: syscall.v1.LaunchRequest.service_id:type_name -> protosupport.v1.IdRaw
	39, // 28: syscall.v1.LaunchRequest.call_id:type_name -> protosupport.v1.IdRaw
	39, // 29: syscall.v1.LaunchRequest.host_id:type_name -> protosupport.v1.IdRaw
	39, // 30: syscall.v1.LaunchRequest.method_id:type_name -> protosupport.v1.IdRaw
	36, // 31: syscall.v1.ExitRequest.pair:type_name -> syscall.v1.ExitPair
	39, // 32: syscall.v1.ExitRequest.call_id:type_name -> protosupport.v1.IdRaw
	39, // 33: syscall.v1.ExitRequest.host_id:type_name -> protosupport.v1.IdRaw
	39, // 34: syscall.v1.ExitRequest.method_id:type_name -> protosupport.v1.IdRaw
	39, // 35: syscall.v1.RegisterRequest.host_id:type_name -> protosupport.v1.IdRaw
	39, // 36: syscall.v1.RegisterResponse.service_id:type_name -> protosupport.v1.IdRaw
	39, // 37: syscall.v1.HostBinding.service_id:type_name -> protosupport.v1.IdRaw
	39, // 38: syscall.v1.HostBinding.host_id:type_name -> protosupport.v1.IdRaw
	14, // 39: syscall.v1.ServiceByNameRequest.fqs:type_name -> syscall.v1.FullyQualifiedService
	25, // 40: syscall.v1.ServiceByNameResponse.binding:type_name -> syscall.v1.HostBinding
	25, // 41: syscall.v1.ServiceByIdResponse.binding:type_name -> syscall.v1.HostBinding
	39, // 42: syscall.v1.DependencyExistsRequest.source_service_id:type_name -> protosupport.v1.IdRaw
	39, // 43: syscall.v1.DependencyExistsRequest.dest_service_id:type_name -> protosupport.v1.IdRaw
	14, // 44: syscall.v1.DependencyExistsRequest.service_name:type_name -> syscall.v1.FullyQualifiedService
	39, // 45: syscall.v1.ServiceMethodCall.service_id:type_name -> protosupport.v1.IdRaw
	39, // 46: syscall.v1.ServiceMethodCall.method_id:type_name -> protosupport.v1.IdRaw
	39, // 47: syscall.v1.ResolvedCall.host_id:type_name -> protosupport.v1.IdRaw
	39, // 48: syscall.v1.ResolvedCall.call_id:type_name -> protosupport.v1.IdRaw
	40, // 49: syscall.v1.ResolvedCall.result:type_name -> google.protobuf.Any
	39, // 50: syscall.v1.ReadOneRequest.host_id:type_name -> protosupport.v1.IdRaw
	2,  // 51: syscall.v1.ReadOneResponse.bundle:type_name -> syscall.v1.MethodBundle
	40, // 52: syscall.v1.ReadOneResponse.param_or_result:type_name -> google.protobuf.Any
	33, // 53: syscall.v1.ReadOneResponse.resolved:type_name -> syscall.v1.ResolvedCall
	36, // 54: syscall.v1.ReadOneResponse.exit:type_name -> syscall.v1.ExitPair
	39, // 55: syscall.v1.ExitPair.service_id:type_name -> protosupport.v1.IdRaw
	36, // 56: syscall.v1.SynchronousExitRequest.pair:type_name -> syscall.v1.ExitPair
	36, // 57: syscall.v1.SynchronousExitResponse.pair:type_name -> syscall.v1.ExitPair
	58, // [58:58] is the sub-list for method output_type
	58, // [58:58] is the sub-list for method input_type
	58, // [58:58] is the sub-list for extension type_name
	58, // [58:58] is the sub-list for extension extendee
	0,  // [0:58] is the sub-list for field type_name
}

func init() { file_syscall_v1_syscall_proto_init() }
func file_syscall_v1_syscall_proto_init() {
	if File_syscall_v1_syscall_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_syscall_v1_syscall_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MethodBundle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_syscall_v1_syscall_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MethodBinding); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_syscall_v1_syscall_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_syscall_v1_syscall_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_syscall_v1_syscall_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DispatchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_syscall_v1_syscall_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DispatchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_syscall_v1_syscall_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReturnValueRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_syscall_v1_syscall_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReturnValueResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_syscall_v1_syscall_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockUntilCallRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_syscall_v1_syscall_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockUntilCallResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_syscall_v1_syscall_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BindMethodRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_syscall_v1_syscall_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BindMethodResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_syscall_v1_syscall_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FullyQualifiedService); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_syscall_v1_syscall_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_syscall_v1_syscall_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_syscall_v1_syscall_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequireRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_syscall_v1_syscall_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequireResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_syscall_v1_syscall_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LaunchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_syscall_v1_syscall_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LaunchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_syscall_v1_syscall_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_syscall_v1_syscall_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExitResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_syscall_v1_syscall_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_syscall_v1_syscall_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_syscall_v1_syscall_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HostBinding); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_syscall_v1_syscall_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceByNameRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_syscall_v1_syscall_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceByNameResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_syscall_v1_syscall_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceByIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_syscall_v1_syscall_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceByIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_syscall_v1_syscall_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DependencyExistsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_syscall_v1_syscall_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DependencyExistsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_syscall_v1_syscall_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceMethodCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_syscall_v1_syscall_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResolvedCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_syscall_v1_syscall_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadOneRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_syscall_v1_syscall_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadOneResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_syscall_v1_syscall_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExitPair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_syscall_v1_syscall_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SynchronousExitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_syscall_v1_syscall_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SynchronousExitResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_syscall_v1_syscall_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   37,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_syscall_v1_syscall_proto_goTypes,
		DependencyIndexes: file_syscall_v1_syscall_proto_depIdxs,
		EnumInfos:         file_syscall_v1_syscall_proto_enumTypes,
		MessageInfos:      file_syscall_v1_syscall_proto_msgTypes,
	}.Build()
	File_syscall_v1_syscall_proto = out.File
	file_syscall_v1_syscall_proto_rawDesc = nil
	file_syscall_v1_syscall_proto_goTypes = nil
	file_syscall_v1_syscall_proto_depIdxs = nil
}
