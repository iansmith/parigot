syntax = "proto3";
package methodcall.v1;
option go_package="github.com/iansmith/parigot/g/methodcall/v1;methodcall";
import "protosupport/v1/protosupport.proto";

service MethodCallSuite {
    rpc Exec(ExecRequest) returns (ExecResponse);
    rpc SuiteReport(SuiteReportRequest) returns (SuiteReportResponse);
}

 
// SuiteInfo is used to describe the set of test functions that a 
// suite has. The map provided goes from the logical name of the
// test ("MyFunc") to the function the test service will actually 
// request ("MyTrickyDispatcher").   The key and value can be identical in
// the simple case.
message SuiteInfo {
  string package_path =1;
  string service =2 ;
  repeated string function_name = 3;
}


// Comparison result describes a single comparison that was done during
// a test.  This result is generally optional inside a ExecResult.  The
// name field is not the package, service, or function name, it is a name
// that can used to narrow down to a single comparison. name can be "",
// as can error_message.  The error_id can be nil. These can be zero
// value because they are not crucial to the display of the results, although
// it is highly recommended that if the success == false, then one of
// error_message or error_id is set.
message ComparisonResult {
  string name = 1;
  string error_message = 2;
  protosupport.v1.IdRaw error_id = 3;
  bool success = 4;
}

// ExecRequest is the type that flows _from_ the TestService to the 
// package.service.func that is under test.  The package, service, and
// name are in the request message because the callee might be doing 
// trickery with names (see the map field in the SuiteInfo) and 
// thus needs to know what to emulate, dispatch, etc.
message ExecRequest {
  string package = 1;
  string service = 2;
  string name = 3;
}

// ExecResponse is what an object under test sends back to the TestService
// describing the test outcome.  A single package/service/name can have
// many comparisons. 
message ExecResponse {
  bool success = 1;
  bool skipped = 2;
  string package = 3;
  string service = 4;
  string name = 5;
  repeated ComparisonResult detail = 6;
}

// SuiteReportRequest is passed to the suite _from_ the TestService and 
// contains overall information about the suite's tests.  The maps have a key
// that is the logical function name (the key in the map of SuiteRequest).
message SuiteReportRequest {
  bool success = 1;
  int32 num_success = 2;
  int32 num_failure = 3;
  int32 num_skip  = 4;
  string package = 5;
  string service = 6;
  map <string, bool> test_success =7; 
  map <string, bool> test_skip =8; 
  map <string, ComparisonResult> detail = 9;
}

// SuiteReportResponse is empty because there is nothing valuable that
// can be sent from the suite to the TestService.
message SuiteReportResponse {}

// QueuePayload is the payload that is sent to the TestService via sending
// and receiving items from the queue.  Note that the TestSends these messages
// during setup and retreives them in the background once the tests have started.
message QueuePayload {
  string name = 1;
  string func_name  = 2;
}

// Error codes
enum MethodCallSuiteErr {
    option (protosupport.v1.parigot_error) = true;
    NoError = 0; // mandatory
    DispatchError = 1; // mandatory
    UnmarshalError = 2; //mandatory
    BadTerms = 3; // can't perform math on terms
}
